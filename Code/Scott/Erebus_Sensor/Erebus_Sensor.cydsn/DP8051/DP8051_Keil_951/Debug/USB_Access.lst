C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_ACCESS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_Access.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\USB_Access.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\USB_Access.lst) CD DB NOIP OT(0,SIZE) DF(D
                    -EBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_Access.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          
  13          #include "USB_Access.h"
  14          
  15          /* This file provides function definitions for USB interactions */
  16          
  17          void Run_USB(){
  18   1          
  19   1          // Power has just been applied to the Vbus pin, so we enter USB communication mode
  20   1      
  21   1          uint8 result = 0;
  22   1          uint8 command = 0;
  23   1      
  24   1          USBUART_Start(0u, USBUART_5V_OPERATION);
  25   1          
  26   1          /* Wait for Device to enumerate */
  27   1          while(!USBUART_GetConfiguration() && Vbus_Read());
  28   1      
  29   1          /* Enumeration is done, enable OUT endpoint for receive data from Host */
  30   1          USBUART_CDC_Init();
  31   1          
  32   1          while(Vbus_Read())
  33   1          {  
  34   2              if(USBUART_DataIsReady() != 0u){   /* Check for input data from PC */
  35   3                  result = retrieve(&command, COMMAND_LENGTH);
  36   3                  
  37   3                  // Discard null bytes
  38   3                  if (command == NULL_BYTE){
  39   4                      continue;
  40   4                  }
  41   3              
  42   3                  if (result == SUCCESS){
  43   4                      
  44   4                      switch (command){
  45   5                      
  46   5                          case IDENTIFY:
  47   5                              send_reply(IDENTIFIER);
  48   5                              break;
  49   5                          
  50   5                          case DUMP_DATA:
  51   5                              if (dump_data()){
  52   6                                  confirm_dump();
  53   6                              }
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 2   

  54   5                              else{
  55   6                                  send_reply(FAIL);
  56   6                              }
  57   5                              break;
  58   5                              
  59   5                          case GET_SETTINGS:
  60   5                              send_settings();
  61   5                              break;
  62   5                              
  63   5                          case CHANGE_SETTING:
  64   5                              send_reply(SUCCESS);
  65   5                              if (apply_settings() == SUCCESS){
  66   6                                  send_reply(SUCCESS);
  67   6                              }
  68   5                              else{
  69   6                                  send_reply(FAIL);
  70   6                              }                  
  71   5                              break;
  72   5                              
  73   5                          case UPDATE_RTC:
  74   5                              send_reply(SUCCESS);
  75   5                              if (update_RTC() == SUCCESS){
  76   6                                  send_reply(SUCCESS);
  77   6                              }
  78   5                              else{
  79   6                                  send_reply(FAIL);
  80   6                              }
  81   5                              break;
  82   5                           
  83   5                          case HARD_RESET:
  84   5                              CMD_hard_reset();
  85   5                              send_reply(SUCCESS);
  86   5                              break;
  87   5                              
  88   5                          default:
  89   5                              send_reply(FAIL);
  90   5                              break;
  91   5                      }
  92   4                  }   
  93   3                  else{
  94   4                      send_reply(FAIL);
  95   4                  }
  96   3              }
  97   2          }
  98   1          
  99   1          USB_Close();
 100   1          
 101   1          return;
 102   1      }
 103          
 104          uint8 retrieve(uint8* buffer, uint8 num_bytes){
 105   1          uint16 count = 0;
 106   1          uint8 attempts = 0;
 107   1          uint8 result = FAIL;
 108   1          
 109   1          count = USBUART_GetCount(); 
 110   1          
 111   1          // If data in buffer is the right amount retrieve it
 112   1          if(count == num_bytes){
 113   2              USBUART_GetData(buffer, num_bytes);
 114   2              result = SUCCESS;
 115   2          }
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 3   

 116   1          // Otherwise, flush the USB buffer and report fail
 117   1          else if (count > 0){
 118   2              USBUART_GetChar();
 119   2          }
 120   1          
 121   1          return result;
 122   1      }
 123          
 124          uint8 apply_settings(){
 125   1          uint8 result = FAIL;
 126   1          uint8 settings_buffer[NUM_SETTINGS] = {0};
 127   1          settings_group new_settings;
 128   1          
 129   1          while (!USBUART_DataIsReady() && Vbus_Read());
 130   1          
 131   1          if (Vbus_Read()){
 132   2              if (retrieve(settings_buffer, NUM_SETTINGS) == SUCCESS){
 133   3                  new_settings.sensor = settings_buffer[0];
 134   3                  new_settings.sample_unit = settings_buffer[1];
 135   3                  new_settings.sample_interval = settings_buffer[2];
 136   3                  
 137   3                  result = update_settings(new_settings);   
 138   3              }
 139   2          } 
 140   1          
 141   1          return result;
 142   1      }
 143          
 144          void send_settings(){
 145   1          
 146   1          uint8 settings[NUM_SETTINGS];
 147   1          
 148   1          settings[0] = get_variable(EE_SENSOR);
 149   1          settings[1] = get_variable(EE_SAMPLE_UNIT);
 150   1          settings[2] = get_variable(EE_SAMPLE_INTERVAL);
 151   1          
 152   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 153   1          
 154   1          if(Vbus_Read()){
 155   2              USBUART_PutData((uint8*) &settings, sizeof(settings));
 156   2          }
 157   1          
 158   1          return;   
 159   1      }
 160          
 161          uint8 dump_data(){
 162   1          
 163   1          uint8 result = SUCCESS;
 164   1          uint8 export_buffer[BUFFER_LEN];
 165   1          uint16 export_index = sample_head_index; 
 166   1          uint16 byte_count = 0;
 167   1          uint8 i = 0;
 168   1          
 169   1          if(export_index == sample_tail_index){
 170   2              export_buffer[0] = NO_DATA;
 171   2              
 172   2              for (i=1; i< BUFFER_LEN; ++i){
 173   3                  export_buffer[i] = PADBYTE;
 174   3              }
 175   2              write_out(export_buffer);
 176   2              
 177   2              if (wait_next() == FAIL){
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 4   

 178   3                  result = FAIL;
 179   3              }
 180   2              
 181   2              goto exit;
 182   2          }
 183   1                  
 184   1          /* Loop 1: Iterate over data samples until export pointer meets the tail */
 185   1          while (export_index != sample_tail_index)
 186   1          {   
 187   2              /* Loop 2: Iterate over the 64-byte USB buffer, copying bytes into it */
 188   2              while (i < BUFFER_LEN)
 189   2              {
 190   3                  if (export_index != sample_tail_index)
 191   3                  {
 192   4                      export_buffer[i] = sample_block[export_index];
 193   4                      ++i;
 194   4                      ++export_index;
 195   4                      ++byte_count;
 196   4                      
 197   4                      /* Check to make sure we're not incrementing export_ptr past
 198   4                       * the bounds of our sample array - wrap around to first element if true */
 199   4                      if (export_index >= SAMPLE_BLOCK_SIZE){
 200   5                          export_index = 0;
 201   5                      }
 202   4                  }
 203   3                  else
 204   3                  {
 205   4                      export_buffer[i] = PADBYTE;
 206   4                      ++i;
 207   4                  }           
 208   3              }
 209   2              
 210   2              /* Send 64-byte packet to host */
 211   2              write_out(export_buffer);
 212   2              i = 0;
 213   2              
 214   2              /* Wait for permission from host to send next packet */
 215   2              if (wait_next() == FAIL){
 216   3                  result = FAIL;
 217   3                  goto exit;
 218   3              }
 219   2          }
 220   1          
 221   1          /* Add the size trailer packet to get total transmission size,
 222   1           * excluding pad bytes */
 223   1          byte_count = byte_count + 4;
 224   1          
 225   1          /* Trailer Packet to Identify End of Sampled Data in Memory */ 
 226   1          export_buffer[0] = 0x80; // End of Data Identifier
 227   1          export_buffer[1] = 0x00;
 228   1          
 229   1          /* Byte count may be up to 16-bits long - pack into two bytes
 230   1           * and copy to buffer */
 231   1          export_buffer[2] = (uint8)(byte_count >> 8);
 232   1          export_buffer[3] = (uint8)0x00FF & byte_count;
 233   1          
 234   1          write_out(export_buffer);
 235   1      
 236   1      exit:
 237   1          
 238   1          return result;
 239   1      }
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 5   

 240          
 241          void write_out(uint8* export_buffer){
 242   1          
 243   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 244   1          USBUART_PutData(export_buffer, BUFFER_LEN);
 245   1        
 246   1          return;
 247   1      }
 248              
 249          uint8 wait_next(){
 250   1          uint8 reply = 0;
 251   1          uint8 retrieve_status = 0;
 252   1          uint8 continue_status = FAIL;
 253   1      
 254   1          while(!reply && Vbus_Read()){
 255   2                  
 256   2              while(!USBUART_GetCount() && Vbus_Read()); 
 257   2              retrieve_status = retrieve(&reply, COMMAND_LENGTH);
 258   2              
 259   2              if(retrieve_status == SUCCESS){
 260   3                  if(reply == NEXT){
 261   4                      continue_status = SUCCESS;
 262   4                      break;
 263   4                  }
 264   3                  else if(reply == FAIL){
 265   4                      continue_status = FAIL;
 266   4                  }
 267   3              }
 268   2          }    
 269   1          
 270   1          return continue_status;
 271   1      }
 272          
 273          void send_reply(uint8 message){
 274   1         
 275   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 276   1          
 277   1          if(Vbus_Read()){
 278   2              USBUART_PutData(&message, REPLY_LEN);
 279   2          }
 280   1          
 281   1          return;
 282   1      }
 283          
 284          void confirm_dump(){
 285   1          uint8 result = 0;
 286   1          uint8 command = 0;
 287   1          
 288   1          while(Vbus_Read()){
 289   2              while(!USBUART_DataIsReady() && Vbus_Read());
 290   2              
 291   2              result = retrieve(&command, COMMAND_LENGTH);
 292   2              
 293   2              if(result == SUCCESS){
 294   3                          
 295   3                  if (command == SUCCESS){
 296   4                      /* Data was successfully dumped, so bring head pointer up to current tail 
 297   4                       * to "erase" the old data */
 298   4                      sample_head_index = sample_tail_index;
 299   4                      Em_EEPROM_Write((uint8*) &sample_tail_index, (uint8*) &(current_sample_indices[pointer_hea
             -d_index]), sizeof(uint16));
 300   4                      mem_full_flag = 0;
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 6   

 301   4                      Em_EEPROM_Write(&mem_full_flag, &mem_full_flash_flag, sizeof(uint8));
 302   4                      break;
 303   4                  }
 304   3                  
 305   3                  else if (command == FAIL){
 306   4                      break;
 307   4                  }
 308   3              }
 309   2          }
 310   1          
 311   1          return;
 312   1      }
 313          
 314          uint8 update_RTC(){
 315   1          uint8 result = FAIL;
 316   1          uint8 time_buffer[TIME_LENGTH] = {0};
 317   1          RTC_TIME_DATE new_time;
 318   1          
 319   1          while (!USBUART_DataIsReady() && Vbus_Read());
 320   1          
 321   1          if (Vbus_Read()){
 322   2              if (retrieve(time_buffer, TIME_LENGTH) == SUCCESS){
 323   3                  new_time.Year = ((uint16) time_buffer[0]) << 0x8;
 324   3                  new_time.Year = new_time.Year | ((uint16) time_buffer[1]);
 325   3                  new_time.Sec = time_buffer[2];
 326   3                  new_time.Min = time_buffer[3];
 327   3                  new_time.Hour = time_buffer[4];
 328   3                  new_time.DayOfMonth = time_buffer[5];
 329   3                  new_time.Month = time_buffer[6];
 330   3                  
 331   3                  result = sync_RTC(&new_time);
 332   3      
 333   3              }
 334   2          }
 335   1          
 336   1          return result;
 337   1      }
 338          
 339          void CMD_hard_reset(){
 340   1      
 341   1          reset_pointers();
 342   1          
 343   1          return;
 344   1      }
 345          
 346          void USB_Close(){
 347   1          
 348   1          rtc_setup();   
 349   1          USBUART_Stop();
 350   1      
 351   1          return;
 352   1      }
 353          
 354          /* [] END OF FILE */
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Run_USB (BEGIN)
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 21
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0005 900000      R     MOV     DPTR,#command
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 24
000A 7D01              MOV     R5,#01H
000C 7F00              MOV     R7,#00H
000E 120000      E     LCALL   _USBUART_Start
0011         ?C0001:
                                           ; SOURCE LINE # 27
0011 120000      E     LCALL   USBUART_GetConfiguration
0014 EF                MOV     A,R7
0015 7006              JNZ     ?C0002
0017 120000      E     LCALL   Vbus_Read
001A EF                MOV     A,R7
001B 70F4              JNZ     ?C0001
001D         ?C0002:
                                           ; SOURCE LINE # 30
001D 120000      E     LCALL   USBUART_CDC_Init
0020         ?C0003:
                                           ; SOURCE LINE # 32
0020 120000      E     LCALL   Vbus_Read
0023 EF                MOV     A,R7
0024 7003              JNZ     $ + 5H
0026 020000      R     LJMP    ?C0004
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
0029 120000      E     LCALL   USBUART_DataIsReady
002C EF                MOV     A,R7
002D 60F1              JZ      ?C0003
                                           ; SOURCE LINE # 35
002F 7B01              MOV     R3,#01H
0031 7A00        R     MOV     R2,#HIGH command
0033 7900        R     MOV     R1,#LOW command
0035 7D01              MOV     R5,#01H
0037 120000      R     LCALL   _retrieve
003A 900000      R     MOV     DPTR,#result
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
003F 900000      R     MOV     DPTR,#command
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 60D9              JZ      ?C0003
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0047         ?C0006:
                                           ; SOURCE LINE # 42
0047 900000      R     MOV     DPTR,#result
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 8   

004D 6402              XRL     A,#02H
004F 6003              JZ      $ + 5H
0051 020000      R     LJMP    ?C0007
                                           ; SOURCE LINE # 44
0054 900000      R     MOV     DPTR,#command
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 120000      E     LCALL   ?C?CCASE
005D 0000        R     DW      ?C0009
005F 01                DB      01H
0060 0000        R     DW      ?C0010
0062 02                DB      02H
0063 0000        R     DW      ?C0013
0065 03                DB      03H
0066 0000        R     DW      ?C0014
0068 04                DB      04H
0069 0000        R     DW      ?C0020
006B 05                DB      05H
006C 0000        R     DW      ?C0017
006E 06                DB      06H
006F 0000              DW      00H
0071 0000        R     DW      ?C0021
                                           ; SOURCE LINE # 46
0073         ?C0009:
                                           ; SOURCE LINE # 47
0073 7F01              MOV     R7,#01H
0075 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 48
0078 80A6              SJMP    ?C0003
                                           ; SOURCE LINE # 50
007A         ?C0010:
                                           ; SOURCE LINE # 51
007A 120000      R     LCALL   dump_data
007D EF                MOV     A,R7
007E 6005              JZ      ?C0011
                                           ; SOURCE LINE # 52
0080 120000      R     LCALL   confirm_dump
                                           ; SOURCE LINE # 53
0083 809B              SJMP    ?C0003
0085         ?C0011:
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0085 7F03              MOV     R7,#03H
0087 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 56
008A         ?C0012:
                                           ; SOURCE LINE # 57
008A 8094              SJMP    ?C0003
                                           ; SOURCE LINE # 59
008C         ?C0013:
                                           ; SOURCE LINE # 60
008C 120000      R     LCALL   send_settings
                                           ; SOURCE LINE # 61
008F 808F              SJMP    ?C0003
                                           ; SOURCE LINE # 63
0091         ?C0014:
                                           ; SOURCE LINE # 64
0091 7F02              MOV     R7,#02H
0093 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 65
0096 120000      R     LCALL   apply_settings
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 9   

0099 EF                MOV     A,R7
009A B40208            CJNE    A,#02H,?C0015
                                           ; SOURCE LINE # 66
009D 7F02              MOV     R7,#02H
009F 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 67
00A2 020000      R     LJMP    ?C0003
00A5         ?C0015:
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
00A5 7F03              MOV     R7,#03H
00A7 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 70
00AA         ?C0016:
                                           ; SOURCE LINE # 71
00AA 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 73
00AD         ?C0017:
                                           ; SOURCE LINE # 74
00AD 7F02              MOV     R7,#02H
00AF 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 75
00B2 120000      R     LCALL   update_RTC
00B5 EF                MOV     A,R7
00B6 B40208            CJNE    A,#02H,?C0018
                                           ; SOURCE LINE # 76
00B9 7F02              MOV     R7,#02H
00BB 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 77
00BE 020000      R     LJMP    ?C0003
00C1         ?C0018:
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
00C1 7F03              MOV     R7,#03H
00C3 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 80
00C6         ?C0019:
                                           ; SOURCE LINE # 81
00C6 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 83
00C9         ?C0020:
                                           ; SOURCE LINE # 84
00C9 120000      R     LCALL   CMD_hard_reset
                                           ; SOURCE LINE # 85
00CC 7F02              MOV     R7,#02H
00CE 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 86
00D1 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 88
00D4         ?C0021:
                                           ; SOURCE LINE # 89
00D4 7F03              MOV     R7,#03H
00D6 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 90
00D9 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 91
00DC         ?C0008:
                                           ; SOURCE LINE # 92
00DC 020000      R     LJMP    ?C0003
00DF         ?C0007:
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 10  

00DF 7F03              MOV     R7,#03H
00E1 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 95
00E4         ?C0022:
                                           ; SOURCE LINE # 96
00E4         ?C0005:
                                           ; SOURCE LINE # 97
00E4 020000      R     LJMP    ?C0003
00E7         ?C0004:
                                           ; SOURCE LINE # 99
00E7 120000      R     LCALL   USB_Close
                                           ; SOURCE LINE # 102
00EA         ?C0023:
00EA 22                RET     
             ; FUNCTION Run_USB (END)

             ; FUNCTION _retrieve (BEGIN)
                                           ; SOURCE LINE # 104
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#num_bytes
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
000B 900000      R     MOV     DPTR,#count
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0013 900000      R     MOV     DPTR,#attempts
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0018 900000      R     MOV     DPTR,#result
001B 7403              MOV     A,#03H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
001E 120000      E     LCALL   USBUART_GetCount
0021 900000      R     MOV     DPTR,#count
0024 EE                MOV     A,R6
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0029 900000      R     MOV     DPTR,#num_bytes
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 7E00              MOV     R6,#00H
0030 900000      R     MOV     DPTR,#count
0033 E0                MOVX    A,@DPTR
0034 FC                MOV     R4,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FD                MOV     R5,A
0038 EF                MOV     A,R7
0039 B5051E            CJNE    A,AR5,?C0024
003C EE                MOV     A,R6
003D B5041A            CJNE    A,AR4,?C0024
                                           ; SOURCE LINE # 113
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 11  

0040 900000      R     MOV     DPTR,#buffer
0043 120000      E     LCALL   ?C?PLDXDATA
0046 900000      R     MOV     DPTR,#num_bytes
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C FD                MOV     R5,A
004D 7C00              MOV     R4,#00H
004F 120000      E     LCALL   _USBUART_GetData
                                           ; SOURCE LINE # 114
0052 900000      R     MOV     DPTR,#result
0055 7402              MOV     A,#02H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0058 8014              SJMP    ?C0025
005A         ?C0024:
                                           ; SOURCE LINE # 117
005A 900000      R     MOV     DPTR,#count
005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 D3                SETB    C
0063 EF                MOV     A,R7
0064 9400              SUBB    A,#00H
0066 EE                MOV     A,R6
0067 9400              SUBB    A,#00H
0069 4003              JC      ?C0025
                                           ; SOURCE LINE # 118
006B 120000      E     LCALL   USBUART_GetChar
                                           ; SOURCE LINE # 119
006E         ?C0026:
006E         ?C0025:
                                           ; SOURCE LINE # 121
006E 900000      R     MOV     DPTR,#result
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
                                           ; SOURCE LINE # 122
0073         ?C0027:
0073 22                RET     
             ; FUNCTION _retrieve (END)

             ; FUNCTION apply_settings (BEGIN)
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0000 900000      R     MOV     DPTR,#result
0003 7403              MOV     A,#03H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH _?ix1000
000A 7900        R     MOV     R1,#LOW _?ix1000
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 7B01              MOV     R3,#01H
0014 7A00        R     MOV     R2,#HIGH settings_buffer
0016 7900        R     MOV     R1,#LOW settings_buffer
0018 A801              MOV     R0,AR1
001A AC02              MOV     R4,AR2
001C AD03              MOV     R5,AR3
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 12  

001E D001              POP     AR1
0020 D002              POP     AR2
0022 D003              POP     AR3
0024 7E00              MOV     R6,#00H
0026 7F03              MOV     R7,#03H
0028 120000      E     LCALL   ?C?COPYAMD
002B         ?C0028:
                                           ; SOURCE LINE # 129
002B 120000      E     LCALL   USBUART_DataIsReady
002E EF                MOV     A,R7
002F 7006              JNZ     ?C0029
0031 120000      E     LCALL   Vbus_Read
0034 EF                MOV     A,R7
0035 70F4              JNZ     ?C0028
0037         ?C0029:
                                           ; SOURCE LINE # 131
0037 120000      E     LCALL   Vbus_Read
003A EF                MOV     A,R7
003B 605B              JZ      ?C0030
                                           ; SOURCE LINE # 132
003D 7B01              MOV     R3,#01H
003F 7A00        R     MOV     R2,#HIGH settings_buffer
0041 7900        R     MOV     R1,#LOW settings_buffer
0043 7D03              MOV     R5,#03H
0045 120000      R     LCALL   _retrieve
0048 EF                MOV     A,R7
0049 6402              XRL     A,#02H
004B 704B              JNZ     ?C0030
                                           ; SOURCE LINE # 133
004D 900000      R     MOV     DPTR,#settings_buffer
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 900000      R     MOV     DPTR,#new_settings
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0057 900000      R     MOV     DPTR,#settings_buffer+01H
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 900000      R     MOV     DPTR,#new_settings+01H
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0061 900000      R     MOV     DPTR,#settings_buffer+02H
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 900000      R     MOV     DPTR,#new_settings+02H
0069 EF                MOV     A,R7
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
006B 7B01              MOV     R3,#01H
006D 7A00        R     MOV     R2,#HIGH new_settings
006F 7900        R     MOV     R1,#LOW new_settings
0071 C003              PUSH    AR3
0073 C002              PUSH    AR2
0075 C001              PUSH    AR1
0077 7B01              MOV     R3,#01H
0079 7A00        E     MOV     R2,#HIGH ?update_settings?BYTE
007B 7900        E     MOV     R1,#LOW ?update_settings?BYTE
007D A801              MOV     R0,AR1
007F AC02              MOV     R4,AR2
0081 AD03              MOV     R5,AR3
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 13  

0083 D001              POP     AR1
0085 D002              POP     AR2
0087 D003              POP     AR3
0089 7E00              MOV     R6,#00H
008B 7F03              MOV     R7,#03H
008D 120000      E     LCALL   ?C?COPYAMD
0090 120000      E     LCALL   update_settings
0093 900000      R     MOV     DPTR,#result
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0098         ?C0031:
                                           ; SOURCE LINE # 139
0098         ?C0030:
                                           ; SOURCE LINE # 141
0098 900000      R     MOV     DPTR,#result
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
                                           ; SOURCE LINE # 142
009D         ?C0032:
009D 22                RET     
             ; FUNCTION apply_settings (END)

             ; FUNCTION send_settings (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 148
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 120000      E     LCALL   _get_variable
0007 900000      R     MOV     DPTR,#settings
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
000C 7F01              MOV     R7,#01H
000E 7E00              MOV     R6,#00H
0010 120000      E     LCALL   _get_variable
0013 900000      R     MOV     DPTR,#settings+01H
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0018 7F02              MOV     R7,#02H
001A 7E00              MOV     R6,#00H
001C 120000      E     LCALL   _get_variable
001F 900000      R     MOV     DPTR,#settings+02H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
0024         ?C0033:
                                           ; SOURCE LINE # 152
0024 120000      E     LCALL   USBUART_CDCIsReady
0027 EF                MOV     A,R7
0028 7006              JNZ     ?C0034
002A 120000      E     LCALL   Vbus_Read
002D EF                MOV     A,R7
002E 70F4              JNZ     ?C0033
0030         ?C0034:
                                           ; SOURCE LINE # 154
0030 120000      E     LCALL   Vbus_Read
0033 EF                MOV     A,R7
0034 600D              JZ      ?C0036
                                           ; SOURCE LINE # 155
0036 7B01              MOV     R3,#01H
0038 7A00        R     MOV     R2,#HIGH settings
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 14  

003A 7900        R     MOV     R1,#LOW settings
003C 7D03              MOV     R5,#03H
003E 7C00              MOV     R4,#00H
0040 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 156
0043         ?C0035:
                                           ; SOURCE LINE # 159
0043         ?C0036:
0043 22                RET     
             ; FUNCTION send_settings (END)

             ; FUNCTION dump_data (BEGIN)
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 163
0000 900000      R     MOV     DPTR,#result
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0006 900000      E     MOV     DPTR,#sample_head_index
0009 E0                MOVX    A,@DPTR
000A FE                MOV     R6,A
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#export_index
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
0016 900000      R     MOV     DPTR,#byte_count
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
001E 900000      R     MOV     DPTR,#i
0021 E4                CLR     A
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0023 900000      E     MOV     DPTR,#sample_tail_index
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#export_index
002E E0                MOVX    A,@DPTR
002F FC                MOV     R4,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FD                MOV     R5,A
0033 ED                MOV     A,R5
0034 6F                XRL     A,R7
0035 7002              JNZ     ?C0085
0037 EC                MOV     A,R4
0038 6E                XRL     A,R6
0039         ?C0085:
0039 704E              JNZ     ?C0043
                                           ; SOURCE LINE # 170
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 15  

003B 900000      R     MOV     DPTR,#export_buffer
003E 74A0              MOV     A,#0A0H
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
0041 900000      R     MOV     DPTR,#i
0044 7401              MOV     A,#01H
0046 F0                MOVX    @DPTR,A
0047         ?C0038:
0047 900000      R     MOV     DPTR,#i
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D C3                CLR     C
004E 9440              SUBB    A,#040H
0050 501A              JNC     ?C0039
                                           ; SOURCE LINE # 173
0052 900000      R     MOV     DPTR,#i
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 7400        R     MOV     A,#LOW export_buffer
0059 2F                ADD     A,R7
005A F582              MOV     DPL,A
005C E4                CLR     A
005D 3400        R     ADDC    A,#HIGH export_buffer
005F F583              MOV     DPH,A
0061 7440              MOV     A,#040H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
0064         ?C0040:
0064 900000      R     MOV     DPTR,#i
0067 E0                MOVX    A,@DPTR
0068 04                INC     A
0069 F0                MOVX    @DPTR,A
006A 80DB              SJMP    ?C0038
006C         ?C0039:
                                           ; SOURCE LINE # 175
006C 7B01              MOV     R3,#01H
006E 7A00        R     MOV     R2,#HIGH export_buffer
0070 7900        R     MOV     R1,#LOW export_buffer
0072 120000      R     LCALL   _write_out
                                           ; SOURCE LINE # 177
0075 120000      R     LCALL   wait_next
0078 EF                MOV     A,R7
0079 6403              XRL     A,#03H
007B 6003              JZ      $ + 5H
007D 020000      R     LJMP    exit
                                           ; SOURCE LINE # 178
0080 900000      R     MOV     DPTR,#result
0083 7403              MOV     A,#03H
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0086         ?C0041:
                                           ; SOURCE LINE # 181
0086 020000      R     LJMP    exit
                                           ; SOURCE LINE # 182
0089         ?C0037:
0089         ?C0043:
                                           ; SOURCE LINE # 185
0089 900000      E     MOV     DPTR,#sample_tail_index
008C E0                MOVX    A,@DPTR
008D FE                MOV     R6,A
008E A3                INC     DPTR
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 16  

008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 900000      R     MOV     DPTR,#export_index
0094 E0                MOVX    A,@DPTR
0095 FC                MOV     R4,A
0096 A3                INC     DPTR
0097 E0                MOVX    A,@DPTR
0098 FD                MOV     R5,A
0099 ED                MOV     A,R5
009A 6F                XRL     A,R7
009B 7002              JNZ     ?C0086
009D EC                MOV     A,R4
009E 6E                XRL     A,R6
009F         ?C0086:
009F 7003              JNZ     $ + 5H
00A1 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 186
00A4         ?C0045:
                                           ; SOURCE LINE # 188
00A4 900000      R     MOV     DPTR,#i
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 EF                MOV     A,R7
00AA C3                CLR     C
00AB 9440              SUBB    A,#040H
00AD 4003              JC      $ + 5H
00AF 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
00B2 900000      E     MOV     DPTR,#sample_tail_index
00B5 E0                MOVX    A,@DPTR
00B6 FE                MOV     R6,A
00B7 A3                INC     DPTR
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA 900000      R     MOV     DPTR,#export_index
00BD E0                MOVX    A,@DPTR
00BE FC                MOV     R4,A
00BF A3                INC     DPTR
00C0 E0                MOVX    A,@DPTR
00C1 FD                MOV     R5,A
00C2 ED                MOV     A,R5
00C3 6F                XRL     A,R7
00C4 7002              JNZ     ?C0087
00C6 EC                MOV     A,R4
00C7 6E                XRL     A,R6
00C8         ?C0087:
00C8 6058              JZ      ?C0047
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
00CA 900000      R     MOV     DPTR,#export_index
00CD E0                MOVX    A,@DPTR
00CE FE                MOV     R6,A
00CF A3                INC     DPTR
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 7400        E     MOV     A,#LOW sample_block
00D4 2F                ADD     A,R7
00D5 F582              MOV     DPL,A
00D7 7400        E     MOV     A,#HIGH sample_block
00D9 3E                ADDC    A,R6
00DA F583              MOV     DPH,A
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 17  

00DC E4                CLR     A
00DD 93                MOVC    A,@A+DPTR
00DE FF                MOV     R7,A
00DF 900000      R     MOV     DPTR,#i
00E2 E0                MOVX    A,@DPTR
00E3 FE                MOV     R6,A
00E4 7400        R     MOV     A,#LOW export_buffer
00E6 2E                ADD     A,R6
00E7 F582              MOV     DPL,A
00E9 E4                CLR     A
00EA 3400        R     ADDC    A,#HIGH export_buffer
00EC F583              MOV     DPH,A
00EE EF                MOV     A,R7
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
00F0 900000      R     MOV     DPTR,#i
00F3 E0                MOVX    A,@DPTR
00F4 04                INC     A
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
00F6 900000      R     MOV     DPTR,#export_index
00F9 E4                CLR     A
00FA 75F001            MOV     B,#01H
00FD 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 195
0100 900000      R     MOV     DPTR,#byte_count
0103 E4                CLR     A
0104 75F001            MOV     B,#01H
0107 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 199
010A 900000      R     MOV     DPTR,#export_index
010D E0                MOVX    A,@DPTR
010E FE                MOV     R6,A
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 C3                CLR     C
0113 EE                MOV     A,R6
0114 9404              SUBB    A,#04H
0116 408C              JC      ?C0045
                                           ; SOURCE LINE # 200
0118 900000      R     MOV     DPTR,#export_index
011B E4                CLR     A
011C F0                MOVX    @DPTR,A
011D A3                INC     DPTR
011E E4                CLR     A
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0120         ?C0048:
                                           ; SOURCE LINE # 202
0120 8082              SJMP    ?C0045
0122         ?C0047:
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0122 900000      R     MOV     DPTR,#i
0125 E0                MOVX    A,@DPTR
0126 FF                MOV     R7,A
0127 7400        R     MOV     A,#LOW export_buffer
0129 2F                ADD     A,R7
012A F582              MOV     DPL,A
012C E4                CLR     A
012D 3400        R     ADDC    A,#HIGH export_buffer
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 18  

012F F583              MOV     DPH,A
0131 7440              MOV     A,#040H
0133 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0134 900000      R     MOV     DPTR,#i
0137 E0                MOVX    A,@DPTR
0138 04                INC     A
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
013A         ?C0049:
                                           ; SOURCE LINE # 208
013A 020000      R     LJMP    ?C0045
013D         ?C0046:
                                           ; SOURCE LINE # 211
013D 7B01              MOV     R3,#01H
013F 7A00        R     MOV     R2,#HIGH export_buffer
0141 7900        R     MOV     R1,#LOW export_buffer
0143 120000      R     LCALL   _write_out
                                           ; SOURCE LINE # 212
0146 900000      R     MOV     DPTR,#i
0149 E4                CLR     A
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
014B 120000      R     LCALL   wait_next
014E EF                MOV     A,R7
014F 6403              XRL     A,#03H
0151 6003              JZ      $ + 5H
0153 020000      R     LJMP    ?C0043
                                           ; SOURCE LINE # 216
0156 900000      R     MOV     DPTR,#result
0159 7403              MOV     A,#03H
015B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
015C 8043              SJMP    exit
                                           ; SOURCE LINE # 218
015E         ?C0050:
                                           ; SOURCE LINE # 219
015E 020000      R     LJMP    ?C0043
0161         ?C0044:
                                           ; SOURCE LINE # 223
0161 900000      R     MOV     DPTR,#byte_count
0164 E4                CLR     A
0165 75F004            MOV     B,#04H
0168 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 226
016B 900000      R     MOV     DPTR,#export_buffer
016E 7480              MOV     A,#080H
0170 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
0171 900000      R     MOV     DPTR,#export_buffer+01H
0174 E4                CLR     A
0175 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
0176 900000      R     MOV     DPTR,#byte_count
0179 E0                MOVX    A,@DPTR
017A FE                MOV     R6,A
017B A3                INC     DPTR
017C E0                MOVX    A,@DPTR
017D FF                MOV     R7,A
017E EE                MOV     A,R6
017F FF                MOV     R7,A
0180 7E00              MOV     R6,#00H
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 19  

0182 900000      R     MOV     DPTR,#export_buffer+02H
0185 EF                MOV     A,R7
0186 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
0187 900000      R     MOV     DPTR,#byte_count
018A E0                MOVX    A,@DPTR
018B FE                MOV     R6,A
018C A3                INC     DPTR
018D E0                MOVX    A,@DPTR
018E FF                MOV     R7,A
018F EF                MOV     A,R7
0190 54FF              ANL     A,#0FFH
0192 FF                MOV     R7,A
0193 900000      R     MOV     DPTR,#export_buffer+03H
0196 EF                MOV     A,R7
0197 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
0198 7B01              MOV     R3,#01H
019A 7A00        R     MOV     R2,#HIGH export_buffer
019C 7900        R     MOV     R1,#LOW export_buffer
019E 120000      R     LCALL   _write_out
                                           ; SOURCE LINE # 236
01A1         exit:
                                           ; SOURCE LINE # 238
01A1 900000      R     MOV     DPTR,#result
01A4 E0                MOVX    A,@DPTR
01A5 FF                MOV     R7,A
                                           ; SOURCE LINE # 239
01A6         ?C0051:
01A6 22                RET     
             ; FUNCTION dump_data (END)

             ; FUNCTION _write_out (BEGIN)
                                           ; SOURCE LINE # 241
0000 900000      R     MOV     DPTR,#export_buffer
0003 120000      E     LCALL   ?C?PSTXDATA
0006         ?C0052:
                                           ; SOURCE LINE # 243
0006 120000      E     LCALL   USBUART_CDCIsReady
0009 EF                MOV     A,R7
000A 7006              JNZ     ?C0053
000C 120000      E     LCALL   Vbus_Read
000F EF                MOV     A,R7
0010 70F4              JNZ     ?C0052
0012         ?C0053:
                                           ; SOURCE LINE # 244
0012 900000      R     MOV     DPTR,#export_buffer
0015 120000      E     LCALL   ?C?PLDXDATA
0018 7D40              MOV     R5,#040H
001A 7C00              MOV     R4,#00H
001C 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 247
001F         ?C0054:
001F 22                RET     
             ; FUNCTION _write_out (END)

             ; FUNCTION wait_next (BEGIN)
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
0000 900000      R     MOV     DPTR,#reply
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 20  

                                           ; SOURCE LINE # 251
0005 900000      R     MOV     DPTR,#retrieve_status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
000A 900000      R     MOV     DPTR,#continue_status
000D 7403              MOV     A,#03H
000F F0                MOVX    @DPTR,A
0010         ?C0055:
                                           ; SOURCE LINE # 254
0010 900000      R     MOV     DPTR,#reply
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 7050              JNZ     ?C0056
0018 120000      E     LCALL   Vbus_Read
001B EF                MOV     A,R7
001C 604A              JZ      ?C0056
001E         ?C0057:
                                           ; SOURCE LINE # 256
001E 120000      E     LCALL   USBUART_GetCount
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 7006              JNZ     ?C0058
0025 120000      E     LCALL   Vbus_Read
0028 EF                MOV     A,R7
0029 70F3              JNZ     ?C0057
002B         ?C0058:
                                           ; SOURCE LINE # 257
002B 7B01              MOV     R3,#01H
002D 7A00        R     MOV     R2,#HIGH reply
002F 7900        R     MOV     R1,#LOW reply
0031 7D01              MOV     R5,#01H
0033 120000      R     LCALL   _retrieve
0036 900000      R     MOV     DPTR,#retrieve_status
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
003B 900000      R     MOV     DPTR,#retrieve_status
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 B402CC            CJNE    A,#02H,?C0055
                                           ; SOURCE LINE # 260
0044 900000      R     MOV     DPTR,#reply
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A B4070A            CJNE    A,#07H,?C0060
                                           ; SOURCE LINE # 261
004D 900000      R     MOV     DPTR,#continue_status
0050 7402              MOV     A,#02H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0053 8013              SJMP    ?C0056
                                           ; SOURCE LINE # 263
0055 80B9              SJMP    ?C0055
0057         ?C0060:
                                           ; SOURCE LINE # 264
0057 900000      R     MOV     DPTR,#reply
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 21  

005C EF                MOV     A,R7
005D B403B0            CJNE    A,#03H,?C0055
                                           ; SOURCE LINE # 265
0060 900000      R     MOV     DPTR,#continue_status
0063 7403              MOV     A,#03H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0066         ?C0062:
0066         ?C0061:
                                           ; SOURCE LINE # 267
0066         ?C0059:
                                           ; SOURCE LINE # 268
0066 80A8              SJMP    ?C0055
0068         ?C0056:
                                           ; SOURCE LINE # 270
0068 900000      R     MOV     DPTR,#continue_status
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
                                           ; SOURCE LINE # 271
006D         ?C0063:
006D 22                RET     
             ; FUNCTION wait_next (END)

             ; FUNCTION _send_reply (BEGIN)
                                           ; SOURCE LINE # 273
0000 900000      R     MOV     DPTR,#message
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005         ?C0064:
                                           ; SOURCE LINE # 275
0005 120000      E     LCALL   USBUART_CDCIsReady
0008 EF                MOV     A,R7
0009 7006              JNZ     ?C0065
000B 120000      E     LCALL   Vbus_Read
000E EF                MOV     A,R7
000F 70F4              JNZ     ?C0064
0011         ?C0065:
                                           ; SOURCE LINE # 277
0011 120000      E     LCALL   Vbus_Read
0014 EF                MOV     A,R7
0015 600D              JZ      ?C0067
                                           ; SOURCE LINE # 278
0017 7B01              MOV     R3,#01H
0019 7A00        R     MOV     R2,#HIGH message
001B 7900        R     MOV     R1,#LOW message
001D 7D01              MOV     R5,#01H
001F 7C00              MOV     R4,#00H
0021 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 279
0024         ?C0066:
                                           ; SOURCE LINE # 282
0024         ?C0067:
0024 22                RET     
             ; FUNCTION _send_reply (END)

             ; FUNCTION confirm_dump (BEGIN)
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 22  

0005 900000      R     MOV     DPTR,#command
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A         ?C0068:
                                           ; SOURCE LINE # 288
000A 120000      E     LCALL   Vbus_Read
000D EF                MOV     A,R7
000E 7003              JNZ     $ + 5H
0010 020000      R     LJMP    ?C0076
0013         ?C0070:
                                           ; SOURCE LINE # 289
0013 120000      E     LCALL   USBUART_DataIsReady
0016 EF                MOV     A,R7
0017 7006              JNZ     ?C0071
0019 120000      E     LCALL   Vbus_Read
001C EF                MOV     A,R7
001D 70F4              JNZ     ?C0070
001F         ?C0071:
                                           ; SOURCE LINE # 291
001F 7B01              MOV     R3,#01H
0021 7A00        R     MOV     R2,#HIGH command
0023 7900        R     MOV     R1,#LOW command
0025 7D01              MOV     R5,#01H
0027 120000      R     LCALL   _retrieve
002A 900000      R     MOV     DPTR,#result
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
002F 900000      R     MOV     DPTR,#result
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 B402D2            CJNE    A,#02H,?C0068
                                           ; SOURCE LINE # 295
0038 900000      R     MOV     DPTR,#command
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E 6402              XRL     A,#02H
0040 6003              JZ      $ + 5H
0042 020000      R     LJMP    ?C0073
                                           ; SOURCE LINE # 298
0045 900000      E     MOV     DPTR,#sample_tail_index
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 900000      E     MOV     DPTR,#sample_head_index
0050 EE                MOV     A,R6
0051 F0                MOVX    @DPTR,A
0052 A3                INC     DPTR
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0055 7B01              MOV     R3,#01H
0057 7A00        E     MOV     R2,#HIGH sample_tail_index
0059 7900        E     MOV     R1,#LOW sample_tail_index
005B C003              PUSH    AR3
005D C002              PUSH    AR2
005F C001              PUSH    AR1
0061 900000      E     MOV     DPTR,#pointer_head_index
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 23  

0064 E0                MOVX    A,@DPTR
0065 FE                MOV     R6,A
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 25E0              ADD     A,ACC
006C FF                MOV     R7,A
006D EE                MOV     A,R6
006E 33                RLC     A
006F FE                MOV     R6,A
0070 7400        E     MOV     A,#LOW current_sample_indices
0072 2F                ADD     A,R7
0073 F9                MOV     R1,A
0074 7400        E     MOV     A,#HIGH current_sample_indices
0076 3E                ADDC    A,R6
0077 FA                MOV     R2,A
0078 7BFF              MOV     R3,#0FFH
007A 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
007D 120000      E     LCALL   ?C?PSTXDATA
0080 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0083 E4                CLR     A
0084 F0                MOVX    @DPTR,A
0085 A3                INC     DPTR
0086 7402              MOV     A,#02H
0088 F0                MOVX    @DPTR,A
0089 D001              POP     AR1
008B D002              POP     AR2
008D D003              POP     AR3
008F 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 300
0092 900000      E     MOV     DPTR,#mem_full_flag
0095 E4                CLR     A
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
0097 7B01              MOV     R3,#01H
0099 7A00        E     MOV     R2,#HIGH mem_full_flag
009B 7900        E     MOV     R1,#LOW mem_full_flag
009D C003              PUSH    AR3
009F C002              PUSH    AR2
00A1 C001              PUSH    AR1
00A3 7BFF              MOV     R3,#0FFH
00A5 7A00        E     MOV     R2,#HIGH mem_full_flash_flag
00A7 7900        E     MOV     R1,#LOW mem_full_flash_flag
00A9 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
00AC 120000      E     LCALL   ?C?PSTXDATA
00AF 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
00B2 E4                CLR     A
00B3 F0                MOVX    @DPTR,A
00B4 A3                INC     DPTR
00B5 7401              MOV     A,#01H
00B7 F0                MOVX    @DPTR,A
00B8 D001              POP     AR1
00BA D002              POP     AR2
00BC D003              POP     AR3
00BE 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 302
00C1 22                RET     
                                           ; SOURCE LINE # 303
00C2 020000      R     LJMP    ?C0068
00C5         ?C0073:
                                           ; SOURCE LINE # 305
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 24  

00C5 900000      R     MOV     DPTR,#command
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA EF                MOV     A,R7
00CB 6403              XRL     A,#03H
00CD 6003              JZ      $ + 5H
00CF 020000      R     LJMP    ?C0068
                                           ; SOURCE LINE # 306
00D2 22                RET     
                                           ; SOURCE LINE # 307
00D3         ?C0075:
00D3         ?C0074:
                                           ; SOURCE LINE # 308
00D3         ?C0072:
                                           ; SOURCE LINE # 309
00D3 020000      R     LJMP    ?C0068
00D6         ?C0069:
                                           ; SOURCE LINE # 312
00D6         ?C0076:
00D6 22                RET     
             ; FUNCTION confirm_dump (END)

             ; FUNCTION update_RTC (BEGIN)
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
0000 900000      R     MOV     DPTR,#result
0003 7403              MOV     A,#03H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH _?ix1001
000A 7900        R     MOV     R1,#LOW _?ix1001
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 7B01              MOV     R3,#01H
0014 7A00        R     MOV     R2,#HIGH time_buffer
0016 7900        R     MOV     R1,#LOW time_buffer
0018 A801              MOV     R0,AR1
001A AC02              MOV     R4,AR2
001C AD03              MOV     R5,AR3
001E D001              POP     AR1
0020 D002              POP     AR2
0022 D003              POP     AR3
0024 7E00              MOV     R6,#00H
0026 7F07              MOV     R7,#07H
0028 120000      E     LCALL   ?C?COPYAMD
002B         ?C0077:
                                           ; SOURCE LINE # 319
002B 120000      E     LCALL   USBUART_DataIsReady
002E EF                MOV     A,R7
002F 7006              JNZ     ?C0078
0031 120000      E     LCALL   Vbus_Read
0034 EF                MOV     A,R7
0035 70F4              JNZ     ?C0077
0037         ?C0078:
                                           ; SOURCE LINE # 321
0037 120000      E     LCALL   Vbus_Read
003A EF                MOV     A,R7
003B 7003              JNZ     $ + 5H
003D 020000      R     LJMP    ?C0079
                                           ; SOURCE LINE # 322
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 25  

0040 7B01              MOV     R3,#01H
0042 7A00        R     MOV     R2,#HIGH time_buffer
0044 7900        R     MOV     R1,#LOW time_buffer
0046 7D07              MOV     R5,#07H
0048 120000      R     LCALL   _retrieve
004B EF                MOV     A,R7
004C 6402              XRL     A,#02H
004E 7070              JNZ     ?C0079
                                           ; SOURCE LINE # 323
0050 900000      R     MOV     DPTR,#time_buffer
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 7E00              MOV     R6,#00H
0057 EF                MOV     A,R7
0058 7F00              MOV     R7,#00H
005A FE                MOV     R6,A
005B 900000      R     MOV     DPTR,#new_time+08H
005E EE                MOV     A,R6
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0063 900000      R     MOV     DPTR,#time_buffer+01H
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 7E00              MOV     R6,#00H
006A 900000      R     MOV     DPTR,#new_time+08H
006D E0                MOVX    A,@DPTR
006E FC                MOV     R4,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 EE                MOV     A,R6
0073 4C                ORL     A,R4
0074 FE                MOV     R6,A
0075 EF                MOV     A,R7
0076 4D                ORL     A,R5
0077 FF                MOV     R7,A
0078 900000      R     MOV     DPTR,#new_time+08H
007B EE                MOV     A,R6
007C F0                MOVX    @DPTR,A
007D A3                INC     DPTR
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
0080 900000      R     MOV     DPTR,#time_buffer+02H
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 900000      R     MOV     DPTR,#new_time
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
008A 900000      R     MOV     DPTR,#time_buffer+03H
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F 900000      R     MOV     DPTR,#new_time+01H
0092 EF                MOV     A,R7
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0094 900000      R     MOV     DPTR,#time_buffer+04H
0097 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 26  

0098 FF                MOV     R7,A
0099 900000      R     MOV     DPTR,#new_time+02H
009C EF                MOV     A,R7
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
009E 900000      R     MOV     DPTR,#time_buffer+05H
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 900000      R     MOV     DPTR,#new_time+04H
00A6 EF                MOV     A,R7
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
00A8 900000      R     MOV     DPTR,#time_buffer+06H
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD 900000      R     MOV     DPTR,#new_time+07H
00B0 EF                MOV     A,R7
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 331
00B2 7B01              MOV     R3,#01H
00B4 7A00        R     MOV     R2,#HIGH new_time
00B6 7900        R     MOV     R1,#LOW new_time
00B8 120000      E     LCALL   _sync_RTC
00BB 900000      R     MOV     DPTR,#result
00BE EF                MOV     A,R7
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
00C0         ?C0080:
                                           ; SOURCE LINE # 334
00C0         ?C0079:
                                           ; SOURCE LINE # 336
00C0 900000      R     MOV     DPTR,#result
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
                                           ; SOURCE LINE # 337
00C5         ?C0081:
00C5 22                RET     
             ; FUNCTION update_RTC (END)

             ; FUNCTION CMD_hard_reset (BEGIN)
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 341
0000 120000      E     LCALL   reset_pointers
                                           ; SOURCE LINE # 344
0003         ?C0082:
0003 22                RET     
             ; FUNCTION CMD_hard_reset (END)

             ; FUNCTION USB_Close (BEGIN)
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 348
0000 120000      E     LCALL   rtc_setup
                                           ; SOURCE LINE # 349
0003 120000      E     LCALL   USBUART_Stop
                                           ; SOURCE LINE # 352
0006         ?C0083:
0006 22                RET     
             ; FUNCTION USB_Close (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.51   USB_ACCESS                                                            05/18/2014 17:32:58 PAGE 27  

   CODE SIZE        =   1603    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =    117    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
