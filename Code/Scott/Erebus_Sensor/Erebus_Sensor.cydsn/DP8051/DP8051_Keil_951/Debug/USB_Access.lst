C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_ACCESS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_Access.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\USB_Access.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\USB_Access.lst) CD DB NOIP OT(2,SIZE) DF(D
                    -EBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_Access.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          #include "USB_Access.h"
  13          
  14          /* This file provides function definitions for USB interactions */
  15          
  16          void USB_ISR(){
  17   1          
  18   1          // Power has just been applied to the Vbus pin, so we enter USB communication mode
  19   1      
  20   1          uint8 result = 0;
  21   1          command instruction = {0,0,0};
  22   1          
  23   1          uint8 temp = 0xFF;
  24   1              
  25   1          /* Start USBFS Operation with 5V operation */
  26   1          USBUART_Start(0u, USBUART_5V_OPERATION);
  27   1          
  28   1          /* Wait for Device to enumerate */
  29   1          while(!USBUART_GetConfiguration() && Vbus_Read());
  30   1      
  31   1          /* Enumeration is done, enable OUT endpoint for receive data from Host */
  32   1          USBUART_CDC_Init();
  33   1            
  34   1          while(Vbus_Read())
  35   1          {    
  36   2              temp = USBUART_DataIsReady();
  37   2              if(temp != 0u){   /* Check for input data from PC */
  38   3                  result = retrieve(&instruction);
  39   3              
  40   3                  if (result == SUCCESS){
  41   4                      
  42   4                      switch (instruction.command){
  43   5                      
  44   5                          case IDENTIFY:
  45   5                              send_reply(IDENTIFIER);
  46   5                              break;
  47   5                          
  48   5                          case DUMP_DATA:
  49   5                              dump_data();
  50   5                              send_reply(SUCCESS);
  51   5                              break;
  52   5                              
  53   5                          case CHANGE_SETTING:
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 2   

  54   5                              apply_setting(instruction);
  55   5                              send_reply(SUCCESS);
  56   5                              break;
  57   5                              
  58   5                          default:
  59   5                              send_reply(FAIL);
  60   5                      }
  61   4                  }   
  62   3                  else{
  63   4                      send_reply(FAIL);
  64   4                  }
  65   3              }
  66   2          }
  67   1          
  68   1          USB_Close();
  69   1          
  70   1          return;
  71   1      }
  72          
  73          uint8 retrieve(command* instruction){
  74   1          uint8 buffer[BUFFER_LEN];
  75   1          uint16 count = 0;
  76   1          uint8 attempts = 0;
  77   1          uint8 result = SUCCESS;
  78   1          
  79   1          count = USBUART_GetCount(); 
  80   1          
  81   1          // If data in buffer is the right amount for a command,
  82   1          // retrieve it
  83   1          if(count == COMMAND_LENGTH){
  84   2              USBUART_GetAll(buffer);
  85   2              instruction -> command = buffer[0];
  86   2              instruction -> target = (((uint16) buffer[1]) << 0x8) | buffer[2];
  87   2              instruction -> value = (((uint16) buffer[3]) << 0x8) | buffer[4];
  88   2          }
  89   1          // Otherwise, flush the USB buffer and report fail
  90   1          else{
  91   2              USBUART_GetChar();
  92   2              result = FAIL;
  93   2          }
  94   1          
  95   1          return result;
  96   1      }
  97          
  98          void apply_setting(command instruction){
  99   1          
 100   1          update_variable(instruction.target, instruction.value);    
 101   1          
 102   1          return;
 103   1      }
 104          
 105          void dump_data(){
 106   1          // Not Yet Implemented
 107   1          
 108   1          return;
 109   1      }
 110          
 111          void send_reply(uint8 message){
 112   1         
 113   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 114   1          
 115   1          if(Vbus_Read()){
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 3   

 116   2              USBUART_PutData(&message, REPLY_LEN);
 117   2          }
 118   1          
 119   1          return;
 120   1      }
 121          
 122          
 123          void USB_Close(){
 124   1          
 125   1          EEPROM_R_Stop();
 126   1          USBUART_Stop();
 127   1          CySoftwareReset();
 128   1          
 129   1          return;
 130   1      }
 131          
 132          
 133          /* [] END OF FILE */
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USB_ISR (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 20
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 21
0005 7BFF              MOV     R3,#0FFH
0007 7A00        R     MOV     R2,#HIGH _?ix1000
0009 7900        R     MOV     R1,#LOW _?ix1000
000B C003              PUSH    AR3
000D C002              PUSH    AR2
000F C001              PUSH    AR1
0011 7B01              MOV     R3,#01H
0013 7A00        R     MOV     R2,#HIGH instruction
0015 7900        R     MOV     R1,#LOW instruction
0017 A801              MOV     R0,AR1
0019 AC02              MOV     R4,AR2
001B AD03              MOV     R5,AR3
001D D001              POP     AR1
001F D002              POP     AR2
0021 D003              POP     AR3
0023 7E00              MOV     R6,#00H
0025 7F05              MOV     R7,#05H
0027 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 23
002A 900000      R     MOV     DPTR,#temp
002D 74FF              MOV     A,#0FFH
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 26
0030 7D01              MOV     R5,#01H
0032 7F00              MOV     R7,#00H
0034 120000      E     LCALL   _USBUART_Start
0037         ?C0001:
                                           ; SOURCE LINE # 29
0037 120000      E     LCALL   USBUART_GetConfiguration
003A EF                MOV     A,R7
003B 7006              JNZ     ?C0002
003D 120000      E     LCALL   Vbus_Read
0040 EF                MOV     A,R7
0041 70F4              JNZ     ?C0001
0043         ?C0002:
                                           ; SOURCE LINE # 32
0043 120000      E     LCALL   USBUART_CDC_Init
0046         ?C0003:
                                           ; SOURCE LINE # 34
0046 120000      E     LCALL   Vbus_Read
0049 EF                MOV     A,R7
004A 7003              JNZ     $ + 5H
004C 020000      R     LJMP    ?C0004
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
004F 120000      E     LCALL   USBUART_DataIsReady
0052 900000      R     MOV     DPTR,#temp
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 37
0057 900000      R     MOV     DPTR,#temp
005A E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 5   

005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D 60E7              JZ      ?C0003
                                           ; SOURCE LINE # 38
005F 7B01              MOV     R3,#01H
0061 7A00        R     MOV     R2,#HIGH instruction
0063 7900        R     MOV     R1,#LOW instruction
0065 120000      R     LCALL   _retrieve
0068 900000      R     MOV     DPTR,#result
006B EF                MOV     A,R7
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 40
006D 900000      R     MOV     DPTR,#result
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 6459              XRL     A,#059H
0075 705F              JNZ     ?C0006
                                           ; SOURCE LINE # 42
0077 900000      R     MOV     DPTR,#instruction
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C EF                MOV     A,R7
007D 120000      E     LCALL   ?C?CCASE
0080 0000        R     DW      ?C0010
0082 43                DB      043H
0083 0000        R     DW      ?C0009
0085 44                DB      044H
0086 0000        R     DW      ?C0008
0088 49                DB      049H
0089 0000              DW      00H
008B 0000        R     DW      ?C0011
                                           ; SOURCE LINE # 44
008D         ?C0008:
                                           ; SOURCE LINE # 45
008D 7F45              MOV     R7,#045H
008F 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 46
0092 80B2              SJMP    ?C0003
                                           ; SOURCE LINE # 48
0094         ?C0009:
                                           ; SOURCE LINE # 49
0094 120000      R     LCALL   dump_data
                                           ; SOURCE LINE # 50
0097 7F59              MOV     R7,#059H
0099 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 51
009C 80A8              SJMP    ?C0003
                                           ; SOURCE LINE # 53
009E         ?C0010:
                                           ; SOURCE LINE # 54
009E 7B01              MOV     R3,#01H
00A0 7A00        R     MOV     R2,#HIGH instruction
00A2 7900        R     MOV     R1,#LOW instruction
00A4 C003              PUSH    AR3
00A6 C002              PUSH    AR2
00A8 C001              PUSH    AR1
00AA 7B01              MOV     R3,#01H
00AC 7A00        R     MOV     R2,#HIGH ?apply_setting?BYTE
00AE 7900        R     MOV     R1,#LOW ?apply_setting?BYTE
00B0 A801              MOV     R0,AR1
00B2 AC02              MOV     R4,AR2
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 6   

00B4 AD03              MOV     R5,AR3
00B6 D001              POP     AR1
00B8 D002              POP     AR2
00BA D003              POP     AR3
00BC 7E00              MOV     R6,#00H
00BE 7F05              MOV     R7,#05H
00C0 120000      E     LCALL   ?C?COPYAMD
00C3 120000      R     LCALL   apply_setting
                                           ; SOURCE LINE # 55
00C6 7F59              MOV     R7,#059H
00C8 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 56
00CB 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 58
00CE         ?C0011:
                                           ; SOURCE LINE # 59
00CE 7F4E              MOV     R7,#04EH
00D0 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
00D3 020000      R     LJMP    ?C0003
00D6         ?C0006:
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
00D6 7F4E              MOV     R7,#04EH
00D8 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
00DB 020000      R     LJMP    ?C0003
00DE         ?C0004:
                                           ; SOURCE LINE # 68
00DE 120000      R     LCALL   USB_Close
                                           ; SOURCE LINE # 71
00E1         ?C0013:
00E1 22                RET     
             ; FUNCTION USB_ISR (END)

             ; FUNCTION _retrieve (BEGIN)
                                           ; SOURCE LINE # 73
0000 900000      R     MOV     DPTR,#instruction
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 75
0006 900000      R     MOV     DPTR,#count
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
000E 900000      R     MOV     DPTR,#attempts
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0013 900000      R     MOV     DPTR,#result
0016 7459              MOV     A,#059H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
0019 120000      E     LCALL   USBUART_GetCount
001C 900000      R     MOV     DPTR,#count
001F EE                MOV     A,R6
0020 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 7   

0021 A3                INC     DPTR
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0024 900000      R     MOV     DPTR,#count
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 6405              XRL     A,#05H
002F 4E                ORL     A,R6
0030 7072              JNZ     ?C0014
                                           ; SOURCE LINE # 84
0032 7B01              MOV     R3,#01H
0034 7A00        R     MOV     R2,#HIGH buffer
0036 7900        R     MOV     R1,#LOW buffer
0038 120000      E     LCALL   _USBUART_GetAll
                                           ; SOURCE LINE # 85
003B 900000      R     MOV     DPTR,#buffer
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#instruction
0043 120000      E     LCALL   ?C?PLDXDATA
0046 EF                MOV     A,R7
0047 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 86
004A 900000      R     MOV     DPTR,#buffer+01H
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 7E00              MOV     R6,#00H
0051 EF                MOV     A,R7
0052 7F00              MOV     R7,#00H
0054 FE                MOV     R6,A
0055 900000      R     MOV     DPTR,#buffer+02H
0058 E0                MOVX    A,@DPTR
0059 FD                MOV     R5,A
005A 7C00              MOV     R4,#00H
005C EE                MOV     A,R6
005D 4C                ORL     A,R4
005E FE                MOV     R6,A
005F EF                MOV     A,R7
0060 4D                ORL     A,R5
0061 FF                MOV     R7,A
0062 900000      R     MOV     DPTR,#instruction
0065 120000      E     LCALL   ?C?PLDXDATA
0068 E9                MOV     A,R1
0069 2401              ADD     A,#01H
006B F9                MOV     R1,A
006C EA                MOV     A,R2
006D 3400              ADDC    A,#00H
006F FA                MOV     R2,A
0070 EE                MOV     A,R6
0071 8FF0              MOV     B,R7
0073 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 87
0076 900000      R     MOV     DPTR,#buffer+03H
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 7E00              MOV     R6,#00H
007D EF                MOV     A,R7
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 8   

007E 7F00              MOV     R7,#00H
0080 FE                MOV     R6,A
0081 900000      R     MOV     DPTR,#buffer+04H
0084 E0                MOVX    A,@DPTR
0085 FD                MOV     R5,A
0086 7C00              MOV     R4,#00H
0088 EE                MOV     A,R6
0089 4C                ORL     A,R4
008A FE                MOV     R6,A
008B EF                MOV     A,R7
008C 4D                ORL     A,R5
008D FF                MOV     R7,A
008E 900000      R     MOV     DPTR,#instruction
0091 120000      E     LCALL   ?C?PLDXDATA
0094 E9                MOV     A,R1
0095 2403              ADD     A,#03H
0097 F9                MOV     R1,A
0098 EA                MOV     A,R2
0099 3400              ADDC    A,#00H
009B FA                MOV     R2,A
009C EE                MOV     A,R6
009D 8FF0              MOV     B,R7
009F 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 88
00A2 8009              SJMP    ?C0015
00A4         ?C0014:
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
00A4 120000      E     LCALL   USBUART_GetChar
                                           ; SOURCE LINE # 92
00A7 900000      R     MOV     DPTR,#result
00AA 744E              MOV     A,#04EH
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
00AD         ?C0015:
                                           ; SOURCE LINE # 95
00AD 900000      R     MOV     DPTR,#result
00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
                                           ; SOURCE LINE # 96
00B2         ?C0016:
00B2 22                RET     
             ; FUNCTION _retrieve (END)

             ; FUNCTION apply_setting (BEGIN)
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 100
0000 900000      R     MOV     DPTR,#instruction+01H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#instruction+03H
000B E0                MOVX    A,@DPTR
000C FC                MOV     R4,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FD                MOV     R5,A
0010 120000      E     LCALL   _update_variable
                                           ; SOURCE LINE # 103
0013         ?C0017:
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 9   

0013 22                RET     
             ; FUNCTION apply_setting (END)

             ; FUNCTION dump_data (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 109
0000         ?C0018:
0000 22                RET     
             ; FUNCTION dump_data (END)

             ; FUNCTION _send_reply (BEGIN)
                                           ; SOURCE LINE # 111
0000 900000      R     MOV     DPTR,#message
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005         ?C0019:
                                           ; SOURCE LINE # 113
0005 120000      E     LCALL   USBUART_CDCIsReady
0008 EF                MOV     A,R7
0009 7006              JNZ     ?C0020
000B 120000      E     LCALL   Vbus_Read
000E EF                MOV     A,R7
000F 70F4              JNZ     ?C0019
0011         ?C0020:
                                           ; SOURCE LINE # 115
0011 120000      E     LCALL   Vbus_Read
0014 EF                MOV     A,R7
0015 600D              JZ      ?C0022
                                           ; SOURCE LINE # 116
0017 7B01              MOV     R3,#01H
0019 7A00        R     MOV     R2,#HIGH message
001B 7900        R     MOV     R1,#LOW message
001D 7D01              MOV     R5,#01H
001F 7C00              MOV     R4,#00H
0021 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 120
0024         ?C0022:
0024 22                RET     
             ; FUNCTION _send_reply (END)

             ; FUNCTION USB_Close (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 125
0000 120000      E     LCALL   EEPROM_R_Stop
                                           ; SOURCE LINE # 126
0003 120000      E     LCALL   USBUART_Stop
                                           ; SOURCE LINE # 127
0006 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 130
0009         ?C0023:
0009 22                RET     
             ; FUNCTION USB_Close (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    473    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----      84
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:43:46 PAGE 10  

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
