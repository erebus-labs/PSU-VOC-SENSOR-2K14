C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/18/2014 17:33:00 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SAMPLE_HANDLER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Sample_Handler.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Sample_Handler.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\Sample_Handler.lst) CD DB NOIP OT(0,SI
                    -ZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Sample_Handler.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          #include "Sample_Handler.h"
  13          
  14          
  15          void take_sample()
  16          {
  17   1          uint16 SampledData = 0;
  18   1          ADC_Wakeup();
  19   1          
  20   1          /* Get sample from ADC */
  21   1          SampledData = ADC_Read16(); /* Function Starts, Converts, Stops, and Returns from ADC */
  22   1          
  23   1          /* Write sample value to Emulated EEPROM */
  24   1          Em_EEPROM_Write((uint8*) &SampledData, &(sample_block[sample_tail_index]), SAMPLE_SIZE);
  25   1             
  26   1          sample_tail_index = sample_tail_index + SAMPLE_SIZE;
  27   1          /* Check to make sure we're not incrementing the tail pointer past
  28   1           * the bounds of our sample array */
  29   1          if(sample_tail_index >= SAMPLE_BLOCK_SIZE){
  30   2              sample_tail_index = 0;
  31   2          }
  32   1          
  33   1          /* Check to make sure we aren't about to start overwriting existing data */
  34   1          if (sample_tail_index == sample_head_index){
  35   2              memory_full();
  36   2              goto exit;
  37   2          }
  38   1            
  39   1          /* Store incremented tail pointer back in Emulated EEPROM */
  40   1          Em_EEPROM_Write((uint8*) &sample_tail_index, (uint8*) &(current_sample_indices[pointer_tail_index]), s
             -izeof(uint16));
  41   1      
  42   1      exit:
  43   1          
  44   1          ADC_Sleep();
  45   1          return;    
  46   1      }
  47          
  48          
  49          
  50              
  51          /* [] END OF FILE */
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/18/2014 17:33:00 PAGE 2   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION take_sample (BEGIN)
                                           ; SOURCE LINE # 15
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
0000 900000      R     MOV     DPTR,#SampledData
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 18
0008 120000      E     LCALL   ADC_Wakeup
                                           ; SOURCE LINE # 21
000B 120000      E     LCALL   ADC_Read16
000E 900000      R     MOV     DPTR,#SampledData
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 24
0016 7B01              MOV     R3,#01H
0018 7A00        R     MOV     R2,#HIGH SampledData
001A 7900        R     MOV     R1,#LOW SampledData
001C C003              PUSH    AR3
001E C002              PUSH    AR2
0020 C001              PUSH    AR1
0022 900000      E     MOV     DPTR,#sample_tail_index
0025 E0                MOVX    A,@DPTR
0026 FE                MOV     R6,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 7400        E     MOV     A,#LOW sample_block
002C 2F                ADD     A,R7
002D F9                MOV     R1,A
002E 7400        E     MOV     A,#HIGH sample_block
0030 3E                ADDC    A,R6
0031 FA                MOV     R2,A
0032 7BFF              MOV     R3,#0FFH
0034 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0037 120000      E     LCALL   ?C?PSTXDATA
003A 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
003D E4                CLR     A
003E F0                MOVX    @DPTR,A
003F A3                INC     DPTR
0040 7402              MOV     A,#02H
0042 F0                MOVX    @DPTR,A
0043 D001              POP     AR1
0045 D002              POP     AR2
0047 D003              POP     AR3
0049 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 26
004C 900000      E     MOV     DPTR,#sample_tail_index
004F E4                CLR     A
0050 75F002            MOV     B,#02H
0053 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 29
0056 900000      E     MOV     DPTR,#sample_tail_index
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/18/2014 17:33:00 PAGE 3   

0059 E0                MOVX    A,@DPTR
005A FE                MOV     R6,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E C3                CLR     C
005F EE                MOV     A,R6
0060 9404              SUBB    A,#04H
0062 4008              JC      ?C0001
                                           ; SOURCE LINE # 30
0064 900000      E     MOV     DPTR,#sample_tail_index
0067 E4                CLR     A
0068 F0                MOVX    @DPTR,A
0069 A3                INC     DPTR
006A E4                CLR     A
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 31
006C         ?C0001:
                                           ; SOURCE LINE # 34
006C 900000      E     MOV     DPTR,#sample_head_index
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 900000      E     MOV     DPTR,#sample_tail_index
0077 E0                MOVX    A,@DPTR
0078 FC                MOV     R4,A
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B FD                MOV     R5,A
007C ED                MOV     A,R5
007D B50709            CJNE    A,AR7,?C0002
0080 EC                MOV     A,R4
0081 B50605            CJNE    A,AR6,?C0002
                                           ; SOURCE LINE # 35
0084 120000      E     LCALL   memory_full
                                           ; SOURCE LINE # 36
0087 803D              SJMP    exit
                                           ; SOURCE LINE # 37
0089         ?C0002:
                                           ; SOURCE LINE # 40
0089 7B01              MOV     R3,#01H
008B 7A00        E     MOV     R2,#HIGH sample_tail_index
008D 7900        E     MOV     R1,#LOW sample_tail_index
008F C003              PUSH    AR3
0091 C002              PUSH    AR2
0093 C001              PUSH    AR1
0095 900000      E     MOV     DPTR,#pointer_tail_index
0098 E0                MOVX    A,@DPTR
0099 FE                MOV     R6,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D EF                MOV     A,R7
009E 25E0              ADD     A,ACC
00A0 FF                MOV     R7,A
00A1 EE                MOV     A,R6
00A2 33                RLC     A
00A3 FE                MOV     R6,A
00A4 7400        E     MOV     A,#LOW current_sample_indices
00A6 2F                ADD     A,R7
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/18/2014 17:33:00 PAGE 4   

00A7 F9                MOV     R1,A
00A8 7400        E     MOV     A,#HIGH current_sample_indices
00AA 3E                ADDC    A,R6
00AB FA                MOV     R2,A
00AC 7BFF              MOV     R3,#0FFH
00AE 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
00B1 120000      E     LCALL   ?C?PSTXDATA
00B4 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
00B7 E4                CLR     A
00B8 F0                MOVX    @DPTR,A
00B9 A3                INC     DPTR
00BA 7402              MOV     A,#02H
00BC F0                MOVX    @DPTR,A
00BD D001              POP     AR1
00BF D002              POP     AR2
00C1 D003              POP     AR3
00C3 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 42
00C6         exit:
                                           ; SOURCE LINE # 44
00C6 120000      E     LCALL   ADC_Sleep
                                           ; SOURCE LINE # 46
00C9         ?C0004:
00C9 22                RET     
             ; FUNCTION take_sample (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    202    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
