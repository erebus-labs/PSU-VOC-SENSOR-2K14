C51 COMPILER V9.51   UTILITY                                                               05/18/2014 17:46:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UTILITY
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Utility.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Utility.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\Utility.lst) CD DB NOIP OT(0,SIZE) DF(DEBUG) 
                    -INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Utility.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          
  13          #include "Utility.h"
  14          
  15          void reset_pointers(){
  16   1          
  17   1          uint16 zero = 0x00;
  18   1          uint16 tail_ix = TAIL_INDEX;
  19   1          uint16 head_ix = HEAD_INDEX;
  20   1              
  21   1          // reset master pointers 
  22   1          Em_EEPROM_Write((uint8*) &head_ix, (uint8*) &(master_sample_indices[HEAD_INDEX]), sizeof(uint16));
  23   1          Em_EEPROM_Write((uint8*) &tail_ix, (uint8*) &(master_sample_indices[TAIL_INDEX]), sizeof(uint16));
  24   1          
  25   1          // reset sample pointers to the top of the sample block
  26   1          Em_EEPROM_Write((uint8*) &zero, (uint8*) &(current_sample_indices[HEAD_INDEX]), sizeof(uint16));
  27   1          Em_EEPROM_Write((uint8*) &zero, (uint8*) &(current_sample_indices[TAIL_INDEX]), sizeof(uint16));
  28   1          
  29   1          return;
  30   1      }
  31          
  32          void memory_full(){
  33   1          
  34   1          StopCollection_IRQ_Stop();
  35   1          sample_enable = 0;
  36   1          mem_full_flag = 1;
  37   1          Em_EEPROM_Write(&mem_full_flag, &mem_full_flash_flag, sizeof(uint8));
  38   1          LED_on(RED);
  39   1      
  40   1          return;
  41   1      }
  42          
  43          void check_battery(){
  44   1          uint16 SampledData = 0;
  45   1          ADC_Wakeup();
  46   1          ADC_MUX_Select(BATT_PIN);
  47   1          
  48   1          SampledData = ADC_Read16(); /* Function Starts, Converts, Stops, and Returns from ADC */
  49   1          
  50   1          if (SampledData <= BATT_THRESHOLD){
  51   2              low_power_flag = 1;
  52   2          }
  53   1          else{
C51 COMPILER V9.51   UTILITY                                                               05/18/2014 17:46:44 PAGE 2   

  54   2              low_power_flag = 0;
  55   2          }
  56   1          
  57   1          ADC_Sleep();
  58   1          ADC_MUX_FastSelect(SAMPLE_PIN);
  59   1          
  60   1          return;
  61   1      }
  62          
  63          /* [] END OF FILE */
C51 COMPILER V9.51   UTILITY                                                               05/18/2014 17:46:44 PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION reset_pointers (BEGIN)
                                           ; SOURCE LINE # 15
                                           ; SOURCE LINE # 17
0000 900000      R     MOV     DPTR,#zero
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 18
0008 900000      R     MOV     DPTR,#tail_ix
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 19
0011 900000      R     MOV     DPTR,#head_ix
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0019 7B01              MOV     R3,#01H
001B 7A00        R     MOV     R2,#HIGH head_ix
001D 7900        R     MOV     R1,#LOW head_ix
001F C003              PUSH    AR3
0021 C002              PUSH    AR2
0023 C001              PUSH    AR1
0025 7BFF              MOV     R3,#0FFH
0027 7A00        E     MOV     R2,#HIGH master_sample_indices
0029 7900        E     MOV     R1,#LOW master_sample_indices
002B 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
002E 120000      E     LCALL   ?C?PSTXDATA
0031 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 7402              MOV     A,#02H
0039 F0                MOVX    @DPTR,A
003A D001              POP     AR1
003C D002              POP     AR2
003E D003              POP     AR3
0040 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 23
0043 7B01              MOV     R3,#01H
0045 7A00        R     MOV     R2,#HIGH tail_ix
0047 7900        R     MOV     R1,#LOW tail_ix
0049 C003              PUSH    AR3
004B C002              PUSH    AR2
004D C001              PUSH    AR1
004F 7BFF              MOV     R3,#0FFH
0051 7A00        E     MOV     R2,#HIGH master_sample_indices+02H
0053 7900        E     MOV     R1,#LOW master_sample_indices+02H
0055 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0058 120000      E     LCALL   ?C?PSTXDATA
005B 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
005E E4                CLR     A
C51 COMPILER V9.51   UTILITY                                                               05/18/2014 17:46:44 PAGE 4   

005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 7402              MOV     A,#02H
0063 F0                MOVX    @DPTR,A
0064 D001              POP     AR1
0066 D002              POP     AR2
0068 D003              POP     AR3
006A 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 26
006D 7B01              MOV     R3,#01H
006F 7A00        R     MOV     R2,#HIGH zero
0071 7900        R     MOV     R1,#LOW zero
0073 C003              PUSH    AR3
0075 C002              PUSH    AR2
0077 C001              PUSH    AR1
0079 7BFF              MOV     R3,#0FFH
007B 7A00        E     MOV     R2,#HIGH current_sample_indices
007D 7900        E     MOV     R1,#LOW current_sample_indices
007F 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0082 120000      E     LCALL   ?C?PSTXDATA
0085 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0088 E4                CLR     A
0089 F0                MOVX    @DPTR,A
008A A3                INC     DPTR
008B 7402              MOV     A,#02H
008D F0                MOVX    @DPTR,A
008E D001              POP     AR1
0090 D002              POP     AR2
0092 D003              POP     AR3
0094 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 27
0097 7B01              MOV     R3,#01H
0099 7A00        R     MOV     R2,#HIGH zero
009B 7900        R     MOV     R1,#LOW zero
009D C003              PUSH    AR3
009F C002              PUSH    AR2
00A1 C001              PUSH    AR1
00A3 7BFF              MOV     R3,#0FFH
00A5 7A00        E     MOV     R2,#HIGH current_sample_indices+02H
00A7 7900        E     MOV     R1,#LOW current_sample_indices+02H
00A9 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
00AC 120000      E     LCALL   ?C?PSTXDATA
00AF 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
00B2 E4                CLR     A
00B3 F0                MOVX    @DPTR,A
00B4 A3                INC     DPTR
00B5 7402              MOV     A,#02H
00B7 F0                MOVX    @DPTR,A
00B8 D001              POP     AR1
00BA D002              POP     AR2
00BC D003              POP     AR3
00BE 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 30
00C1         ?C0001:
00C1 22                RET     
             ; FUNCTION reset_pointers (END)

             ; FUNCTION memory_full (BEGIN)
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 34
0000 120000      E     LCALL   StopCollection_IRQ_Stop
                                           ; SOURCE LINE # 35
C51 COMPILER V9.51   UTILITY                                                               05/18/2014 17:46:44 PAGE 5   

0003 900000      E     MOV     DPTR,#sample_enable
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 36
0008 900000      E     MOV     DPTR,#mem_full_flag
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 37
000E 7B01              MOV     R3,#01H
0010 7A00        E     MOV     R2,#HIGH mem_full_flag
0012 7900        E     MOV     R1,#LOW mem_full_flag
0014 C003              PUSH    AR3
0016 C002              PUSH    AR2
0018 C001              PUSH    AR1
001A 7BFF              MOV     R3,#0FFH
001C 7A00        E     MOV     R2,#HIGH mem_full_flash_flag
001E 7900        E     MOV     R1,#LOW mem_full_flash_flag
0020 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0023 120000      E     LCALL   ?C?PSTXDATA
0026 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0029 E4                CLR     A
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C 7401              MOV     A,#01H
002E F0                MOVX    @DPTR,A
002F D001              POP     AR1
0031 D002              POP     AR2
0033 D003              POP     AR3
0035 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 38
0038 7F01              MOV     R7,#01H
003A 120000      E     LCALL   _LED_on
                                           ; SOURCE LINE # 41
003D         ?C0002:
003D 22                RET     
             ; FUNCTION memory_full (END)

             ; FUNCTION check_battery (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
0000 900000      R     MOV     DPTR,#SampledData
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 45
0008 120000      E     LCALL   ADC_Wakeup
                                           ; SOURCE LINE # 46
000B 7F01              MOV     R7,#01H
000D 120000      E     LCALL   _ADC_MUX_FastSelect
                                           ; SOURCE LINE # 48
0010 120000      E     LCALL   ADC_Read16
0013 900000      R     MOV     DPTR,#SampledData
0016 EE                MOV     A,R6
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
001B 900000      R     MOV     DPTR,#SampledData
001E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   UTILITY                                                               05/18/2014 17:46:44 PAGE 6   

001F FE                MOV     R6,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 D3                SETB    C
0024 EF                MOV     A,R7
0025 94AC              SUBB    A,#0ACH
0027 EE                MOV     A,R6
0028 940D              SUBB    A,#0DH
002A 5008              JNC     ?C0003
                                           ; SOURCE LINE # 51
002C 900000      E     MOV     DPTR,#low_power_flag
002F 7401              MOV     A,#01H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
0032 8005              SJMP    ?C0004
0034         ?C0003:
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0034 900000      E     MOV     DPTR,#low_power_flag
0037 E4                CLR     A
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 55
0039         ?C0004:
                                           ; SOURCE LINE # 57
0039 120000      E     LCALL   ADC_Sleep
                                           ; SOURCE LINE # 58
003C 7F00              MOV     R7,#00H
003E 120000      E     LCALL   _ADC_MUX_FastSelect
                                           ; SOURCE LINE # 61
0041         ?C0005:
0041 22                RET     
             ; FUNCTION check_battery (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    322    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
