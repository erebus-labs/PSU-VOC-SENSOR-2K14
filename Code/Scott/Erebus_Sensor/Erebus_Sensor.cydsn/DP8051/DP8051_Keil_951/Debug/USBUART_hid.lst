C51 COMPILER V9.51   USBUART_HID                                                           04/28/2014 14:01:19 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBUART_HID
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBUART_hid.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBUART_hid.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\USBUART_hid.lst) C
                    -D DB NOIP OT(0,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\USBUART_hid.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBUART_hid.c
   3          * Version 2.60
   4          *
   5          * Description:
   6          *  USB HID Class request handler.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBUART.h"
  18          
  19          #if defined(USBUART_ENABLE_HID_CLASS)
              
              #include "USBUART_pvt.h"
              #include "USBUART_hid.h"
              
              
              /***************************************
              *    HID Variables
              ***************************************/
              
              volatile uint8 USBUART_hidProtocol[USBUART_MAX_INTERFACES_NUMBER];  /* HID device protocol status */
              volatile uint8 USBUART_hidIdleRate[USBUART_MAX_INTERFACES_NUMBER];  /* HID device idle reload value */
              volatile uint8 USBUART_hidIdleTimer[USBUART_MAX_INTERFACES_NUMBER]; /* HID device idle rate value */
              
              
              /***************************************
              * Custom Declarations
              ***************************************/
              
              /* `#START HID_CUSTOM_DECLARATIONS` Place your declaration here */
              
              /* `#END` */
              
              
              /*******************************************************************************
              * Function Name: USBUART_UpdateHIDTimer
              ********************************************************************************
              *
              * Summary:
              *  Updates the HID report timer and reloads it if expired
              *
              * Parameters:
              *  interface:  Interface Number.
              *
              * Return:
C51 COMPILER V9.51   USBUART_HID                                                           04/28/2014 14:01:19 PAGE 2   

              *  status.
              *
              * Reentrant:
              *  No.
              *
              *******************************************************************************/
              uint8 USBUART_UpdateHIDTimer(uint8 interface) 
              {
                  uint8 stat = USBUART_IDLE_TIMER_INDEFINITE;
              
                  if(USBUART_hidIdleRate[interface] != 0u)
                  {
                      if(USBUART_hidIdleTimer[interface] > 0u)
                      {
                          USBUART_hidIdleTimer[interface]--;
                          stat = USBUART_IDLE_TIMER_RUNNING;
                      }
                      else
                      {
                          USBUART_hidIdleTimer[interface] = USBUART_hidIdleRate[interface];
                          stat = USBUART_IDLE_TIMER_EXPIRED;
                      }
                  }
              
                  return(stat);
              }
              
              
              /*******************************************************************************
              * Function Name: USBUART_GetProtocol
              ********************************************************************************
              *
              * Summary:
              *  Returns the selected protocol value to the application
              *
              * Parameters:
              *  interface:  Interface Number.
              *
              * Return:
              *  Interface protocol.
              *
              *******************************************************************************/
              uint8 USBUART_GetProtocol(uint8 interface) 
              {
                  return(USBUART_hidProtocol[interface]);
              }
              
              
              /*******************************************************************************
              * Function Name: USBUART_DispatchHIDClassRqst
              ********************************************************************************
              *
              * Summary:
              *  This routine dispatches class requests
              *
              * Parameters:
              *  None.
              *
              * Return:
              *  requestHandled
              *
              * Reentrant:
C51 COMPILER V9.51   USBUART_HID                                                           04/28/2014 14:01:19 PAGE 3   

              *  No.
              *
              *******************************************************************************/
              uint8 USBUART_DispatchHIDClassRqst(void) 
              {
                  uint8 requestHandled = USBUART_FALSE;
                  uint8 interfaceNumber;
              
                  interfaceNumber = CY_GET_REG8(USBUART_wIndexLo);
                  if ((CY_GET_REG8(USBUART_bmRequestType) & USBUART_RQST_DIR_MASK) == USBUART_RQST_DIR_D2H)
                  {   /* Control Read */
                      switch (CY_GET_REG8(USBUART_bRequest))
                      {
                          case USBUART_GET_DESCRIPTOR:
                              if (CY_GET_REG8(USBUART_wValueHi) == USBUART_DESCR_HID_CLASS)
                              {
                                  USBUART_FindHidClassDecriptor();
                                  if (USBUART_currentTD.count != 0u)
                                  {
                                      requestHandled = USBUART_InitControlRead();
                                  }
                              }
                              else if (CY_GET_REG8(USBUART_wValueHi) == USBUART_DESCR_HID_REPORT)
                              {
                                  USBUART_FindReportDescriptor();
                                  if (USBUART_currentTD.count != 0u)
                                  {
                                      requestHandled = USBUART_InitControlRead();
                                  }
                              }
                              else
                              {   /* requestHandled is initialezed as FALSE by default */
                              }
                              break;
                          case USBUART_HID_GET_REPORT:
                              USBUART_FindReport();
                              if (USBUART_currentTD.count != 0u)
                              {
                                  requestHandled = USBUART_InitControlRead();
                              }
                              break;
              
                          case USBUART_HID_GET_IDLE:
                              /* This function does not support multiple reports per interface*/
                              /* Validate interfaceNumber and Report ID (should be 0) */
                              if( (interfaceNumber < USBUART_MAX_INTERFACES_NUMBER) &&
                                  (CY_GET_REG8(USBUART_wValueLo) == 0u ) ) /* Do not support Idle per Report ID */
                              {
                                  USBUART_currentTD.count = 1u;
                                  USBUART_currentTD.pData = &USBUART_hidIdleRate[interfaceNumber];
                                  requestHandled  = USBUART_InitControlRead();
                              }
                              break;
                          case USBUART_HID_GET_PROTOCOL:
                              /* Validate interfaceNumber */
                              if( interfaceNumber < USBUART_MAX_INTERFACES_NUMBER)
                              {
                                  USBUART_currentTD.count = 1u;
                                  USBUART_currentTD.pData = &USBUART_hidProtocol[interfaceNumber];
                                  requestHandled  = USBUART_InitControlRead();
                              }
                              break;
C51 COMPILER V9.51   USBUART_HID                                                           04/28/2014 14:01:19 PAGE 4   

                          default:    /* requestHandled is initialized as FALSE by default */
                              break;
                      }
                  }
                  else if ((CY_GET_REG8(USBUART_bmRequestType) & USBUART_RQST_DIR_MASK) ==
                                                                                          USBUART_RQST_DIR_H2D)
                  {   /* Control Write */
                      switch (CY_GET_REG8(USBUART_bRequest))
                      {
                          case USBUART_HID_SET_REPORT:
                              USBUART_FindReport();
                              if (USBUART_currentTD.count != 0u)
                              {
                                  requestHandled = USBUART_InitControlWrite();
                              }
                              break;
                          case USBUART_HID_SET_IDLE:
                              /* This function does not support multiple reports per interface */
                              /* Validate interfaceNumber and Report ID (should be 0) */
                              if( (interfaceNumber < USBUART_MAX_INTERFACES_NUMBER) &&
                                  (CY_GET_REG8(USBUART_wValueLo) == 0u ) ) /* Do not support Idle per Report ID */
                              {
                                  USBUART_hidIdleRate[interfaceNumber] = CY_GET_REG8(USBUART_wValueHi);
                                  /* With regards to HID spec: "7.2.4 Set_Idle Request"
                                  *  Latency. If the current period has gone past the
                                  *  newly proscribed time duration, then a report
                                  *  will be generated immediately.
                                  */
                                  if(USBUART_hidIdleRate[interfaceNumber] <
                                     USBUART_hidIdleTimer[interfaceNumber])
                                  {
                                      /* Set the timer to zero and let the UpdateHIDTimer() API return IDLE_TIMER_EXPIRE
             -D status*/
                                      USBUART_hidIdleTimer[interfaceNumber] = 0u;
                                  }
                                  /* If the new request is received within 4 milliseconds
                                  *  (1 count) of the end of the current period, then the
                                  *  new request will have no effect until after the report.
                                  */
                                  else if(USBUART_hidIdleTimer[interfaceNumber] <= 1u)
                                  {
                                      /* Do nothing.
                                      *  Let the UpdateHIDTimer() API continue to work and
                                      *  return IDLE_TIMER_EXPIRED status
                                      */
                                  }
                                  else
                                  {   /* Reload the timer*/
                                      USBUART_hidIdleTimer[interfaceNumber] =
                                      USBUART_hidIdleRate[interfaceNumber];
                                  }
                                  requestHandled = USBUART_InitNoDataControlTransfer();
                              }
                              break;
              
                          case USBUART_HID_SET_PROTOCOL:
                              /* Validate interfaceNumber and protocol (must be 0 or 1) */
                              if( (interfaceNumber < USBUART_MAX_INTERFACES_NUMBER) &&
                                  (CY_GET_REG8(USBUART_wValueLo) <= 1u) )
                              {
                                  USBUART_hidProtocol[interfaceNumber] = CY_GET_REG8(USBUART_wValueLo);
                                  requestHandled = USBUART_InitNoDataControlTransfer();
C51 COMPILER V9.51   USBUART_HID                                                           04/28/2014 14:01:19 PAGE 5   

                              }
                              break;
                          default:    /* requestHandled is initialized as FALSE by default */
                              break;
                      }
                  }
                  else
                  {   /* requestHandled is initialized as FALSE by default */
                  }
              
                  return(requestHandled);
              }
              
              
              /*******************************************************************************
              * Function Name: USB_FindHidClassDescriptor
              ********************************************************************************
              *
              * Summary:
              *  This routine find Hid Class Descriptor pointer based on the Interface number
              *  and Alternate setting then loads the currentTD structure with the address of
              *  the buffer and the size.
              *  The HID Class Descriptor resides inside the config descriptor.
              *
              * Parameters:
              *  None.
              *
              * Return:
              *  currentTD
              *
              * Reentrant:
              *  No.
              *
              *******************************************************************************/
              void USBUART_FindHidClassDecriptor(void) 
              {
                  const T_USBUART_LUT CYCODE *pTmp;
                  volatile uint8 *pDescr;
                  uint8 interfaceN;
              
                  pTmp = USBUART_GetConfigTablePtr(USBUART_configuration - 1u);
                  interfaceN = CY_GET_REG8(USBUART_wIndexLo);
                  /* Third entry in the LUT starts the Interface Table pointers */
                  /* Now use the request interface number*/
                  pTmp = &pTmp[interfaceN + 2u];
                  /* USB_DEVICEx_CONFIGURATIONy_INTERFACEz_TABLE */
                  pTmp = (const T_USBUART_LUT CYCODE *) pTmp->p_list;
                  /* Now use Alternate setting number */
                  pTmp = &pTmp[USBUART_interfaceSetting[interfaceN]];
                  /* USB_DEVICEx_CONFIGURATIONy_INTERFACEz_ALTERNATEi_HID_TABLE */
                  pTmp = (const T_USBUART_LUT CYCODE *) pTmp->p_list;
                  /* Fifth entry in the LUT points to Hid Class Descriptor in Configuration Descriptor */
                  pTmp = &pTmp[4u];
                  pDescr = (volatile uint8 *)pTmp->p_list;
                  /* The first byte contains the descriptor length */
                  USBUART_currentTD.count = *pDescr;
                  USBUART_currentTD.pData = pDescr;
              }
              
              
              /*******************************************************************************
              * Function Name: USB_FindReportDescriptor
C51 COMPILER V9.51   USBUART_HID                                                           04/28/2014 14:01:19 PAGE 6   

              ********************************************************************************
              *
              * Summary:
              *  This routine find Hid Report Descriptor pointer based on the Interface
              *  number, then loads the currentTD structure with the address of the buffer
              *  and the size.
              *  Hid Report Descriptor is located after IN/OUT/FEATURE reports.
              *
              * Parameters:
              *   void
              *
              * Return:
              *  currentTD
              *
              * Reentrant:
              *  No.
              *
              *******************************************************************************/
              void USBUART_FindReportDescriptor(void) 
              {
                  const T_USBUART_LUT CYCODE *pTmp;
                  volatile uint8 *pDescr;
                  uint8 interfaceN;
              
                  pTmp = USBUART_GetConfigTablePtr(USBUART_configuration - 1u);
                  interfaceN = CY_GET_REG8(USBUART_wIndexLo);
                  /* Third entry in the LUT starts the Interface Table pointers */
                  /* Now use the request interface number */
                  pTmp = &pTmp[interfaceN + 2u];
                  /* USB_DEVICEx_CONFIGURATIONy_INTERFACEz_TABLE */
                  pTmp = (const T_USBUART_LUT CYCODE *) pTmp->p_list;
                  /* Now use Alternate setting number */
                  pTmp = &pTmp[USBUART_interfaceSetting[interfaceN]];
                  /* USB_DEVICEx_CONFIGURATIONy_INTERFACEz_ALTERNATEi_HID_TABLE */
                  pTmp = (const T_USBUART_LUT CYCODE *) pTmp->p_list;
                  /* Fourth entry in the LUT starts the Hid Report Descriptor */
                  pTmp = &pTmp[3u];
                  pDescr = (volatile uint8 *)pTmp->p_list;
                  /* The 1st and 2nd bytes of descriptor contain its length. LSB is 1st. */
                  USBUART_currentTD.count =  (((uint16)pDescr[1u] << 8u) | pDescr[0u]);
                  USBUART_currentTD.pData = &pDescr[2u];
              }
              
              
              /*******************************************************************************
              * Function Name: USBUART_FindReport
              ********************************************************************************
              *
              * Summary:
              *  This routine sets up a transfer based on the Interface number, Report Type
              *  and Report ID, then loads the currentTD structure with the address of the
              *  buffer and the size.  The caller has to decide if it is a control read or
              *  control write.
              *
              * Parameters:
              *  None.
              *
              * Return:
              *  currentTD
              *
              * Reentrant:
              *  No.
C51 COMPILER V9.51   USBUART_HID                                                           04/28/2014 14:01:19 PAGE 7   

              *
              *******************************************************************************/
              void USBUART_FindReport(void) 
              {
                  const T_USBUART_LUT CYCODE *pTmp;
                  T_USBUART_TD *pTD;
                  uint8 interfaceN;
                  uint8 reportType;
              
                  /* `#START HID_FINDREPORT` Place custom handling here */
              
                  /* `#END` */
                  USBUART_currentTD.count = 0u;   /* Init not supported condition */
                  pTmp = USBUART_GetConfigTablePtr(USBUART_configuration - 1u);
                  reportType = CY_GET_REG8(USBUART_wValueHi);
                  interfaceN = CY_GET_REG8(USBUART_wIndexLo);
                  /* Third entry in the LUT COnfiguration Table starts the Interface Table pointers */
                  /* Now use the request interface number */
                  pTmp = &pTmp[interfaceN + 2u];
                  /* USB_DEVICEx_CONFIGURATIONy_INTERFACEz_TABLE*/
                  pTmp = (const T_USBUART_LUT CYCODE *) pTmp->p_list;
                  if(interfaceN < USBUART_MAX_INTERFACES_NUMBER)
                  {
                      /* Now use Alternate setting number */
                      pTmp = &pTmp[USBUART_interfaceSetting[interfaceN]];
                      /* USB_DEVICEx_CONFIGURATIONy_INTERFACEz_ALTERNATEi_HID_TABLE */
                      pTmp = (const T_USBUART_LUT CYCODE *) pTmp->p_list;
                      /* Validate reportType to comply with "7.2.1 Get_Report Request" */
                      if((reportType >= USBUART_HID_GET_REPORT_INPUT) &&
                         (reportType <= USBUART_HID_GET_REPORT_FEATURE))
                      {
                          /* Get the entry proper TD (IN, OUT or Feature Report Table)*/
                          pTmp = &pTmp[reportType - 1u];
                          reportType = CY_GET_REG8(USBUART_wValueLo);    /* Get reportID */
                          /* Validate table support by the HID descriptor, compare table count with reportID */
                          if(pTmp->c >= reportType)
                          {
                              pTD = (T_USBUART_TD *) pTmp->p_list;
                              pTD = &pTD[reportType];                          /* select entry depend on report ID*/
                              USBUART_currentTD.pData = pTD->pData;   /* Buffer pointer */
                              USBUART_currentTD.count = pTD->count;   /* Buffer Size */
                              USBUART_currentTD.pStatusBlock = pTD->pStatusBlock;
                          }
                      }
                  }
              }
              
              
              /*******************************************************************************
              * Additional user functions supporting HID Requests
              ********************************************************************************/
              
              /* `#START HID_FUNCTIONS` Place any additional functions here */
              
              /* `#END` */
              
              #endif  /* End USBUART_ENABLE_HID_CLASS */
 420          
 421          
 422          /* [] END OF FILE */
C51 COMPILER V9.51   USBUART_HID                                                           04/28/2014 14:01:19 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
