C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE RTC
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\RTC.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\RTC.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\RTC.lst) CD DB NOIP OT(0,S
                    -IZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\RTC.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: RTC.c
   3          * Version 2.0
   4          *
   5          * Description:
   6          *  This file provides the source code to the API for the RTC Component.
   7          *
   8          ********************************************************************************
   9          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions,
  11          * disclaimers, and limitations in the end user license agreement accompanying
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          #include "RTC.h"
  16          #include "CyLib.h"
  17          
  18          /* Function Prototypes */
  19          static void  RTC_SetInitValues(void)     ;
  20          static uint8 RTC_DayOfWeek(uint8 dayOfMonth, uint8 month, uint16 year)
  21                                                                ;
  22          #if (1u == RTC_DST_FUNC_ENABLE)
                  static void  RTC_DSTDateConversion(void) ;
              #endif /* 1u == RTC_DST_FUNC_ENABLE */
  25          
  26          
  27          /* Variables were not initialized */
  28          uint8 RTC_initVar = 0u;
  29          
  30          /* Time and date variables
  31          * Initial value are: Second = 0-59, Minute = 0-59, Hour = 0-23, DayOfWeek = 1-7,
  32          * DayOfMonth = 1-31, DayOfYear = 1-366, Month = 1-12, Year = 1900-2200.
  33          */
  34          RTC_TIME_DATE RTC_currentTimeDate = {0u, 0u, 0u, 1u, 1u, 1u, 1u, 1900u};
  35          
  36          /* Alarm time and date variables
  37          * Initial value are: Second = 0-59, Minute = 0-59, Hour = 0-23, DayOfWeek = 1-7,
  38          * DayOfMonth = 1-31, DayOfYear = 1-366, Month = 1-12, Year = 1900-2200.
  39          */
  40          RTC_TIME_DATE RTC_alarmCfgTimeDate = {0u, 0u, 0u, 1u, 1u, 1u, 1u, 1900u};
  41          
  42          #if (1u == RTC_DST_FUNC_ENABLE) /* DST enabled */
              
                  /* Define DST format: '0' - fixed, '1' - relative */
                  volatile uint8 RTC_dstModeType = 0u;
              
                  /* Hour 0-23, DayOfWeek 1-7, Week 1-5, DayOfMonth 1-31, Month 1-12 */
                  RTC_DSTIME RTC_dstTimeDateStart = {0u, 1u, 1u, 1u, 1u};
                  RTC_DSTIME RTC_dstTimeDateStop = {0u, 1u, 1u, 1u, 1u};
              
                  /* Number of Hours to add/dec to time */
                  volatile uint8 RTC_dstOffsetMin = 0u;
                  volatile uint8 RTC_dstStartStatus = 0u;
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 2   

                  volatile uint8 RTC_dstStopStatus = 0u;
              
              #endif /* 1u == RTC_DST_FUNC_ENABLE*/
  57          
  58          /* Mask Registers */
  59          volatile uint8 RTC_alarmCfgMask = 0u;
  60          volatile uint8 RTC_alarmCurStatus = 0u;
  61          volatile uint8 RTC_intervalCfgMask = 0u;
  62          
  63          /* Status & Control Variables */
  64          volatile uint8 RTC_statusDateTime = 0u;
  65          
  66          /* Month Day Array - number of days in the months */
  67          const uint8 CYCODE RTC_daysInMonths[RTC_MONTHS_IN_YEAR] = {
  68              RTC_DAYS_IN_JANUARY,
  69              RTC_DAYS_IN_FEBRUARY,
  70              RTC_DAYS_IN_MARCH,
  71              RTC_DAYS_IN_APRIL,
  72              RTC_DAYS_IN_MAY,
  73              RTC_DAYS_IN_JUNE,
  74              RTC_DAYS_IN_JULY,
  75              RTC_DAYS_IN_AUGUST,
  76              RTC_DAYS_IN_SEPTEMBER,
  77              RTC_DAYS_IN_OCTOBER,
  78              RTC_DAYS_IN_NOVEMBER,
  79              RTC_DAYS_IN_DECEMBER};
  80          
  81          
  82          /*******************************************************************************
  83          * Function Name:   RTC_Start
  84          ********************************************************************************
  85          *
  86          * Summary:
  87          *  Enables RTC component: configures counter, setup interrupts, done all
  88          *  required calculation and starts counter.
  89          *
  90          * Parameters:
  91          *  None.
  92          *
  93          * Return:
  94          *  None.
  95          *
  96          * Global variables:
  97          *  RTC_initVar: global variable is used to indicate initial
  98          *  configuration of this component.  The variable is initialized to zero and set
  99          *  to 1 the first time RTC_Start() is called. This allows for
 100          *  component initialization without re-initialization in all subsequent calls
 101          *  to the RTC_Start() routine.
 102          *
 103          *  RTC_currentTimeDate, RTC_dstTimeDateStart,
 104          *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 105          *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 106          *  RTC_dstStartStatus, RTC_dstStopStatus,
 107          *  RTC_alarmCurStatus: global variables are modified by the
 108          *  functions called from RTC_Init().
 109          *
 110          * Reentrant:
 111          *  No.
 112          *
 113          * Side Effects:
 114          *  Enables for the one pulse per second (for the RTC component) and
 115          *  Central Time Wheel (for the Sleep Timer component) signals to wake up device
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 3   

 116          *  from the low power (Sleep and Alternate Active) modes and leaves them
 117          *  enabled.
 118          *
 119          *  The Power Manager API has the higher priority on resource usage: it is NOT
 120          *  guaranteed that the Sleep Timer's configuration will be the same on exit
 121          *  from the Power Manager APIs as on the entry. To prevent this use the Sleep
 122          *  Timer's Sleep() - to save configuration and stop the component and Wakeup()
 123          *  function to restore configuration and enable the component.
 124          *
 125          *  The Sleep Timer and Real Time Clock (RTC) components could be configured as
 126          *  a wake up source from the low power modes only both at once.
 127          *
 128          *******************************************************************************/
 129          void RTC_Start(void) 
 130          {
 131   1          /* Execute once in normal flow */
 132   1          if(0u == RTC_initVar)
 133   1          {
 134   2              RTC_Init();
 135   2              RTC_initVar = 1u;
 136   2          }
 137   1      
 138   1          /* Enable component's operation */
 139   1          RTC_Enable();
 140   1      }
 141          
 142          
 143          /*******************************************************************************
 144          * Function Name: RTC_Stop
 145          ********************************************************************************
 146          *
 147          * Summary:
 148          *  Stops the RTC component.
 149          *
 150          * Parameters:
 151          *  None.
 152          *
 153          * Return:
 154          *  None.
 155          *
 156          * Side Effects:
 157          *  Leaves the one pulse per second (for the RTC component) and the Central Time
 158          *  Wheel (for the Sleep Timer component) signals to wake up device from the low
 159          *  power (Sleep and Alternate Active) modes enabled after Sleep Time component
 160          *  is stopped.
 161          *
 162          *******************************************************************************/
 163          void RTC_Stop(void) 
 164          {
 165   1          uint8 interruptState;
 166   1      
 167   1          /* Disable the interrupt. */
 168   1          CyIntDisable(RTC_ISR_NUMBER);
 169   1      
 170   1          /* Enter critical section */
 171   1          interruptState = CyEnterCriticalSection();
 172   1      
 173   1          /* Stop one pulse per second counter and interrupt */
 174   1          RTC_OPPS_CFG_REG &= (uint8)(~(RTC_OPPSIE_EN_MASK | RTC_OPPS_EN_MASK));
 175   1      
 176   1          /* Exit critical section */
 177   1          CyExitCriticalSection(interruptState);
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 4   

 178   1      }
 179          
 180          
 181          /*******************************************************************************
 182          * Function Name:   RTC_EnableInt
 183          ********************************************************************************
 184          *
 185          * Summary:
 186          *  Enables interrupts of RTC Component.
 187          *
 188          * Parameters:
 189          *  None.
 190          *
 191          * Return:
 192          *  None.
 193          *
 194          *******************************************************************************/
 195          void RTC_EnableInt(void) 
 196          {
 197   1          /* Enable the interrupt */
 198   1          CyIntEnable(RTC_ISR_NUMBER);
 199   1      }
 200          
 201          
 202          /*******************************************************************************
 203          * Function Name:   RTC_DisableInt
 204          ********************************************************************************
 205          *
 206          * Summary:
 207          *  Disables interrupts of RTC Component, time and date stop running.
 208          *
 209          * Parameters:
 210          *  None.
 211          *
 212          * Return:
 213          *  None.
 214          *
 215          *******************************************************************************/
 216          void RTC_DisableInt(void) 
 217          {
 218   1          /* Disable the interrupt. */
 219   1          CyIntDisable(RTC_ISR_NUMBER);
 220   1      }
 221          
 222          
 223          #if (1u == RTC_DST_FUNC_ENABLE)
                  /*******************************************************************************
                  * Function Name:   RTC_DSTDateConversion
                  ********************************************************************************
                  *
                  * Summary:
                  * Converts relative to absolute date.
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStart.Month,
                  *  RTC_dstTimeDateStart.DayOfWeek,
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 5   

                  *  RTC_dstTimeDateStart.Week,
                  *  RTC_dstTimeDateStop.Month,
                  *  RTC_dstTimeDateStop.DayOfWeek,
                  *  RTC_dstTimeDateStop.Week,
                  *  RTC_currentTimeDate.Year: these global variables are
                  *  used to correct day of week.
                  *
                  *  RTC_dstTimeDateStart.DayOfMonth,
                  *  RTC_dstTimeDateStop.DayOfMonth: these global variables are
                  *  modified after convertion.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  static void RTC_DSTDateConversion(void) 
                  {
                      uint8 week = 1u;
                      uint8 day = 1u;
                      uint8 dayOfWeek;
              
                      /* Get day of week */
                      dayOfWeek = RTC_DayOfWeek(day, RTC_dstTimeDateStart.Month,
                                                                  RTC_currentTimeDate.Year) + 1u;
              
                      #if (0u != RTC_START_OF_WEEK)
                      /* Normalize day of week if Start of week is not Sunday */
                      if(dayOfWeek > RTC_START_OF_WEEK)
                      {
                          #if (6u != RTC_START_OF_WEEK)
                              /* Start of week is not Saturday  */
                              dayOfWeek -= RTC_START_OF_WEEK;
                          #else /* 6u == RTC_START_OF_WEEK */
                              /* Start of week is Saturday  */
                              dayOfWeek = 1u; /* Set day of week to Monday */
                          #endif /* 6u != RTC_START_OF_WEEK */
                      }
                      else
                      {
                          #if (1u != RTC_START_OF_WEEK)
                              /* Start of week is not Monday  */
                              dayOfWeek = (RTC_DAYS_IN_WEEK - RTC_START_OF_WEEK) - dayOfWeek;
                          #else /* 1u == RTC_START_OF_WEEK */
                              /* Start of week is Monday  */
                              dayOfWeek = 5u; /* Set day of week to Friday */
                          #endif /* 1u != RTC_START_OF_WEEK */
                      }
                      #endif /* 0u != RTC_START_OF_WEEK */
              
                      /* Correct if out of DST range */
                      while(dayOfWeek != RTC_dstTimeDateStart.DayOfWeek)
                      {
                          day++;
                          dayOfWeek++;
                          if(dayOfWeek > RTC_WEEK_ELAPSED)
                          {
                              dayOfWeek = 1u;
                              week++;
                          }
                      }
              
                      while(week != RTC_dstTimeDateStart.Week)
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 6   

                      {
                          day += RTC_DAYS_IN_WEEK;
                          week++;
                      }
                      RTC_dstTimeDateStart.DayOfMonth = day;
              
                      /* Stop of DST time */
                      week = 1u;
                      day = 1u;
              
                      dayOfWeek = RTC_DayOfWeek(day, RTC_dstTimeDateStop.Month,
                                                                  RTC_currentTimeDate.Year) + 1u;
                      #if (0u != RTC_START_OF_WEEK)
                      /* Normalize day of week if Start of week is not Sunday */
                      if(dayOfWeek > RTC_START_OF_WEEK)
                      {
                          #if (6u != RTC_START_OF_WEEK)
                              /* Start of week is not Saturday  */
                              dayOfWeek -= RTC_START_OF_WEEK;
                          #else /* 6u == RTC_START_OF_WEEK */
                              /* Start of week is Saturday  */
                              dayOfWeek = 1u; /* Set day of week to Monday */
                          #endif /* 6u != RTC_START_OF_WEEK */
                      }
                      else
                      {
                          #if (1u != RTC_START_OF_WEEK)
                              /* Start of week is not Monday  */
                              dayOfWeek = (RTC_DAYS_IN_WEEK - RTC_START_OF_WEEK) - dayOfWeek;
                          #else /* 1u == RTC_START_OF_WEEK */
                              /* Start of week is Monday  */
                              dayOfWeek = 5u; /* Set day of week to Friday */
                          #endif /* 1u != RTC_START_OF_WEEK */
                      }
                      #endif /* 0u != RTC_START_OF_WEEK */
              
                      while(dayOfWeek != RTC_dstTimeDateStop.DayOfWeek)
                      {
                          day++;
                          dayOfWeek++;
                          if(dayOfWeek > RTC_WEEK_ELAPSED)
                          {
                              dayOfWeek = 1u;
                              week++;
                          }
                      }
              
                      while(week != RTC_dstTimeDateStop.Week)
                      {
                          day += RTC_DAYS_IN_WEEK;
                          week++;
                      }
              
                      RTC_dstTimeDateStop.DayOfMonth = day;
                  }
              #endif /* 1u == RTC_DST_FUNC_ENABLE */
 358          
 359          
 360          /*******************************************************************************
 361          * Function Name:   RTC_Init
 362          ********************************************************************************
 363          *
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 7   

 364          * Summary:
 365          *  Calculates required date and flags, sets interrupt vector and priority.
 366          *
 367          * Parameters:
 368          *  None.
 369          *
 370          * Return:
 371          *  None.
 372          *
 373          * Global variables:
 374          *  RTC_currentTimeDate, RTC_dstTimeDateStart,
 375          *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 376          *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 377          *  RTC_dstStartStatus, RTC_dstStartStatus,
 378          *  RTC_dstStopStatus, RTC_alarmCurStatus:
 379          *  global variables are used by the RTC_SetInitValues().
 380          *
 381          *  RTC_dstTimeDateStart, RTC_currentTimeDate:
 382          *  RTC_statusDateTime, RTC_dstStartStatus,
 383          *  RTC_dstStartStatus, RTC_dstStopStatus,
 384          *  RTC_alarmCurStatus: are modified by the
 385          *  RTC_SetInitValues() function.
 386          *
 387          * Reentrant:
 388          *  No.
 389          *
 390          *******************************************************************************/
 391          void RTC_Init(void) 
 392          {
 393   1          /* Start calculation of required date and flags */
 394   1          RTC_SetInitValues();
 395   1      
 396   1          /* Disable Interrupt. */
 397   1          CyIntDisable(RTC_ISR_NUMBER);
 398   1      
 399   1          /* Set the ISR to point to the RTC_SUT_isr Interrupt. */
 400   1          (void) CyIntSetVector(RTC_ISR_NUMBER, & RTC_ISR);
 401   1      
 402   1          /* Set the priority. */
 403   1          CyIntSetPriority(RTC_ISR_NUMBER, RTC_ISR_PRIORITY);
 404   1      }
 405          
 406          
 407          /*******************************************************************************
 408          * Function Name: RTC_Enable
 409          ********************************************************************************
 410          *
 411          * Summary:
 412          *  Enables the interrupts, one pulse per second and interrupt generation on OPPS
 413          *  event.
 414          *
 415          * Parameters:
 416          *  None.
 417          *
 418          * Return:
 419          *  None.
 420          *
 421          * Side Effects:
 422          *  Enables for the one pulse per second and central time wheel signals to wake
 423          *  up device from the low power (Sleep and Alternate Active) modes and leaves
 424          *  them enabled.
 425          *
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 8   

 426          *******************************************************************************/
 427          void RTC_Enable(void) 
 428          {
 429   1          uint8 interruptState;
 430   1      
 431   1          /* Enter critical section */
 432   1          interruptState = CyEnterCriticalSection();
 433   1      
 434   1          /* Enable one pulse per second event and interrupt */
 435   1          RTC_OPPS_CFG_REG |= (RTC_OPPS_EN_MASK | RTC_OPPSIE_EN_MASK);
 436   1      
 437   1          /* Exit critical section */
 438   1          CyExitCriticalSection(interruptState);
 439   1      
 440   1          /* Enable interrupt */
 441   1          CyIntEnable(RTC_ISR_NUMBER);
 442   1      }
 443          
 444          
 445          /*******************************************************************************
 446          * Function Name:   RTC_ReadTime
 447          ********************************************************************************
 448          *
 449          * Summary:
 450          *  Returns a pointer to the current time and date structure.
 451          *
 452          * Parameters:
 453          *  None.
 454          *
 455          * Return:
 456          *  RTC_currentTimeDate: pointer to the global structure with the
 457          *  current date and time values.
 458          *
 459          * Global variables:
 460          *  RTC_currentTimeDate: global variable with current date and
 461          *   time is used.
 462          *
 463          * Side Effects:
 464          *  You should disable the interrupt for the RTC component before calling any
 465          *  read API to avoid an RTC Counter increment in the middle of a time or date
 466          *  read operation. Re-enable the interrupts after the data is read.
 467          *
 468          *******************************************************************************/
 469          RTC_TIME_DATE * RTC_ReadTime(void) 
 470          {
 471   1          /* Returns a pointer to the current time and date structure */
 472   1          return (&RTC_currentTimeDate);
 473   1      }
 474          
 475          
 476          /*******************************************************************************
 477          * Function Name:   RTC_WriteTime
 478          ********************************************************************************
 479          *
 480          * Summary:
 481          *  Writes time and date values as current time and date. Only
 482          *  passes Milliseconds(optionally), Seconds, Minutes, Hours, Month,
 483          *  Day Of Month and Year.
 484          *
 485          * Parameters:
 486          *  timeDate: Pointer to RTC_TIME_DATE global structure where new
 487          *  values of time and date are stored.
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 9   

 488          *
 489          * Return:
 490          *  None.
 491          *
 492          * Global variables:
 493          *  RTC_currentTimeDate: global structure is modified with the new
 494          *  values of current date and time.
 495          *
 496          * Reentrant:
 497          *  No.
 498          *
 499          *******************************************************************************/
 500          void RTC_WriteTime(const RTC_TIME_DATE * timeDate)
 501               
 502          {
 503   1          /* Disable Interrupt of RTC Component */
 504   1          RTC_DisableInt();
 505   1      
 506   1          /* Write current time and date */
 507   1          RTC_currentTimeDate.Sec = timeDate->Sec;
 508   1          RTC_currentTimeDate.Min = timeDate->Min;
 509   1          RTC_currentTimeDate.Hour = timeDate->Hour;
 510   1          RTC_currentTimeDate.DayOfMonth = timeDate->DayOfMonth;
 511   1          RTC_currentTimeDate.Month = timeDate->Month;
 512   1          RTC_currentTimeDate.Year = timeDate->Year;
 513   1      
 514   1          /* Enable Interrupt of RTC Component */
 515   1          RTC_EnableInt();
 516   1      }
 517          
 518          
 519          /*******************************************************************************
 520          * Function Name:   RTC_WriteSecond
 521          ********************************************************************************
 522          *
 523          * Summary:
 524          *  Writes Sec software register value.
 525          *
 526          * Parameters:
 527          *  second: Seconds value.
 528          *
 529          * Return:
 530          *  None.
 531          *
 532          * Global variables:
 533          *  RTC_currentTimeDate.Sec: global structure's field where current
 534          *  second's value is modified.
 535          *
 536          * Reentrant:
 537          *  No.
 538          *
 539          *******************************************************************************/
 540          void RTC_WriteSecond(uint8 second) 
 541          {
 542   1          /* Save seconds to the current time and date structure */
 543   1          RTC_currentTimeDate.Sec = second;
 544   1      }
 545          
 546          
 547          /*******************************************************************************
 548          * Function Name:   RTC_WriteMinute
 549          ********************************************************************************
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 10  

 550          *
 551          * Summary:
 552          *  Writes Minute value in minutes counter register.
 553          *
 554          * Parameters:
 555          *  minute: Minutes value.
 556          *
 557          * Return:
 558          *  None.
 559          *
 560          * Global variables:
 561          *  RTC_currentTimeDate.Min: global structure's field where
 562          *  current minute's value is modified.
 563          *
 564          * Reentrant:
 565          *  No.
 566          *
 567          *******************************************************************************/
 568          void RTC_WriteMinute(uint8 minute) 
 569          {
 570   1          /* Save minutes to the current time and date structure */
 571   1          RTC_currentTimeDate.Min = minute;
 572   1      }
 573          
 574          
 575          /*******************************************************************************
 576          * Function Name:   RTC_WriteHour
 577          ********************************************************************************
 578          *
 579          * Summary:
 580          *  Writes Hour software register value.
 581          *
 582          * Parameters:
 583          *  hour: Hours value.
 584          *
 585          * Return:
 586          *  None.
 587          *
 588          * Global variables:
 589          *  RTC_currentTimeDate.Hour: global structure's field where
 590          *  current hour's value is modified.
 591          *
 592          * Reentrant:
 593          *  No.
 594          *
 595          *******************************************************************************/
 596          void RTC_WriteHour(uint8 hour) 
 597          {
 598   1          /* Save hours to the current time and date structure */
 599   1          RTC_currentTimeDate.Hour = hour;
 600   1      }
 601          
 602          
 603          /*******************************************************************************
 604          * Function Name:   RTC_WriteDayOfMonth
 605          ********************************************************************************
 606          *
 607          * Summary:
 608          *  Writes DayOfMonth software register value.
 609          *
 610          * Parameters:
 611          *  dayOfMonth: Day Of Month value.
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 11  

 612          *
 613          * Return:
 614          *  None.
 615          *
 616          * Global variables:
 617          *  RTC_currentTimeDate.DayOfMonth: global structure's field where
 618          *  current day of month's value is modified.
 619          *
 620          * Reentrant:
 621          *  No.
 622          *
 623          *******************************************************************************/
 624          void RTC_WriteDayOfMonth(uint8 dayOfMonth) 
 625          {
 626   1          /* Save day of month to the current time and date structure */
 627   1          RTC_currentTimeDate.DayOfMonth = dayOfMonth;
 628   1      }
 629          
 630          
 631          /*******************************************************************************
 632          * Function Name:   RTC_WriteMonth
 633          ********************************************************************************
 634          *
 635          * Summary:
 636          *  Writes Month software register value.
 637          *
 638          * Parameters:
 639          *  month: Month value.
 640          *
 641          * Return:
 642          *  None.
 643          *
 644          * Global variables:
 645          *  RTC_currentTimeDate.Month: global structure's field where
 646          *  current day of month's value is modified.
 647          *
 648          * Reentrant:
 649          *  No.
 650          *
 651          *******************************************************************************/
 652          void RTC_WriteMonth(uint8 month) 
 653          {
 654   1          /* Save months to the current time and date structure */
 655   1          RTC_currentTimeDate.Month = month;
 656   1      }
 657          
 658          
 659          /*******************************************************************************
 660          * Function Name:   RTC_WriteYear
 661          ********************************************************************************
 662          *
 663          * Summary:
 664          *  Writes Year software register value.
 665          *
 666          * Parameters:
 667          *  year: Years value.
 668          *
 669          * Return:
 670          *  None.
 671          *
 672          * Global variables:
 673          *  RTC_currentTimeDate.Year: global structure's field where
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 12  

 674          *  current year's value is modified.
 675          *
 676          * Reentrant:
 677          *  No.
 678          *
 679          *******************************************************************************/
 680          void RTC_WriteYear(uint16 year) 
 681          {
 682   1          /* Save years to the current time and date structure */
 683   1          RTC_currentTimeDate.Year = year;
 684   1      }
 685          
 686          
 687          /*******************************************************************************
 688          * Function Name:   RTC_WriteAlarmSecond
 689          ********************************************************************************
 690          *
 691          * Summary:
 692          *  Writes Alarm Sec software register value.
 693          *
 694          * Parameters:
 695          *  second: Alarm Seconds value.
 696          *
 697          * Return:
 698          *  None.
 699          *
 700          * Global variables:
 701          *  RTC_currentTimeDate.Sec: this global variable is used for
 702          *  comparison while setting and clearing seconds alarm status variable.
 703          *
 704          *  RTC_alarmCfgTimeDate.Sec: this global variable is modified to
 705          *  store of the new seconds alarm.
 706          *
 707          *  RTC_alarmCurStatus: this global variable could be changed if
 708          *  second's alarm will be raised.
 709          *
 710          * Reentrant:
 711          *  No.
 712          *
 713          *******************************************************************************/
 714          void RTC_WriteAlarmSecond(uint8 second) 
 715          {
 716   1          RTC_alarmCfgTimeDate.Sec = second;
 717   1      
 718   1          /* Check second alarm */
 719   1          if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 720   1          {
 721   2              /* Set second alarm */
 722   2              RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 723   2          }
 724   1          else /* no second alarm */
 725   1          {
 726   2              /* Clear second alarm */
 727   2              RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 728   2          }
 729   1      }
 730          
 731          
 732          /*******************************************************************************
 733          * Function Name:   RTC_WriteAlarmMinute
 734          ********************************************************************************
 735          *
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 13  

 736          * Summary:
 737          *  Writes Alarm Min software register value.
 738          *
 739          * Parameters:
 740          *  minute: Alarm minutes value.
 741          *
 742          * Return:
 743          *  None.
 744          *
 745          * Global variables:
 746          *  RTC_currentTimeDate.Min: this global variable is used for
 747          *  comparison while setting and clearing minutes alarm status variable.
 748          *
 749          *  RTC_alarmCfgTimeDate.Min: this global variable is modified to
 750          *  store of the new minutes alarm.
 751          *
 752          *  RTC_alarmCurStatus: this global variable could be changed if
 753          *  minute's alarm will be raised.
 754          *
 755          * Reentrant:
 756          *  No.
 757          *
 758          *******************************************************************************/
 759          void RTC_WriteAlarmMinute(uint8 minute) 
 760          {
 761   1          RTC_alarmCfgTimeDate.Min = minute;
 762   1      
 763   1          /* Check minute alarm */
 764   1          if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 765   1          {
 766   2              /* Set minute alarm */
 767   2              RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 768   2          }
 769   1          else /* no minute alarm */
 770   1          {
 771   2              /* Clear minute alarm */
 772   2              RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 773   2          }
 774   1      }
 775          
 776          
 777          /*******************************************************************************
 778          * Function Name:   RTC_WriteAlarmHour
 779          ********************************************************************************
 780          *
 781          * Summary:
 782          *  Writes Alarm Hour software register value.
 783          *
 784          * Parameters:
 785          *  hour: Alarm hours value.
 786          *
 787          * Return:
 788          *  None.
 789          *
 790          * Global variables:
 791          *  RTC_currentTimeDate.Hour: this global variable is used for
 792          *  comparison while setting and clearing hours alarm status variable.
 793          *
 794          *  RTC_alarmCfgTimeDate.Hour: this global variable is modified to
 795          *  store of the new hours alarm.
 796          *
 797          *  RTC_alarmCurStatus: this global variable could be changed if
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 14  

 798          *  hours alarm will be raised.
 799          *
 800          * Reentrant:
 801          *  No.
 802          *
 803          *******************************************************************************/
 804          void RTC_WriteAlarmHour(uint8 hour) 
 805          {
 806   1          RTC_alarmCfgTimeDate.Hour = hour;
 807   1      
 808   1          /* Check hour alarm */
 809   1          if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 810   1          {
 811   2              /* Set hour alarm */
 812   2              RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 813   2          }
 814   1          else /* no hour alarm */
 815   1          {
 816   2              /* Clear hour alarm */
 817   2              RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 818   2          }
 819   1      }
 820          
 821          
 822          /*******************************************************************************
 823          * Function Name:   RTC_WriteAlarmDayOfMonth
 824          ********************************************************************************
 825          *
 826          * Summary:
 827          *  Writes Alarm DayOfMonth software register value.
 828          *
 829          * Parameters:
 830          *  dayOfMonth: Alarm day of month value.
 831          *
 832          * Return:
 833          *  None.
 834          *
 835          * Global variables:
 836          *  RTC_currentTimeDate.DayOfMonth: this global variable is used for
 837          *  comparison while setting and clearing day of month alarm status variable.
 838          *
 839          *  RTC_alarmCfgTimeDate.DayOfMonth: this global variable is
 840          *  modified to store of the new day of month alarm.
 841          *
 842          *  RTC_alarmCurStatus: this global variable could be changed if
 843          *  day of month alarm will be raised.
 844          *
 845          * Reentrant:
 846          *  No.
 847          *
 848          *******************************************************************************/
 849          void RTC_WriteAlarmDayOfMonth(uint8 dayOfMonth) 
 850          {
 851   1          RTC_alarmCfgTimeDate.DayOfMonth = dayOfMonth;
 852   1      
 853   1          /* Check day of month alarm */
 854   1          if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 855   1          {
 856   2              /* Set day of month alarm */
 857   2              RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 858   2          }
 859   1          else /* no day of month alarm */
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 15  

 860   1          {
 861   2              /* Clear day of month alarm */
 862   2              RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 863   2          }
 864   1      }
 865          
 866          
 867          /*******************************************************************************
 868          * Function Name:   RTC_WriteAlarmMonth
 869          ********************************************************************************
 870          *
 871          * Summary:
 872          *  Writes Alarm Month software register value.
 873          *
 874          * Parameters:
 875          *  month: Alarm month value.
 876          *
 877          * Return:
 878          *  None.
 879          *
 880          * Global variables:
 881          *  RTC_currentTimeDate.Month: this global variable is used for
 882          *  comparison while setting and clearing month alarm status variable.
 883          *
 884          *  RTC_alarmCfgTimeDate.Month: this global variable is modified
 885          *  to store of the new month alarm.
 886          *
 887          *  RTC_alarmCurStatus: this global variable could be changed if
 888          *  month alarm will be raised.
 889          *
 890          * Reentrant:
 891          *  No.
 892          *
 893          *******************************************************************************/
 894          void RTC_WriteAlarmMonth(uint8 month) 
 895          {
 896   1          RTC_alarmCfgTimeDate.Month = month;
 897   1      
 898   1          /* Check month alarm */
 899   1          if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 900   1          {
 901   2              /* Set month alarm */
 902   2              RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 903   2          }
 904   1          else /* no month alarm */
 905   1          {
 906   2              /* Clear month alarm */
 907   2              RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 908   2          }
 909   1      }
 910          
 911          
 912          /*******************************************************************************
 913          * Function Name:   RTC_WriteAlarmYear
 914          ********************************************************************************
 915          *
 916          * Summary:
 917          *  Writes Alarm Year software register value.
 918          *
 919          * Parameters:
 920          *  year: Alarm year value.
 921          *
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 16  

 922          * Return:
 923          *  None.
 924          *
 925          * Global variables:
 926          *  RTC_currentTimeDate.Year: this global variable is used for
 927          *  comparison while setting and clearing year alarm status variable.
 928          *
 929          *  RTC_alarmCfgTimeDate.Year: this global variable is modified
 930          *  to store of the new year alarm.
 931          *
 932          *  RTC_alarmCurStatus: this global variable could be changed if
 933          *  year alarm will be raised.
 934          *
 935          * Reentrant:
 936          *  No.
 937          *
 938          *******************************************************************************/
 939          void RTC_WriteAlarmYear(uint16 year) 
 940          {
 941   1         RTC_alarmCfgTimeDate.Year = year;
 942   1      
 943   1          /* Check year alarm */
 944   1          if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 945   1          {
 946   2              /* Set year alarm */
 947   2              RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 948   2          }
 949   1          else /* no year alarm */
 950   1          {
 951   2              /* Set year alarm */
 952   2              RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 953   2          }
 954   1      }
 955          
 956          
 957          /*******************************************************************************
 958          * Function Name:   RTC_WriteAlarmDayOfWeek
 959          ********************************************************************************
 960          *
 961          * Summary:
 962          *   Writes Alarm DayOfWeek software register value.
 963          *   Days values {Sun = 1, Mon = 2, Tue = 3, Wen = 4, Thu = 5, Fri = 6, Sat = 7}
 964          *
 965          * Parameters:
 966          *  dayOfWeek: Alarm day of week value.
 967          *
 968          * Return:
 969          *  None.
 970          *
 971          * Global variables:
 972          *  RTC_currentTimeDate.DayOfWeek: this global variable is used for
 973          *  comparison while setting and clearing day of week alarm status variable.
 974          *
 975          *  RTC_alarmCfgTimeDate.DayOfWeek: this global variable is modified
 976          *  to store of the new day of week alarm.
 977          *
 978          *  RTC_alarmCurStatus: this global variable could be changed if
 979          *  day of week alarm will be raised.
 980          *
 981          * Reentrant:
 982          *  No.
 983          *
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 17  

 984          *******************************************************************************/
 985          void RTC_WriteAlarmDayOfWeek(uint8 dayOfWeek) 
 986          {
 987   1          RTC_alarmCfgTimeDate.DayOfWeek = dayOfWeek;
 988   1      
 989   1          /* Check day of week alarm */
 990   1          if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 991   1          {
 992   2              /* Set day of week alarm */
 993   2              RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 994   2          }
 995   1          else /* no day of week alarm */
 996   1          {
 997   2              /* Set day of week alarm */
 998   2              RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 999   2          }
1000   1      }
1001          
1002          
1003          /*******************************************************************************
1004          * Function Name:   RTC_WriteAlarmDayOfYear
1005          ********************************************************************************
1006          *
1007          * Summary:
1008          *  Writes Alarm DayOfYear software register value.
1009          *
1010          * Parameters:
1011          *  dayOfYear: Alarm day of year value.
1012          *
1013          * Return:
1014          *  None.
1015          *
1016          * Global variables:
1017          *  RTC_currentTimeDate.DayOfYear: this global variable is used for
1018          *  comparison while setting and clearing day of year alarm status variable.
1019          *
1020          *  RTC_alarmCfgTimeDate.DayOfYear: this global variable is modified
1021          *  to store of the new day of year alarm.
1022          *
1023          *  RTC_alarmCurStatus: this global variable could be changed if
1024          *  day of year alarm will be raised.
1025          *
1026          * Reentrant:
1027          *  No.
1028          *
1029          *******************************************************************************/
1030          void RTC_WriteAlarmDayOfYear(uint16 dayOfYear) 
1031          {
1032   1        RTC_alarmCfgTimeDate.DayOfYear = dayOfYear;
1033   1      
1034   1          /* Check day of year alarm */
1035   1          if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
1036   1          {
1037   2              /* Set day of year alarm */
1038   2              RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
1039   2          }
1040   1          else /* no day of year alarm */
1041   1          {
1042   2              /* Set day of year alarm */
1043   2              RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
1044   2          }
1045   1      }
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 18  

1046          
1047          
1048          /*******************************************************************************
1049          * Function Name:   RTC_ReadSecond
1050          ********************************************************************************
1051          *
1052          * Summary:
1053          *  Reads Sec software register value.
1054          *
1055          * Parameters:
1056          *  None.
1057          *
1058          * Return:
1059          *  Current seconds value.
1060          *
1061          * Global variables:
1062          *  RTC_currentTimeDate.Sec: the current second's value is used.
1063          *
1064          *******************************************************************************/
1065          uint8 RTC_ReadSecond(void) 
1066          {
1067   1          /* Return current second */
1068   1          return (RTC_currentTimeDate.Sec);
1069   1      }
1070          
1071          
1072          /*******************************************************************************
1073          * Function Name:   RTC_ReadMinute
1074          ********************************************************************************
1075          *
1076          * Summary:
1077          *  Reads Min software register value.
1078          *
1079          * Parameters:
1080          *  None.
1081          *
1082          * Return:
1083          *  Current field's value is returned.
1084          *
1085          * Global variables:
1086          *  RTC_currentTimeDate.Min: the current field's value is used.
1087          *
1088          *******************************************************************************/
1089          uint8 RTC_ReadMinute(void) 
1090          {
1091   1          /* Return current minute */
1092   1          return (RTC_currentTimeDate.Min);
1093   1      }
1094          
1095          
1096          /*******************************************************************************
1097          * Function Name:   RTC_ReadHour
1098          ********************************************************************************
1099          *
1100          * Summary:
1101          *  Reads Hour software register value.
1102          *
1103          * Parameters:
1104          *  None.
1105          *
1106          * Return:
1107          *  Current hour's value.
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 19  

1108          *
1109          * Global variables:
1110          *  RTC_currentTimeDate.Hour: the current field's value is used.
1111          *
1112          *******************************************************************************/
1113          uint8 RTC_ReadHour(void) 
1114          {
1115   1          /* Return current hour */
1116   1          return (RTC_currentTimeDate.Hour);
1117   1      }
1118          
1119          
1120          /*******************************************************************************
1121          * Function Name:   RTC_ReadDayOfMonth
1122          ********************************************************************************
1123          *
1124          * Summary:
1125          *  Reads DayOfMonth software register value.
1126          *
1127          * Parameters:
1128          *  None.
1129          *
1130          * Return:
1131          *  Current value of the day of month.
1132          *  returned.
1133          *
1134          * Global variables:
1135          *  RTC_currentTimeDate.DayOfMonth: the current day of month's
1136          *  value is used.
1137          *
1138          *******************************************************************************/
1139          uint8 RTC_ReadDayOfMonth(void) 
1140          {
1141   1          /* Return current day of the month */
1142   1          return (RTC_currentTimeDate.DayOfMonth);
1143   1      }
1144          
1145          
1146          /*******************************************************************************
1147          * Function Name:   RTC_ReadMonth
1148          ********************************************************************************
1149          *
1150          * Summary:
1151          *  Reads Month software register value.
1152          *
1153          * Parameters:
1154          *  None.
1155          *
1156          * Return:
1157          *  Current value of the month.
1158          *
1159          * Global variables:
1160          *  RTC_currentTimeDate.Month: the current month's value is used.
1161          *
1162          *******************************************************************************/
1163          uint8 RTC_ReadMonth(void) 
1164          {
1165   1          /* Return current month */
1166   1          return (RTC_currentTimeDate.Month);
1167   1      }
1168          
1169          
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 20  

1170          /*******************************************************************************
1171          * Function Name:   RTC_ReadYear
1172          ********************************************************************************
1173          *
1174          * Summary:
1175          *  Reads Year software register value.
1176          *
1177          * Parameters:
1178          *  None.
1179          *
1180          * Return:
1181          *  Current value of the year.
1182          *
1183          * Global variables:
1184          *  RTC_currentTimeDate.Year: the current year's value is used.
1185          *
1186          *******************************************************************************/
1187          uint16 RTC_ReadYear(void) 
1188          {
1189   1          /* Return current year */
1190   1          return (RTC_currentTimeDate.Year);
1191   1      }
1192          
1193          
1194          /*******************************************************************************
1195          * Function Name:   RTC_ReadAlarmSecond
1196          ********************************************************************************
1197          *
1198          * Summary:
1199          *  Reads Alarm Sec software register value.
1200          *
1201          * Parameters:
1202          *  None.
1203          *
1204          * Return:
1205          *  Current alarm value of the seconds.
1206          *
1207          * Global variables:
1208          *  RTC_alarmCfgTimeDate.Sec: the current second alarm value is
1209          *  used.
1210          *
1211          ********************************************************************************/
1212          uint8 RTC_ReadAlarmSecond(void) 
1213          {
1214   1          /* Return current alarm second */
1215   1          return (RTC_alarmCfgTimeDate.Sec);
1216   1      }
1217          
1218          
1219          /*******************************************************************************
1220          * Function Name:   RTC_ReadAlarmMinute
1221          ********************************************************************************
1222          *
1223          * Summary:
1224          *  Reads Alarm Min software register value.
1225          *
1226          * Parameters:
1227          *  None.
1228          *
1229          * Return:
1230          *  Current alarm value of the minutes.
1231          *
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 21  

1232          * Global variables:
1233          *  RTC_alarmCfgTimeDate.Min: the current minute alarm is used.
1234          *
1235          *******************************************************************************/
1236          uint8 RTC_ReadAlarmMinute(void) 
1237          {
1238   1          /* Return current alarm minute */
1239   1          return (RTC_alarmCfgTimeDate.Min);
1240   1      }
1241          
1242          
1243          /*******************************************************************************
1244          * Function Name:   RTC_ReadAlarmHour
1245          ********************************************************************************
1246          *
1247          * Summary:
1248          *  Reads Alarm Hour software register value.
1249          *
1250          * Parameters:
1251          *  None.
1252          *
1253          * Return:
1254          *  Current alarm value of the hours.
1255          *
1256          * Global variables:
1257          *  RTC_alarmCfgTimeDate.Hour: the current hour alarm value is used.
1258          *
1259          *******************************************************************************/
1260          uint8 RTC_ReadAlarmHour(void) 
1261          {
1262   1          /* Return current alarm hour */
1263   1          return (RTC_alarmCfgTimeDate.Hour);
1264   1      }
1265          
1266          
1267          /*******************************************************************************
1268          * Function Name:   RTC_ReadAlarmDayOfMonth
1269          ********************************************************************************
1270          *
1271          * Summary:
1272          *  Reads Alarm DayOfMonth software register value.
1273          *
1274          * Parameters:
1275          *  None.
1276          *
1277          * Return:
1278          *  Current alarm value of the day of month.
1279          *
1280          * Global variables:
1281          *  RTC_alarmCfgTimeDate.DayOfMonth: the current day of month alarm
1282          *  value is used.
1283          *
1284          *******************************************************************************/
1285          uint8 RTC_ReadAlarmDayOfMonth(void) 
1286          {
1287   1          /* Return current alarm day of month */
1288   1          return (RTC_alarmCfgTimeDate.DayOfMonth);
1289   1      }
1290          
1291          
1292          /*******************************************************************************
1293          * Function Name:   RTC_ReadAlarmMonth
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 22  

1294          ********************************************************************************
1295          *
1296          * Summary:
1297          *  Reads Alarm Month software register value.
1298          *
1299          * Parameters:
1300          *  None.
1301          *
1302          * Return:
1303          *  Current alarm value of the month.
1304          *
1305          * Global variables:
1306          *  RTC_alarmCfgTimeDate.Month: the current month alarm value is
1307          *  used.
1308          *
1309          *******************************************************************************/
1310          uint8 RTC_ReadAlarmMonth(void) 
1311          {
1312   1          /* Return current alarm month */
1313   1          return (RTC_alarmCfgTimeDate.Month);
1314   1      }
1315          
1316          
1317          /*******************************************************************************
1318          * Function Name:   RTC_ReadAlarmYear
1319          ********************************************************************************
1320          *
1321          * Summary:
1322          *  Reads Alarm Year software register value.
1323          *
1324          * Parameters:
1325          *  None.
1326          *
1327          * Return:
1328          *  Current alarm value of the years.
1329          *
1330          * Global variables:
1331          *  RTC_alarmCfgTimeDate.Year: the current year alarm value is used.
1332          *
1333          *******************************************************************************/
1334          uint16 RTC_ReadAlarmYear(void) 
1335          {
1336   1          /* Return current alarm year */
1337   1          return (RTC_alarmCfgTimeDate.Year);
1338   1      }
1339          
1340          
1341          /*******************************************************************************
1342          * Function Name:   RTC_ReadAlarmDayOfWeek
1343          ********************************************************************************
1344          *
1345          * Summary:
1346          *  Reads Alarm DayOfWeek software register value.
1347          *
1348          * Parameters:
1349          *  None.
1350          *
1351          * Return:
1352          *  Current alarm value of the day of week.
1353          *
1354          * Global variables:
1355          *  RTC_alarmCfgTimeDate.DayOfWeek: the current day of week alarm
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 23  

1356          *  value is used.
1357          *
1358          *******************************************************************************/
1359          uint8 RTC_ReadAlarmDayOfWeek(void) 
1360          {
1361   1          /* Return current alarm day of the week */
1362   1          return (RTC_alarmCfgTimeDate.DayOfWeek);
1363   1      }
1364          
1365          
1366          /*******************************************************************************
1367          * Function Name:   RTC_ReadAlarmDayOfYear
1368          ********************************************************************************
1369          *
1370          * Summary:
1371          *  Reads Alarm DayOfYear software register value.
1372          *
1373          * Parameters:
1374          *  None.
1375          *
1376          * Return:
1377          *  Current alarm value of the day of year.
1378          *
1379          * Global variables:
1380          *  RTC_alarmCfgTimeDate.DayOfYear: the current day of year alarm
1381          *  value is used.
1382          *
1383          *******************************************************************************/
1384          uint16 RTC_ReadAlarmDayOfYear(void) 
1385          {
1386   1          /* Return current alarm day of the year */
1387   1          return  (RTC_alarmCfgTimeDate.DayOfYear);
1388   1      }
1389          
1390          
1391          /*******************************************************************************
1392          * Function Name:   RTC_WriteAlarmMask
1393          ********************************************************************************
1394          *
1395          * Summary:
1396          *  Writes the Alarm Mask software register with 1 bit per time/date entry. Alarm
1397          *  true when all masked time/date values match Alarm values.
1398          *
1399          * Parameters:
1400          *  mask: Alarm Mask software register value.
1401          *
1402          * Return:
1403          *  None.
1404          *
1405          * Global variables:
1406          *  RTC_alarmCfgMask: global variable which stores masks for
1407          *  time/date alarm configuration is modified.
1408          *
1409          * Reentrant:
1410          *  No.
1411          *
1412          *******************************************************************************/
1413          void RTC_WriteAlarmMask(uint8 mask) 
1414          {
1415   1          RTC_alarmCfgMask = mask;
1416   1      }
1417          
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 24  

1418          
1419          /*******************************************************************************
1420          * Function Name:   RTC_WriteIntervalMask
1421          ********************************************************************************
1422          *
1423          * Summary:
1424          *  Writes the Interval Mask software register with 1 bit per time/date entry.
1425          *  Interrupt true when any masked time/date overflow occur.
1426          *
1427          * Parameters:
1428          *  mask: Alarm Mask software register value.
1429          *
1430          * Return:
1431          *  None.
1432          *
1433          * Global variables:
1434          *  RTC_intervalCfgMask: this global variable is modified - the new
1435          *  value of interval mask is stored here.
1436          *
1437          * Reentrant:
1438          *  No.
1439          *
1440          *******************************************************************************/
1441          void RTC_WriteIntervalMask(uint8 mask) 
1442          {
1443   1          RTC_intervalCfgMask = mask;
1444   1      }
1445          
1446          
1447          /*******************************************************************************
1448          * Function Name:   RTC_ReadStatus
1449          ********************************************************************************
1450          *
1451          * Summary:
1452          *  Reads the Status software register which has flags for DST
1453          *  (DST), Leap Year (LY) and AM/PM (AM_PM), Alarm active (AA).
1454          *
1455          * Parameters:
1456          *  None.
1457          *
1458          * Return:
1459          *  None.
1460          *
1461          * Global variables:
1462          *  RTC_statusDateTime: global variable is modified - active alarm
1463          *  status bit is cleared.
1464          *
1465          * Reentrant:
1466          *  No.
1467          *
1468          * Side Effects:
1469          *  Alarm active(AA) flag clear after read.
1470          *
1471          *******************************************************************************/
1472          uint8 RTC_ReadStatus(void) 
1473          {
1474   1          uint8 status;
1475   1      
1476   1          /* Save status */
1477   1          status = (uint8)RTC_statusDateTime;
1478   1      
1479   1          /* Clean AA flag after read of Status Register */
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 25  

1480   1          RTC_statusDateTime &= (uint8)(~RTC_STATUS_AA);
1481   1      
1482   1          return (status);
1483   1      }
1484          
1485          
1486          /*******************************************************************************
1487          * Function Name:   RTC_DayOfWeek
1488          ********************************************************************************
1489          *
1490          * Summary:
1491          *  Calculates Day Of Week value use Zeller's congruence.
1492          *
1493          * Parameters:
1494          *  dayOfMonth: Day Of Month value.
1495          *  month: Month value.
1496          *  year: Year value.
1497          *
1498          * Return:
1499          *  Day Of Week value.
1500          *
1501          *******************************************************************************/
1502          static uint8 RTC_DayOfWeek(uint8 dayOfMonth, uint8 month, uint16 year)
1503          
1504          {
1505   1          /* Calculated sequence ((31 * month) / 12) mod 7 from the Zeller's congruence */
1506   1          static const uint8 CYCODE RTC_monthTemplate[RTC_MONTHS_IN_YEAR] =
1507   1                                                                  {0u, 3u, 2u, 5u, 0u, 3u, 5u, 1u, 4u, 6u, 2u, 4
             -u};
1508   1      
1509   1          /* It is simpler to handle the modified year, which is year - 1 during
1510   1          * January and February
1511   1          */
1512   1          if(month < RTC_MARCH)
1513   1          {
1514   2              year = year - 1u;
1515   2          }
1516   1      
1517   1          /* For Gregorian calendar: d = (day + y + y/4 - y/100 + y/400 + (31*m)/12) mod 7 */
1518   1          return ((uint8)(((year + (((year/4u) - (year/100u)) + (year/400u))) +
1519   1          (((uint16)RTC_monthTemplate[month - 1u]) + ((uint16) dayOfMonth))) % RTC_DAYS_IN_WEEK));
1520   1      }
1521          
1522          
1523          /*******************************************************************************
1524          * Function Name:   RTC_SetInitValues
1525          ********************************************************************************
1526          *
1527          * Summary:
1528          *    Does all initial calculation.
1529          *    - Set LP Year flag;
1530          *    - Set AM/PM flag;
1531          *    - DayOfWeek;
1532          *    - DayOfYear;
1533          *    - Set DST flag;
1534          *    - Convert relative to absolute date.
1535          *
1536          * Parameters:
1537          *  None.
1538          *
1539          * Return:
1540          *  None.
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 26  

1541          *
1542          * Global variables:
1543          *  RTC_currentTimeDate, RTC_dstTimeDateStart,
1544          *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
1545          *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
1546          *  RTC_dstStartStatus, RTC_dstStartStatus,
1547          *  RTC_dstStopStatus, RTC_alarmCurStatus:
1548          *  global variables are used while the initial calculation.
1549          *
1550          * RTC_dstTimeDateStart, RTC_currentTimeDate,
1551          *  RTC_statusDateTime, RTC_dstStartStatus,
1552          *  RTC_dstStartStatus, RTC_dstStopStatus,
1553          *  RTC_alarmCurStatus: global variables are modified with the
1554          *  initial calculated data.
1555          *
1556          * Reentrant:
1557          *  No.
1558          *
1559          *******************************************************************************/
1560          static void RTC_SetInitValues(void) 
1561          {
1562   1          uint8 i;
1563   1          uint8 RTC_alarmCfgMaskTemp;
1564   1      
1565   1          /* Clears day of month counter */
1566   1          RTC_currentTimeDate.DayOfYear = 0u;
1567   1      
1568   1          /* Increments day of year value with day in current month */
1569   1          RTC_currentTimeDate.DayOfYear += RTC_currentTimeDate.DayOfMonth;
1570   1      
1571   1          /* Check leap year */
1572   1          if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
1573   1          {
1574   2              /* Set LP Year flag */
1575   2              RTC_statusDateTime |= RTC_STATUS_LY;
1576   2          }   /* leap year flag was set */
1577   1          else
1578   1          {
1579   2              /* Clear LP Year flag */
1580   2              RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
1581   2          }   /* leap year flag was cleared */
1582   1      
1583   1          /* Day of Year */
1584   1          for(i = 0u; i < (RTC_currentTimeDate.Month - 1u); i++)
1585   1          {
1586   2              /* Increment on days in passed months */
1587   2              RTC_currentTimeDate.DayOfYear += RTC_daysInMonths[i];
1588   2          }   /* day of year is calculated */
1589   1      
1590   1          /* Leap year check */
1591   1          if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_LY))
1592   1          {
1593   2              /* Leap day check */
1594   2              if(RTC_currentTimeDate.Month > RTC_FEBRUARY)
1595   2              {
1596   3                  /* Add leap day */
1597   3                  RTC_currentTimeDate.DayOfYear++;
1598   3              }   /* Do nothing for non leap day */
1599   2          }   /* Do nothing for not leap year */
1600   1      
1601   1          /* DayOfWeek */
1602   1          RTC_currentTimeDate.DayOfWeek = RTC_DayOfWeek(
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 27  

1603   1                                                                              RTC_currentTimeDate.DayOfMonth,
1604   1                                                                              RTC_currentTimeDate.Month,
1605   1                                                                              RTC_currentTimeDate.Year) + 1u;
1606   1      
1607   1          if(RTC_currentTimeDate.DayOfWeek > RTC_START_OF_WEEK)
1608   1          {
1609   2              RTC_currentTimeDate.DayOfWeek -= RTC_START_OF_WEEK;
1610   2          }
1611   1          else
1612   1          {
1613   2              RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK -
1614   2                                              (RTC_START_OF_WEEK - RTC_currentTimeDate.DayOfWeek);
1615   2          }
1616   1      
1617   1          #if (1u == RTC_DST_FUNC_ENABLE)
              
                      /* If DST values is given in a relative manner, converts to the absolute values */
                      if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_RELDATE))
                      {
                          RTC_DSTDateConversion();
                      }
              
                      /* Sets DST status respect to the DST start date and time */
                      if(RTC_currentTimeDate.Month > RTC_dstTimeDateStart.Month)
                      {
                          RTC_statusDateTime |= RTC_STATUS_DST;
                      }
                      else if(RTC_currentTimeDate.Month == RTC_dstTimeDateStart.Month)
                      {
                          if(RTC_currentTimeDate.DayOfMonth > RTC_dstTimeDateStart.DayOfMonth)
                          {
                              RTC_statusDateTime |= RTC_STATUS_DST;
                          }
                          else if(RTC_currentTimeDate.DayOfMonth == RTC_dstTimeDateStart.DayOfMonth)
                          {
                              if(RTC_currentTimeDate.Hour > RTC_dstTimeDateStart.Hour)
                              {
                                  RTC_statusDateTime |= RTC_STATUS_DST;
                              }
                          }
                          else
                          {
                              /* Do nothing if current day of month is less than DST stop day of month */
                          }
                      }
                      else
                      {
                          /* Do nothing if current month is before than DST stop month */
                      }
              
                      /* Clears DST status respect to the DST start date and time */
                      if(RTC_currentTimeDate.Month > RTC_dstTimeDateStop.Month)
                      {
                          RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
                      }
                      else if(RTC_currentTimeDate.Month == RTC_dstTimeDateStop.Month)
                      {
                          if(RTC_currentTimeDate.DayOfMonth > RTC_dstTimeDateStop.DayOfMonth)
                          {
                              RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
                          }
                          else if(RTC_currentTimeDate.DayOfMonth == RTC_dstTimeDateStop.DayOfMonth)
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 28  

                          {
                              if(RTC_currentTimeDate.Hour > RTC_dstTimeDateStop.Hour)
                              {
                                  RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
                              }
                          }
                          else
                          {
                              /* Do nothing if current day of month is less than DST stop day of month */
                          }
                      }
                      else
                      {
                          /* Do nothing if current month is before than DST stop month */
                      }
              
                      /* Clear DST start/stop statuses */
                      RTC_dstStartStatus = 0u;
                      RTC_dstStopStatus = 0u;
              
                      /* Sets DST stop status month flag if DST stop month is equal to the
                      * current month, otherwise clears that flag.
                      */
                      if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
                      {
                          RTC_dstStopStatus |= RTC_DST_MONTH;
                      }
                      else
                      {
                          RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
                      }
              
                      /* Sets DST start status month flag if DST start month is equal to the
                      * current month, otherwise clears that flag.
                      */
                      if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
                      {
                          RTC_dstStartStatus |= RTC_DST_MONTH;
                      }
                      else
                      {
                          RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
                      }
              
                      /* Sets DST stop status day of month flag if DST stop day of month is
                      * equal to the current day of month, otherwise clears that flag.
                      */
                      if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
                      {
                          RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
                      }
                      else
                      {
                          RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
                      }
              
                      /* Sets DST start status day of month flag if DST start day of month is
                      * equal to the current day of month, otherwise clears that flag.
                      */
                      if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
                      {
                          RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 29  

                      }
                      else
                      {
                          RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
                      }
              
                      /* Sets DST stop status hour flag if DST stop hour is equal to the
                      * current hour, otherwise clears that flag.
                      */
                      if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
                      {
                          RTC_dstStopStatus |= RTC_DST_HOUR;
                      }
                      else
                      {
                          RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
                      }
              
                      /* Sets DST start status hour flag if DST start hour is equal to the
                      * current hour, otherwise clears that flag.
                      */
                      if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
                      {
                          RTC_dstStartStatus |= RTC_DST_HOUR;
                      }
                      else
                      {
                          RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
                      }
              
                      /* DST Enable ? */
                      if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
                      {
                          if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
                          {
                              if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
                                      (RTC_DST_HOUR | RTC_DST_DAYOFMONTH | RTC_DST_MONTH)))
                              {
                                  /* Subtract current minutes value with minutes value, what
                                  *  are out of full hour in DST offset.
                                  */
                                  RTC_currentTimeDate.Min -= RTC_dstOffsetMin %
                                                                          (RTC_HOUR_ELAPSED + 1u);
              
                                  /* If current minutes value is greater than number of
                                  * minutes in hour - could be only if hour's value is negative
                                  */
                                  if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
                                  {
                                      /* Adjust current minutes value. Convert to the positive. */
                                      RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
                                                                             ((uint8)(~RTC_currentTimeDate.Min));
              
                                      /* Decrement current hours value. */
                                      RTC_currentTimeDate.Hour--;
                                  }
              
                                  /* Subtract current hours value with hours value, what
                                  *  are full part of hours in DST offset.
                                  */
                                  RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
                                                                           (RTC_HOUR_ELAPSED + 1u);
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 30  

              
                                  /* Check if current hour's value is negative */
                                  if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
                                  {
                                      /* Adjust hour */
                                      RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
                                                                              ((uint8)(~RTC_currentTimeDate.Hour));
              
                                      /* Decrement day of month, year and week */
                                      RTC_currentTimeDate.DayOfMonth--;
                                      RTC_currentTimeDate.DayOfYear--;
                                      RTC_currentTimeDate.DayOfWeek--;
              
                                      if(0u == RTC_currentTimeDate.DayOfWeek)
                                      {
                                          RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
                                      }
              
                                      if(0u == RTC_currentTimeDate.DayOfMonth)
                                      {
                                          /* Decrement months value */
                                          RTC_currentTimeDate.Month--;
              
                                          /* The current month is month before 1st one. */
                                          if(0u == RTC_currentTimeDate.Month)
                                          {
                                              /* December is the month before January */
                                              RTC_currentTimeDate.Month = RTC_DECEMBER;
                                              RTC_currentTimeDate.DayOfMonth =
                                                          RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
              
                                              /* Decrement years value */
                                              RTC_currentTimeDate.Year--;
                                              if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
                                              {
                                                  /* Set leap year status flag */
                                                  RTC_statusDateTime |= RTC_STATUS_LY;
                                                  RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_LEAP_YEAR;
                                              }
                                              else
                                              {
                                                  /* Clear leap year status flag */
                                                  RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
                                                  RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
                                              }
                                          }   /* 0u == RTC_currentTimeDate.Month */
                                          else
                                          {
                                              RTC_currentTimeDate.DayOfMonth =
                                                          RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
                                          }   /* 0u != End of RTC_currentTimeDate.Month */
                                      }   /* 0u == End of RTC_currentTimeDate.DayOfMonth */
                                  }   /* End of RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED */
              
                                  /* Clear DST status flag */
                                  RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
                                  /* Clear DST stop status */
                                  RTC_dstStopStatus = 0u;
                              }
                          }
                          else    /* Current time and date DO NOT match DST time and date */
                          {
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 31  

                              if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus, RTC_DST_HOUR |
                                                                   RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
                              {
                                  /* Add Hour and Min */
                                  RTC_currentTimeDate.Min +=
                                                              RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
              
                                  if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
                                  {
                                      /* Adjust Min */
                                      RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
                                      RTC_currentTimeDate.Hour++;
                                  }
              
                                  RTC_currentTimeDate.Hour +=
                                                              RTC_dstOffsetMin / (RTC_HOUR_ELAPSED + 1u);
                                  if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
                                  {
                                      /* Adjust hour, add day */
                                      RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
                                      RTC_currentTimeDate.DayOfMonth++;
                                      RTC_currentTimeDate.DayOfYear++;
                                      RTC_currentTimeDate.DayOfWeek++;
              
                                      if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
                                      {
                                          RTC_currentTimeDate.DayOfWeek = 1u;
                                      }
              
                                      if(RTC_currentTimeDate.DayOfMonth >
                                                          RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])
                                      {
                                          RTC_currentTimeDate.Month++;
                                          RTC_currentTimeDate.DayOfMonth = 1u;
              
                                          /* Has new year come? */
                                          if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
                                          {
                                              /* Set first month of the year */
                                              RTC_currentTimeDate.Month = RTC_JANUARY;
              
                                              /* Increment year */
                                              RTC_currentTimeDate.Year++;
              
                                              /* Update leap year status */
                                              if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
                                              {
                                                  /* LP - true, else - false */
                                                  RTC_statusDateTime |= RTC_STATUS_LY;
                                              }
                                              else
                                              {
                                                  RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
                                              }
              
                                              /* Set day of year to the first one */
                                              RTC_currentTimeDate.DayOfYear = 1u;
                                          }
                                      }
                                  }
                                  RTC_statusDateTime |= RTC_STATUS_DST;
                                  RTC_dstStartStatus = 0u;
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 32  

                              }
                          }
                      }
                  #endif /* 1u == RTC_DST_FUNC_ENABLE */
1917   1      
1918   1          /* Set AM/PM flag */
1919   1          if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
1920   1          {
1921   2              /* AM Hour 00:00-11:59, flag zero */
1922   2              RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
1923   2          }
1924   1          else
1925   1          {
1926   2              /* PM Hour 12:00 - 23:59, flag set */
1927   2              RTC_statusDateTime |= RTC_STATUS_AM_PM;
1928   2          }
1929   1      
1930   1          /* Alarm calculation */
1931   1      
1932   1          /* Alarm SEC */
1933   1          if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
1934   1          {
1935   2              if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
1936   2              {
1937   3                  /* Set second alarm */
1938   3                  RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
1939   3              }
1940   2              else
1941   2              {
1942   3                  /* Clear second alarm */
1943   3                  RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
1944   3              }
1945   2          }
1946   1      
1947   1          /* Alarm MIN */
1948   1          if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
1949   1          {
1950   2              if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
1951   2              {
1952   3                  /* Set minute alarm */
1953   3                  RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
1954   3              }
1955   2              else
1956   2              {
1957   3                  /* Clear minute alarm */
1958   3                  RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
1959   3              }
1960   2          }
1961   1      
1962   1          /* Alarm HOUR */
1963   1          if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
1964   1          {
1965   2              if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
1966   2              {
1967   3                  /* Set hour alarm */
1968   3                  RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
1969   3              }
1970   2              else
1971   2              {
1972   3                  /* Clear hour alarm */
1973   3                  RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
1974   3              }
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 33  

1975   2          }
1976   1      
1977   1          /* Alarm DAYOFWEEK */
1978   1          if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_DAYOFWEEK_MASK))
1979   1          {
1980   2              if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
1981   2              {
1982   3                  /* Set day of week alarm */
1983   3                  RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
1984   3              }
1985   2              else
1986   2              {
1987   3                  /* Clear day of week alarm */
1988   3                  RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
1989   3              }
1990   2          }
1991   1      
1992   1          /* Alarm DAYOFYEAR */
1993   1          if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_DAYOFYEAR_MASK))
1994   1          {
1995   2              if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
1996   2              {
1997   3                  /* Set day of year alarm */
1998   3                  RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
1999   3              }
2000   2              else
2001   2              {
2002   3                  /* Clear day of year alarm */
2003   3                  RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
2004   3              }
2005   2          }
2006   1      
2007   1          /* Alarm DAYOFMONTH */
2008   1          if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_DAYOFMONTH_MASK))
2009   1          {
2010   2              if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
2011   2              {
2012   3                  /* Set day of month alarm */
2013   3                  RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
2014   3              }
2015   2                 else
2016   2              {
2017   3                  /* Clear day of month alarm */
2018   3                  RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
2019   3              }
2020   2          }
2021   1      
2022   1          /* Alarm MONTH */
2023   1          if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MONTH_MASK))
2024   1          {
2025   2              if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
2026   2              {
2027   3                  /* Set month alarm */
2028   3                  RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
2029   3              }
2030   2              else
2031   2              {
2032   3                  /* Clear month alarm */
2033   3                  RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
2034   3              }
2035   2          }
2036   1      
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 34  

2037   1          /* Alarm YEAR */
2038   1          if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_YEAR_MASK))
2039   1          {
2040   2              if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
2041   2              {
2042   3                  /* Set year alarm */
2043   3                  RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
2044   3              }
2045   2              else
2046   2              {
2047   3                  /* Clear year alarm */
2048   3                  RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
2049   3              }
2050   2          }
2051   1      
2052   1          RTC_alarmCfgMaskTemp = RTC_alarmCfgMask;
2053   1          /* Set Alarm flag event */
2054   1          RTC_SET_ALARM(RTC_alarmCfgMaskTemp,
2056   1                                     RTC_alarmCurStatus,
2056   1                                     RTC_statusDateTime);
2057   1      }
2058          
2059          
2060          #if (1u == RTC_DST_FUNC_ENABLE)
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTMode
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST mode software register. That enables or disables DST changes
                  *  and sets the date mode to fixed date or relative date. Only generated if DST
                  *  enabled.
                  *
                  * Parameters:
                  *  mode: DST Mode software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstModeType: global variable is modified with the new
                  *  DST mode type: relative or fixed.
                  *
                  *  RTC_dstTimeDateStart.Month,
                  *  RTC_dstTimeDateStart.DayOfWeek,
                  *  RTC_dstTimeDateStart.Week:
                  *  RTC_dstTimeDateStop.Month,
                  *  RTC_dstTimeDateStop.DayOfWeek,
                  *  RTC_dstTimeDateStop.Week,
                  *  RTC_currentTimeDate.Year: for the day of week correction,
                  *   they are used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_dstTimeDateStart.DayOfMonth,
                  *  RTC_dstTimeDateStop.DayOfMonth: updated after convertion by
                  *  the RTC_DSTDateConversion() function if DST mode is
                  *  configured to be relative.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 35  

                  void RTC_WriteDSTMode(uint8 mode) 
                  {
                      /* Set DST mode */
                      RTC_dstModeType = mode;
              
                      if(0u != RTC_IS_BIT_SET(mode, RTC_DST_RELDATE))
                      {
                          /* Convert DST date */
                          RTC_DSTDateConversion();
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStartHour
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Start Hour software register. Used for absolute date entry.
                  *  Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  hour: DST Start Hour software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStart.Hour: global variable is modified with
                  *  the new value.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStartHour(uint8 hour) 
                  {
                      /* Set DST Start Hour */
                      RTC_dstTimeDateStart.Hour = hour;
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStartOfMonth
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Start DayOfMonth software register. Used for absolute date
                  *  entry. Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  dayOfMonth: DST Start DayOfMonth software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStart.DayOfMonth: global variable is modified
                  *  with the new value.
                  *
                  * Reentrant:
                  *  No.
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 36  

                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStartDayOfMonth(uint8 dayOfMonth)
                       
                  {
                      /* Set DST Start day of month */
                      RTC_dstTimeDateStart.DayOfMonth = dayOfMonth;
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStartMonth
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Start Month software register. Used for absolute date entry.
                  *  Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  month: DST Start month software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStart.Month: global variable is modified
                  *  with the new value.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStartMonth(uint8 month) 
                  {
                      /* Set DST Start month */
                      RTC_dstTimeDateStart.Month = month;
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStartDayOfWeek
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Start DayOfWeek software register. Used for absolute date
                  *  entry. Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  dayOfWeek: DST start day of week software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstModeType: global variable, where DST mode type:
                  *  relative or fixed is stored.
                  *
                  *  RTC_dstTimeDateStart.Month,
                  *  RTC_dstTimeDateStart.DayOfWeek,
                  *  RTC_dstTimeDateStart.Week,
                  *  RTC_dstTimeDateStop.Month,
                  *  RTC_dstTimeDateStop.DayOfWeek,
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 37  

                  *  RTC_dstTimeDateStop.Week: for the day of week correction,
                  *   they are used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_currentTimeDate.Year: for the day of week calculation,
                  *   it is used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_dstTimeDateStart.DayOfWeek: global variable is modified
                  *  with the new day of week value.
                  *
                  *  RTC_dstTimeDateStart.DayOfMonth and
                  *  RTC_dstTimeDateStop.DayOfMonth are modified by
                  *  the RTC_DSTDateConversion() function if DST mode is
                  *  configured to be relative.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStartDayOfWeek(uint8 dayOfWeek)
                       
                  {
                      /* Set DST Start day of week */
                      RTC_dstTimeDateStart.DayOfWeek = dayOfWeek;
              
                      if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_RELDATE))
                      {
                          /* Convert DST date */
                          RTC_DSTDateConversion();
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStartWeek
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Start Week software register. Used for absolute date entry.
                  *  Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  week: DST start week software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStart.Week: global variable is modified with
                  *   the new week's value of the DST start time/date.
                  *
                  *  RTC_dstTimeDateStart.DayOfMonth,
                  *  RTC_dstTimeDateStop.DayOfMonth: is modified after convertion
                  *  by the RTC_DSTDateConversion() function if DST mode is
                  *  configured to be relative.
                  *
                  *  RTC_dstModeType: global variable is used for theDST mode
                  *   type: relative or fixed store.
                  *
                  *  RTC_dstTimeDateStart.Month,
                  *  RTC_dstTimeDateStart.DayOfWeek,
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 38  

                  *  RTC_dstTimeDateStart.Week: for the day of week correction,
                  *   they are used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_dstTimeDateStop.Month,
                  *  RTC_dstTimeDateStop.DayOfWeek,
                  *  RTC_dstTimeDateStop.Week: for the day of week correction,
                  *   they are used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_currentTimeDate.Year: for the day of week calculation,
                  *   it is used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStartWeek(uint8 week) 
                  {
                      /* Set DST Start week */
                      RTC_dstTimeDateStart.Week = week;
              
                      if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_RELDATE))
                      {
                          /* Convert DST date */
                          RTC_DSTDateConversion();
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStopHour
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Stop Hour software register. Used for absolute date entry.
                  *  Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  hour: DST stop hour software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStart.Hour: global variable is modified with the new hour
                  *   of the DST start time/date.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStopHour(uint8 hour) 
                  {
                      /* Set DST Stop hour */
                      RTC_dstTimeDateStop.Hour = hour;
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStopDayOfMonth
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 39  

                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Stop DayOfMonth software register. Used for absolute date
                  *  entry. Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  dayOfMonth: DST stop day of month software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStop.DayOfMonth: global variable is modified
                  *  where new day of month's value of the DST stop time/date.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStopDayOfMonth(uint8 dayOfMonth)
                       
                  {
                      /* Set DST Start day of month */
                      RTC_dstTimeDateStop.DayOfMonth = dayOfMonth;
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStopMonth
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Stop Month software  register. Used for absolute date entry.
                  *  Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  month: DST Stop Month software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStop.Month: global variable is modified with
                  *   the new month of the DST stop time/date.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStopMonth(uint8 month) 
                  {
                      /* Set DST Stop month */
                      RTC_dstTimeDateStop.Month = month;
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStopDayOfWeek
                  ********************************************************************************
                  *
                  * Summary:
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 40  

                  *  Writes the DST Stop DayOfWeek software register. Used for relative date
                  *  entry. Only generated if DST is enabled.
                  *
                  * Parameters:
                  *  dayOfWeek: DST stop day of week software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStop.DayOfWeek: global variable is modified
                  *   with the day of week of the DST stop time/date.
                  *
                  *  RTC_dstModeType: global variable is used to store DST mode
                  *   type: relative or fixed.
                  *
                  *  RTC_dstTimeDateStart.Month,
                  *  RTC_dstTimeDateStart.DayOfWeek,
                  *  RTC_dstTimeDateStart.Week,
                  *  RTC_dstTimeDateStop.Month,
                  *  RTC_dstTimeDateStop.DayOfWeek,
                  *  RTC_dstTimeDateStop.Weekfor the day of week correction,
                  *   they are used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_currentTimeDate.Year: for the day of week calculation,
                  *   it is used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_dstTimeDateStop.DayOfWeek: global variable is modified
                  *  with the new day of week's value.
                  *
                  *  RTC_dstTimeDateStart.DayOfMonth and
                  *  RTC_dstTimeDateStop.DayOfMonth are modified by
                  *  the RTC_DSTDateConversion() function if DST mode is
                  *  configured to be relative.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStopDayOfWeek(uint8 dayOfWeek)
                       
                  {
                      /* Set DST Stop day of week */
                      RTC_dstTimeDateStop.DayOfWeek = dayOfWeek;
              
                      if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_RELDATE))
                      {
                          /* Convert DST date */
                          RTC_DSTDateConversion();
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTStopWeek
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Stop Week software register. Used for relative date entry.
                  *  Only generated if DST is enabled.
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 41  

                  *
                  * Parameters:
                  *  week: DST stop week software register value.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstTimeDateStop.Week: global variable used to store the
                  *  DST stop time/date is stored.
                  *
                  *  RTC_dstModeType: global variable is used to store DST mode
                  *   type: relative or fixed.
                  *
                  *  RTC_dstTimeDateStart.Month,
                  *  RTC_dstTimeDateStart.DayOfWeek,
                  *  RTC_dstTimeDateStart.Week,
                  *  RTC_dstTimeDateStop.Month,
                  *  RTC_dstTimeDateStop.DayOfWeek,
                  *  RTC_dstTimeDateStop.Week: used for the day of week correction,
                  *   they are used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_currentTimeDate.Year: for the day of week calculation,
                  *   it is used by RTC_DSTDateConversion() function if DST
                  *   mode is configured to be relative.
                  *
                  *  RTC_dstTimeDateStop.Week: global variable is modified with
                  *  the new value.
                  *
                  *  RTC_dstTimeDateStart.DayOfMonth and
                  *  RTC_dstTimeDateStop.DayOfMonth are modified by
                  *  the RTC_DSTDateConversion() function if DST mode is
                  *  configured to be relative.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTStopWeek(uint8 week) 
                  {
                      /* Set DST Stop week */
                      RTC_dstTimeDateStop.Week = week;
              
                      if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_RELDATE))
                      {
                          /* Convert DST date */
                          RTC_DSTDateConversion();
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name:   RTC_WriteDSTOffset
                  ********************************************************************************
                  *
                  * Summary:
                  *  Writes the DST Offset register. Allows a configurable increment or decrement
                  *  of time between 0 and 255 minutes. Increment occurs on DST Start and
                  *  decrement on DST Stop. Only generated if DST is enabled.
                  *
                  * Parameters:
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 42  

                  *  offset: The DST offset to be saved.
                  *
                  * Return:
                  *  None.
                  *
                  * Global variables:
                  *  RTC_dstOffsetMin: global variable is modified with the new
                  *  DST offset value (in minutes).
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void RTC_WriteDSTOffset(uint8 offset) 
                  {
                      /* Set DST offset */
                      RTC_dstOffsetMin = offset;
                  }
              
              #endif /* 1u == RTC_DST_FUNC_ENABLE */
2553          
2554          
2555          /* [] END OF FILE */
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 43  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION RTC_Start (BEGIN)
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
0000 900000      R     MOV     DPTR,#RTC_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0008 120000      R     LCALL   RTC_Init
                                           ; SOURCE LINE # 135
000B 900000      R     MOV     DPTR,#RTC_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0011         ?C0001:
                                           ; SOURCE LINE # 139
0011 120000      R     LCALL   RTC_Enable
                                           ; SOURCE LINE # 140
0014         ?C0002:
0014 22                RET     
             ; FUNCTION RTC_Start (END)

             ; FUNCTION RTC_Stop (BEGIN)
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 168
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
000E 904382            MOV     DPTR,#04382H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 54CF              ANL     A,#0CFH
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0019 900000      R     MOV     DPTR,#interruptState
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 178
0021         ?C0003:
0021 22                RET     
             ; FUNCTION RTC_Stop (END)

             ; FUNCTION RTC_EnableInt (BEGIN)
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 44  

                                           ; SOURCE LINE # 198
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0006         ?C0004:
0006 22                RET     
             ; FUNCTION RTC_EnableInt (END)

             ; FUNCTION RTC_DisableInt (BEGIN)
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 219
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0006         ?C0005:
0006 22                RET     
             ; FUNCTION RTC_DisableInt (END)

             ; FUNCTION RTC_Init (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 394
0000 120000      R     LCALL   RTC_SetInitValues
                                           ; SOURCE LINE # 397
0003 9044C8            MOV     DPTR,#044C8H
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0009 7C00        E     MOV     R4,#HIGH RTC_ISR
000B 7D00        E     MOV     R5,#LOW RTC_ISR
000D 7F00              MOV     R7,#00H
000F 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 403
0012 7D07              MOV     R5,#07H
0014 7F00              MOV     R7,#00H
0016 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 404
0019         ?C0006:
0019 22                RET     
             ; FUNCTION RTC_Init (END)

             ; FUNCTION RTC_Enable (BEGIN)
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 432
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 435
0008 904382            MOV     DPTR,#04382H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4430              ORL     A,#030H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 45  

0013 900000      R     MOV     DPTR,#interruptState
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 441
001B 9044C0            MOV     DPTR,#044C0H
001E 7401              MOV     A,#01H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0021         ?C0007:
0021 22                RET     
             ; FUNCTION RTC_Enable (END)

             ; FUNCTION RTC_ReadTime (BEGIN)
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 472
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH RTC_currentTimeDate
0004 7900        R     MOV     R1,#LOW RTC_currentTimeDate
                                           ; SOURCE LINE # 473
0006         ?C0008:
0006 22                RET     
             ; FUNCTION RTC_ReadTime (END)

             ; FUNCTION _RTC_WriteTime (BEGIN)
                                           ; SOURCE LINE # 500
0000 900000      R     MOV     DPTR,#timeDate
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 504
0006 120000      R     LCALL   RTC_DisableInt
                                           ; SOURCE LINE # 507
0009 900000      R     MOV     DPTR,#timeDate
000C 120000      E     LCALL   ?C?PLDXDATA
000F 120000      E     LCALL   ?C?CLDPTR
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#RTC_currentTimeDate
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0018 900000      R     MOV     DPTR,#timeDate
001B 120000      E     LCALL   ?C?PLDXDATA
001E E9                MOV     A,R1
001F 2401              ADD     A,#01H
0021 F9                MOV     R1,A
0022 EA                MOV     A,R2
0023 3400              ADDC    A,#00H
0025 FA                MOV     R2,A
0026 120000      E     LCALL   ?C?CLDPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#RTC_currentTimeDate+01H
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
002F 900000      R     MOV     DPTR,#timeDate
0032 120000      E     LCALL   ?C?PLDXDATA
0035 E9                MOV     A,R1
0036 2402              ADD     A,#02H
0038 F9                MOV     R1,A
0039 EA                MOV     A,R2
003A 3400              ADDC    A,#00H
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 46  

003C FA                MOV     R2,A
003D 120000      E     LCALL   ?C?CLDPTR
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#RTC_currentTimeDate+02H
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
0046 900000      R     MOV     DPTR,#timeDate
0049 120000      E     LCALL   ?C?PLDXDATA
004C E9                MOV     A,R1
004D 2404              ADD     A,#04H
004F F9                MOV     R1,A
0050 EA                MOV     A,R2
0051 3400              ADDC    A,#00H
0053 FA                MOV     R2,A
0054 120000      E     LCALL   ?C?CLDPTR
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#RTC_currentTimeDate+04H
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
005D 900000      R     MOV     DPTR,#timeDate
0060 120000      E     LCALL   ?C?PLDXDATA
0063 E9                MOV     A,R1
0064 2407              ADD     A,#07H
0066 F9                MOV     R1,A
0067 EA                MOV     A,R2
0068 3400              ADDC    A,#00H
006A FA                MOV     R2,A
006B 120000      E     LCALL   ?C?CLDPTR
006E FF                MOV     R7,A
006F 900000      R     MOV     DPTR,#RTC_currentTimeDate+07H
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
0074 900000      R     MOV     DPTR,#timeDate
0077 120000      E     LCALL   ?C?PLDXDATA
007A E9                MOV     A,R1
007B 2408              ADD     A,#08H
007D F9                MOV     R1,A
007E EA                MOV     A,R2
007F 3400              ADDC    A,#00H
0081 FA                MOV     R2,A
0082 120000      E     LCALL   ?C?ILDPTR
0085 FF                MOV     R7,A
0086 AEF0              MOV     R6,B
0088 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
008B EE                MOV     A,R6
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0090 120000      R     LCALL   RTC_EnableInt
                                           ; SOURCE LINE # 516
0093         ?C0009:
0093 22                RET     
             ; FUNCTION _RTC_WriteTime (END)

             ; FUNCTION _RTC_WriteSecond (BEGIN)
                                           ; SOURCE LINE # 540
0000 900000      R     MOV     DPTR,#second
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 47  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 543
0005 900000      R     MOV     DPTR,#second
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_currentTimeDate
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 544
000F         ?C0010:
000F 22                RET     
             ; FUNCTION _RTC_WriteSecond (END)

             ; FUNCTION _RTC_WriteMinute (BEGIN)
                                           ; SOURCE LINE # 568
0000 900000      R     MOV     DPTR,#minute
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 571
0005 900000      R     MOV     DPTR,#minute
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_currentTimeDate+01H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
000F         ?C0011:
000F 22                RET     
             ; FUNCTION _RTC_WriteMinute (END)

             ; FUNCTION _RTC_WriteHour (BEGIN)
                                           ; SOURCE LINE # 596
0000 900000      R     MOV     DPTR,#hour
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 599
0005 900000      R     MOV     DPTR,#hour
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_currentTimeDate+02H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
000F         ?C0012:
000F 22                RET     
             ; FUNCTION _RTC_WriteHour (END)

             ; FUNCTION _RTC_WriteDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 624
0000 900000      R     MOV     DPTR,#dayOfMonth
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 627
0005 900000      R     MOV     DPTR,#dayOfMonth
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_currentTimeDate+04H
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 48  

000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 628
000F         ?C0013:
000F 22                RET     
             ; FUNCTION _RTC_WriteDayOfMonth (END)

             ; FUNCTION _RTC_WriteMonth (BEGIN)
                                           ; SOURCE LINE # 652
0000 900000      R     MOV     DPTR,#month
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 655
0005 900000      R     MOV     DPTR,#month
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_currentTimeDate+07H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 656
000F         ?C0014:
000F 22                RET     
             ; FUNCTION _RTC_WriteMonth (END)

             ; FUNCTION _RTC_WriteYear (BEGIN)
                                           ; SOURCE LINE # 680
0000 900000      R     MOV     DPTR,#year
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 683
0008 900000      R     MOV     DPTR,#year
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
0013 EE                MOV     A,R6
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 684
0018         ?C0015:
0018 22                RET     
             ; FUNCTION _RTC_WriteYear (END)

             ; FUNCTION _RTC_WriteAlarmSecond (BEGIN)
                                           ; SOURCE LINE # 714
0000 900000      R     MOV     DPTR,#second
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 716
0005 900000      R     MOV     DPTR,#second
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 49  

000A 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 719
000F 900000      R     MOV     DPTR,#RTC_currentTimeDate
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0016
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 722
001D 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4401              ORL     A,#01H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 723
002B 22                RET     
002C         ?C0016:
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 727
002C 900000      R     MOV     DPTR,#RTC_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FE              ANL     A,#0FEH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
003A         ?C0017:
                                           ; SOURCE LINE # 729
003A         ?C0018:
003A 22                RET     
             ; FUNCTION _RTC_WriteAlarmSecond (END)

             ; FUNCTION _RTC_WriteAlarmMinute (BEGIN)
                                           ; SOURCE LINE # 759
0000 900000      R     MOV     DPTR,#minute
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 761
0005 900000      R     MOV     DPTR,#minute
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+01H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
000F 900000      R     MOV     DPTR,#RTC_currentTimeDate+01H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+01H
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 50  

0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0019
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 767
001D 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4402              ORL     A,#02H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
002B 22                RET     
002C         ?C0019:
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 772
002C 900000      R     MOV     DPTR,#RTC_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FD              ANL     A,#0FDH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
003A         ?C0020:
                                           ; SOURCE LINE # 774
003A         ?C0021:
003A 22                RET     
             ; FUNCTION _RTC_WriteAlarmMinute (END)

             ; FUNCTION _RTC_WriteAlarmHour (BEGIN)
                                           ; SOURCE LINE # 804
0000 900000      R     MOV     DPTR,#hour
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
0005 900000      R     MOV     DPTR,#hour
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+02H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 809
000F 900000      R     MOV     DPTR,#RTC_currentTimeDate+02H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+02H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0022
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 812
001D 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0020 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 51  

0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4404              ORL     A,#04H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 813
002B 22                RET     
002C         ?C0022:
                                           ; SOURCE LINE # 815
                                           ; SOURCE LINE # 817
002C 900000      R     MOV     DPTR,#RTC_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FB              ANL     A,#0FBH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 818
003A         ?C0023:
                                           ; SOURCE LINE # 819
003A         ?C0024:
003A 22                RET     
             ; FUNCTION _RTC_WriteAlarmHour (END)

             ; FUNCTION _RTC_WriteAlarmDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 849
0000 900000      R     MOV     DPTR,#dayOfMonth
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
0005 900000      R     MOV     DPTR,#dayOfMonth
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+04H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
000F 900000      R     MOV     DPTR,#RTC_currentTimeDate+04H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+04H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0025
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 857
001D 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4410              ORL     A,#010H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 52  

002B 22                RET     
002C         ?C0025:
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 862
002C 900000      R     MOV     DPTR,#RTC_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54EF              ANL     A,#0EFH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 863
003A         ?C0026:
                                           ; SOURCE LINE # 864
003A         ?C0027:
003A 22                RET     
             ; FUNCTION _RTC_WriteAlarmDayOfMonth (END)

             ; FUNCTION _RTC_WriteAlarmMonth (BEGIN)
                                           ; SOURCE LINE # 894
0000 900000      R     MOV     DPTR,#month
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 896
0005 900000      R     MOV     DPTR,#month
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+07H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 899
000F 900000      R     MOV     DPTR,#RTC_currentTimeDate+07H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+07H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0028
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 902
001D 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4440              ORL     A,#040H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 903
002B 22                RET     
002C         ?C0028:
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 907
002C 900000      R     MOV     DPTR,#RTC_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 53  

0032 54BF              ANL     A,#0BFH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
003A         ?C0029:
                                           ; SOURCE LINE # 909
003A         ?C0030:
003A 22                RET     
             ; FUNCTION _RTC_WriteAlarmMonth (END)

             ; FUNCTION _RTC_WriteAlarmYear (BEGIN)
                                           ; SOURCE LINE # 939
0000 900000      R     MOV     DPTR,#year
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 941
0008 900000      R     MOV     DPTR,#year
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+08H
0013 EE                MOV     A,R6
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 944
0018 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+08H
0023 E0                MOVX    A,@DPTR
0024 FC                MOV     R4,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FD                MOV     R5,A
0028 ED                MOV     A,R5
0029 B50713            CJNE    A,AR7,?C0031
002C EC                MOV     A,R4
002D B5060F            CJNE    A,AR6,?C0031
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 947
0030 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 4480              ORL     A,#080H
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#RTC_alarmCurStatus
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 54  

                                           ; SOURCE LINE # 948
003E 22                RET     
003F         ?C0031:
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 952
003F 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 547F              ANL     A,#07FH
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#RTC_alarmCurStatus
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
004D         ?C0032:
                                           ; SOURCE LINE # 954
004D         ?C0033:
004D 22                RET     
             ; FUNCTION _RTC_WriteAlarmYear (END)

             ; FUNCTION _RTC_WriteAlarmDayOfWeek (BEGIN)
                                           ; SOURCE LINE # 985
0000 900000      R     MOV     DPTR,#dayOfWeek
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 986
                                           ; SOURCE LINE # 987
0005 900000      R     MOV     DPTR,#dayOfWeek
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+03H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 990
000F 900000      R     MOV     DPTR,#RTC_currentTimeDate+03H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+03H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0034
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 993
001D 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4408              ORL     A,#08H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 994
002B 22                RET     
002C         ?C0034:
                                           ; SOURCE LINE # 996
                                           ; SOURCE LINE # 998
002C 900000      R     MOV     DPTR,#RTC_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 55  

0031 EF                MOV     A,R7
0032 54F7              ANL     A,#0F7H
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 999
003A         ?C0035:
                                           ; SOURCE LINE # 1000
003A         ?C0036:
003A 22                RET     
             ; FUNCTION _RTC_WriteAlarmDayOfWeek (END)

             ; FUNCTION _RTC_WriteAlarmDayOfYear (BEGIN)
                                           ; SOURCE LINE # 1030
0000 900000      R     MOV     DPTR,#dayOfYear
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1032
0008 900000      R     MOV     DPTR,#dayOfYear
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+05H
0013 EE                MOV     A,R6
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
0018 900000      R     MOV     DPTR,#RTC_currentTimeDate+05H
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+05H
0023 E0                MOVX    A,@DPTR
0024 FC                MOV     R4,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FD                MOV     R5,A
0028 ED                MOV     A,R5
0029 B50713            CJNE    A,AR7,?C0037
002C EC                MOV     A,R4
002D B5060F            CJNE    A,AR6,?C0037
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1038
0030 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 4420              ORL     A,#020H
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#RTC_alarmCurStatus
003C EF                MOV     A,R7
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 56  

003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1039
003E 22                RET     
003F         ?C0037:
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1043
003F 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 54DF              ANL     A,#0DFH
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#RTC_alarmCurStatus
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1044
004D         ?C0038:
                                           ; SOURCE LINE # 1045
004D         ?C0039:
004D 22                RET     
             ; FUNCTION _RTC_WriteAlarmDayOfYear (END)

             ; FUNCTION RTC_ReadSecond (BEGIN)
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1068
0000 900000      R     MOV     DPTR,#RTC_currentTimeDate
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1069
0005         ?C0040:
0005 22                RET     
             ; FUNCTION RTC_ReadSecond (END)

             ; FUNCTION RTC_ReadMinute (BEGIN)
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1092
0000 900000      R     MOV     DPTR,#RTC_currentTimeDate+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1093
0005         ?C0041:
0005 22                RET     
             ; FUNCTION RTC_ReadMinute (END)

             ; FUNCTION RTC_ReadHour (BEGIN)
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1116
0000 900000      R     MOV     DPTR,#RTC_currentTimeDate+02H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1117
0005         ?C0042:
0005 22                RET     
             ; FUNCTION RTC_ReadHour (END)

             ; FUNCTION RTC_ReadDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 1139
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1142
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 57  

0000 900000      R     MOV     DPTR,#RTC_currentTimeDate+04H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1143
0005         ?C0043:
0005 22                RET     
             ; FUNCTION RTC_ReadDayOfMonth (END)

             ; FUNCTION RTC_ReadMonth (BEGIN)
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
                                           ; SOURCE LINE # 1166
0000 900000      R     MOV     DPTR,#RTC_currentTimeDate+07H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1167
0005         ?C0044:
0005 22                RET     
             ; FUNCTION RTC_ReadMonth (END)

             ; FUNCTION RTC_ReadYear (BEGIN)
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1190
0000 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 1191
0008         ?C0045:
0008 22                RET     
             ; FUNCTION RTC_ReadYear (END)

             ; FUNCTION RTC_ReadAlarmSecond (BEGIN)
                                           ; SOURCE LINE # 1212
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1215
0000 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1216
0005         ?C0046:
0005 22                RET     
             ; FUNCTION RTC_ReadAlarmSecond (END)

             ; FUNCTION RTC_ReadAlarmMinute (BEGIN)
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1237
                                           ; SOURCE LINE # 1239
0000 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1240
0005         ?C0047:
0005 22                RET     
             ; FUNCTION RTC_ReadAlarmMinute (END)

             ; FUNCTION RTC_ReadAlarmHour (BEGIN)
                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1261
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 58  

                                           ; SOURCE LINE # 1263
0000 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+02H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1264
0005         ?C0048:
0005 22                RET     
             ; FUNCTION RTC_ReadAlarmHour (END)

             ; FUNCTION RTC_ReadAlarmDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1288
0000 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+04H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1289
0005         ?C0049:
0005 22                RET     
             ; FUNCTION RTC_ReadAlarmDayOfMonth (END)

             ; FUNCTION RTC_ReadAlarmMonth (BEGIN)
                                           ; SOURCE LINE # 1310
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1313
0000 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+07H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1314
0005         ?C0050:
0005 22                RET     
             ; FUNCTION RTC_ReadAlarmMonth (END)

             ; FUNCTION RTC_ReadAlarmYear (BEGIN)
                                           ; SOURCE LINE # 1334
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1337
0000 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+08H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 1338
0008         ?C0051:
0008 22                RET     
             ; FUNCTION RTC_ReadAlarmYear (END)

             ; FUNCTION RTC_ReadAlarmDayOfWeek (BEGIN)
                                           ; SOURCE LINE # 1359
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1362
0000 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+03H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1363
0005         ?C0052:
0005 22                RET     
             ; FUNCTION RTC_ReadAlarmDayOfWeek (END)

             ; FUNCTION RTC_ReadAlarmDayOfYear (BEGIN)
                                           ; SOURCE LINE # 1384
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 59  

                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1387
0000 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+05H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 1388
0008         ?C0053:
0008 22                RET     
             ; FUNCTION RTC_ReadAlarmDayOfYear (END)

             ; FUNCTION _RTC_WriteAlarmMask (BEGIN)
                                           ; SOURCE LINE # 1413
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1414
                                           ; SOURCE LINE # 1415
0005 900000      R     MOV     DPTR,#mask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_alarmCfgMask
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1416
000F         ?C0054:
000F 22                RET     
             ; FUNCTION _RTC_WriteAlarmMask (END)

             ; FUNCTION _RTC_WriteIntervalMask (BEGIN)
                                           ; SOURCE LINE # 1441
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1442
                                           ; SOURCE LINE # 1443
0005 900000      R     MOV     DPTR,#mask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#RTC_intervalCfgMask
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1444
000F         ?C0055:
000F 22                RET     
             ; FUNCTION _RTC_WriteIntervalMask (END)

             ; FUNCTION RTC_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1472
                                           ; SOURCE LINE # 1473
                                           ; SOURCE LINE # 1477
0000 900000      R     MOV     DPTR,#RTC_statusDateTime
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#status
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1480
000A 900000      R     MOV     DPTR,#RTC_statusDateTime
000D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 60  

000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 54F7              ANL     A,#0F7H
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#RTC_statusDateTime
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1482
0018 900000      R     MOV     DPTR,#status
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 1483
001D         ?C0056:
001D 22                RET     
             ; FUNCTION RTC_ReadStatus (END)

             ; FUNCTION _RTC_DayOfWeek (BEGIN)
                                           ; SOURCE LINE # 1502
0000 900000      R     MOV     DPTR,#dayOfMonth
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#month
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#year
000D EA                MOV     A,R2
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EB                MOV     A,R3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1504
                                           ; SOURCE LINE # 1512
0012 900000      R     MOV     DPTR,#month
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 C3                CLR     C
0019 9403              SUBB    A,#03H
001B 500B              JNC     ?C0057
                                           ; SOURCE LINE # 1513
                                           ; SOURCE LINE # 1514
001D 900000      R     MOV     DPTR,#year
0020 74FF              MOV     A,#0FFH
0022 75F0FF            MOV     B,#0FFH
0025 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1515
0028         ?C0057:
                                           ; SOURCE LINE # 1519
0028 900000      R     MOV     DPTR,#year
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 7C00              MOV     R4,#00H
0032 7D64              MOV     R5,#064H
0034 120000      E     LCALL   ?C?UIDIV
0037 AC06              MOV     R4,AR6
0039 AD07              MOV     R5,AR7
003B 900000      R     MOV     DPTR,#year
003E E0                MOVX    A,@DPTR
003F FE                MOV     R6,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 61  

0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 7802              MOV     R0,#02H
0046         ?C0124:
0046 CE                XCH     A,R6
0047 C3                CLR     C
0048 13                RRC     A
0049 CE                XCH     A,R6
004A 13                RRC     A
004B D8F9              DJNZ    R0,?C0124
004D FF                MOV     R7,A
004E C3                CLR     C
004F EF                MOV     A,R7
0050 9D                SUBB    A,R5
0051 FB                MOV     R3,A
0052 EE                MOV     A,R6
0053 9C                SUBB    A,R4
0054 FA                MOV     R2,A
0055 900000      R     MOV     DPTR,#year
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7C01              MOV     R4,#01H
005F 7D90              MOV     R5,#090H
0061 120000      E     LCALL   ?C?UIDIV
0064 EF                MOV     A,R7
0065 2B                ADD     A,R3
0066 FF                MOV     R7,A
0067 EE                MOV     A,R6
0068 3A                ADDC    A,R2
0069 FE                MOV     R6,A
006A 900000      R     MOV     DPTR,#year
006D E0                MOVX    A,@DPTR
006E FC                MOV     R4,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 EF                MOV     A,R7
0073 2D                ADD     A,R5
0074 FF                MOV     R7,A
0075 EE                MOV     A,R6
0076 3C                ADDC    A,R4
0077 FE                MOV     R6,A
0078 900000      R     MOV     DPTR,#month
007B E0                MOVX    A,@DPTR
007C FD                MOV     R5,A
007D ED                MOV     A,R5
007E 900000      R     MOV     DPTR,#RTC_monthTemplate-01H
0081 93                MOVC    A,@A+DPTR
0082 FD                MOV     R5,A
0083 7C00              MOV     R4,#00H
0085 900000      R     MOV     DPTR,#dayOfMonth
0088 E0                MOVX    A,@DPTR
0089 FB                MOV     R3,A
008A 7A00              MOV     R2,#00H
008C ED                MOV     A,R5
008D 2B                ADD     A,R3
008E FD                MOV     R5,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 62  

008F EC                MOV     A,R4
0090 3A                ADDC    A,R2
0091 FC                MOV     R4,A
0092 EF                MOV     A,R7
0093 2D                ADD     A,R5
0094 FF                MOV     R7,A
0095 EE                MOV     A,R6
0096 3C                ADDC    A,R4
0097 FE                MOV     R6,A
0098 7C00              MOV     R4,#00H
009A 7D07              MOV     R5,#07H
009C 120000      E     LCALL   ?C?UIDIV
009F AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 1520
00A1         ?C0058:
00A1 22                RET     
             ; FUNCTION _RTC_DayOfWeek (END)

             ; FUNCTION RTC_SetInitValues (BEGIN)
                                           ; SOURCE LINE # 1560
                                           ; SOURCE LINE # 1561
                                           ; SOURCE LINE # 1566
0000 900000      R     MOV     DPTR,#RTC_currentTimeDate+05H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1569
0008 900000      R     MOV     DPTR,#RTC_currentTimeDate+04H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 7E00              MOV     R6,#00H
000F 900000      R     MOV     DPTR,#RTC_currentTimeDate+05H
0012 EE                MOV     A,R6
0013 8FF0              MOV     B,R7
0015 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1572
0018 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 7C01              MOV     R4,#01H
0022 7D90              MOV     R5,#090H
0024 120000      E     LCALL   ?C?UIDIV
0027 ED                MOV     A,R5
0028 4C                ORL     A,R4
0029 6025              JZ      ?C0062
002B 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
002E E0                MOVX    A,@DPTR
002F FE                MOV     R6,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 7E00              MOV     R6,#00H
0035 EF                MOV     A,R7
0036 5403              ANL     A,#03H
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 4E                ORL     A,R6
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 63  

003B 7017              JNZ     ?C0060
003D 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 7C00              MOV     R4,#00H
0047 7D64              MOV     R5,#064H
0049 120000      E     LCALL   ?C?UIDIV
004C ED                MOV     A,R5
004D 4C                ORL     A,R4
004E 6004              JZ      ?C0060
0050         ?C0062:
0050 7F01              MOV     R7,#01H
0052 8002              SJMP    ?C0061
0054         ?C0060:
0054 7F00              MOV     R7,#00H
0056         ?C0061:
0056 EF                MOV     A,R7
0057 B40110            CJNE    A,#01H,?C0059
                                           ; SOURCE LINE # 1573
                                           ; SOURCE LINE # 1575
005A 900000      R     MOV     DPTR,#RTC_statusDateTime
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 4402              ORL     A,#02H
0062 FF                MOV     R7,A
0063 900000      R     MOV     DPTR,#RTC_statusDateTime
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1576
0068 800E              SJMP    ?C0063
006A         ?C0059:
                                           ; SOURCE LINE # 1578
                                           ; SOURCE LINE # 1580
006A 900000      R     MOV     DPTR,#RTC_statusDateTime
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 54FD              ANL     A,#0FDH
0072 FF                MOV     R7,A
0073 900000      R     MOV     DPTR,#RTC_statusDateTime
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1581
0078         ?C0063:
                                           ; SOURCE LINE # 1584
0078 900000      R     MOV     DPTR,#i
007B E4                CLR     A
007C F0                MOVX    @DPTR,A
007D         ?C0064:
007D 900000      R     MOV     DPTR,#RTC_currentTimeDate+07H
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 7E00              MOV     R6,#00H
0084 EF                MOV     A,R7
0085 24FF              ADD     A,#0FFH
0087 FF                MOV     R7,A
0088 EE                MOV     A,R6
0089 34FF              ADDC    A,#0FFH
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 64  

008B FE                MOV     R6,A
008C 900000      R     MOV     DPTR,#i
008F E0                MOVX    A,@DPTR
0090 FD                MOV     R5,A
0091 7C00              MOV     R4,#00H
0093 C3                CLR     C
0094 ED                MOV     A,R5
0095 9F                SUBB    A,R7
0096 EC                MOV     A,R4
0097 9E                SUBB    A,R6
0098 501E              JNC     ?C0065
                                           ; SOURCE LINE # 1585
                                           ; SOURCE LINE # 1587
009A 900000      R     MOV     DPTR,#i
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F EF                MOV     A,R7
00A0 900000      R     MOV     DPTR,#RTC_daysInMonths
00A3 93                MOVC    A,@A+DPTR
00A4 FF                MOV     R7,A
00A5 7E00              MOV     R6,#00H
00A7 900000      R     MOV     DPTR,#RTC_currentTimeDate+05H
00AA EE                MOV     A,R6
00AB 8FF0              MOV     B,R7
00AD 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1588
00B0         ?C0066:
00B0 900000      R     MOV     DPTR,#i
00B3 E0                MOVX    A,@DPTR
00B4 04                INC     A
00B5 F0                MOVX    @DPTR,A
00B6 80C5              SJMP    ?C0064
00B8         ?C0065:
                                           ; SOURCE LINE # 1591
00B8 900000      R     MOV     DPTR,#RTC_statusDateTime
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
00BD EF                MOV     A,R7
00BE 5402              ANL     A,#02H
00C0 FF                MOV     R7,A
00C1 7E00              MOV     R6,#00H
00C3 EF                MOV     A,R7
00C4 6402              XRL     A,#02H
00C6 4E                ORL     A,R6
00C7 7004              JNZ     ?C0068
00C9 7F01              MOV     R7,#01H
00CB 8002              SJMP    ?C0069
00CD         ?C0068:
00CD 7F00              MOV     R7,#00H
00CF         ?C0069:
00CF EF                MOV     A,R7
00D0 6015              JZ      ?C0067
                                           ; SOURCE LINE # 1592
                                           ; SOURCE LINE # 1594
00D2 900000      R     MOV     DPTR,#RTC_currentTimeDate+07H
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 D3                SETB    C
00D9 9402              SUBB    A,#02H
00DB 400A              JC      ?C0067
                                           ; SOURCE LINE # 1595
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 65  

                                           ; SOURCE LINE # 1597
00DD 900000      R     MOV     DPTR,#RTC_currentTimeDate+05H
00E0 E4                CLR     A
00E1 75F001            MOV     B,#01H
00E4 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1598
00E7         ?C0070:
                                           ; SOURCE LINE # 1599
00E7         ?C0067:
                                           ; SOURCE LINE # 1602
00E7 900000      R     MOV     DPTR,#RTC_currentTimeDate+04H
00EA E0                MOVX    A,@DPTR
00EB FF                MOV     R7,A
00EC 900000      R     MOV     DPTR,#RTC_currentTimeDate+07H
00EF E0                MOVX    A,@DPTR
00F0 FD                MOV     R5,A
00F1 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
00F4 E0                MOVX    A,@DPTR
00F5 FA                MOV     R2,A
00F6 A3                INC     DPTR
00F7 E0                MOVX    A,@DPTR
00F8 FB                MOV     R3,A
00F9 120000      R     LCALL   _RTC_DayOfWeek
00FC EF                MOV     A,R7
00FD 04                INC     A
00FE FF                MOV     R7,A
00FF 900000      R     MOV     DPTR,#RTC_currentTimeDate+03H
0102 EF                MOV     A,R7
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1607
0104 900000      R     MOV     DPTR,#RTC_currentTimeDate+03H
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 EF                MOV     A,R7
010A D3                SETB    C
010B 9400              SUBB    A,#00H
010D 4009              JC      ?C0071
                                           ; SOURCE LINE # 1608
                                           ; SOURCE LINE # 1609
010F 900000      R     MOV     DPTR,#RTC_currentTimeDate+03H
0112 E0                MOVX    A,@DPTR
0113 2400              ADD     A,#00H
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1610
0116 8013              SJMP    ?C0072
0118         ?C0071:
                                           ; SOURCE LINE # 1612
                                           ; SOURCE LINE # 1613
0118 900000      R     MOV     DPTR,#RTC_currentTimeDate+03H
011B E0                MOVX    A,@DPTR
011C FF                MOV     R7,A
011D EF                MOV     A,R7
011E F4                CPL     A
011F 04                INC     A
0120 FF                MOV     R7,A
0121 C3                CLR     C
0122 7407              MOV     A,#07H
0124 9F                SUBB    A,R7
0125 FF                MOV     R7,A
0126 900000      R     MOV     DPTR,#RTC_currentTimeDate+03H
0129 EF                MOV     A,R7
012A F0                MOVX    @DPTR,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 66  

                                           ; SOURCE LINE # 1615
012B         ?C0072:
                                           ; SOURCE LINE # 1919
012B 900000      R     MOV     DPTR,#RTC_currentTimeDate+02H
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 EF                MOV     A,R7
0131 C3                CLR     C
0132 940C              SUBB    A,#0CH
0134 5010              JNC     ?C0073
                                           ; SOURCE LINE # 1920
                                           ; SOURCE LINE # 1922
0136 900000      R     MOV     DPTR,#RTC_statusDateTime
0139 E0                MOVX    A,@DPTR
013A FF                MOV     R7,A
013B EF                MOV     A,R7
013C 54FB              ANL     A,#0FBH
013E FF                MOV     R7,A
013F 900000      R     MOV     DPTR,#RTC_statusDateTime
0142 EF                MOV     A,R7
0143 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1923
0144 800E              SJMP    ?C0074
0146         ?C0073:
                                           ; SOURCE LINE # 1925
                                           ; SOURCE LINE # 1927
0146 900000      R     MOV     DPTR,#RTC_statusDateTime
0149 E0                MOVX    A,@DPTR
014A FF                MOV     R7,A
014B EF                MOV     A,R7
014C 4404              ORL     A,#04H
014E FF                MOV     R7,A
014F 900000      R     MOV     DPTR,#RTC_statusDateTime
0152 EF                MOV     A,R7
0153 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1928
0154         ?C0074:
                                           ; SOURCE LINE # 1933
0154 900000      R     MOV     DPTR,#RTC_alarmCfgMask
0157 E0                MOVX    A,@DPTR
0158 FF                MOV     R7,A
0159 EF                MOV     A,R7
015A 5401              ANL     A,#01H
015C FF                MOV     R7,A
015D 7E00              MOV     R6,#00H
015F EF                MOV     A,R7
0160 6401              XRL     A,#01H
0162 4E                ORL     A,R6
0163 7004              JNZ     ?C0076
0165 7F01              MOV     R7,#01H
0167 8002              SJMP    ?C0077
0169         ?C0076:
0169 7F00              MOV     R7,#00H
016B         ?C0077:
016B EF                MOV     A,R7
016C 602C              JZ      ?C0075
                                           ; SOURCE LINE # 1934
                                           ; SOURCE LINE # 1935
016E 900000      R     MOV     DPTR,#RTC_currentTimeDate
0171 E0                MOVX    A,@DPTR
0172 FF                MOV     R7,A
0173 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 67  

0176 E0                MOVX    A,@DPTR
0177 FE                MOV     R6,A
0178 EE                MOV     A,R6
0179 B50710            CJNE    A,AR7,?C0078
                                           ; SOURCE LINE # 1936
                                           ; SOURCE LINE # 1938
017C 900000      R     MOV     DPTR,#RTC_alarmCurStatus
017F E0                MOVX    A,@DPTR
0180 FF                MOV     R7,A
0181 EF                MOV     A,R7
0182 4401              ORL     A,#01H
0184 FF                MOV     R7,A
0185 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0188 EF                MOV     A,R7
0189 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1939
018A 800E              SJMP    ?C0075
018C         ?C0078:
                                           ; SOURCE LINE # 1941
                                           ; SOURCE LINE # 1943
018C 900000      R     MOV     DPTR,#RTC_alarmCurStatus
018F E0                MOVX    A,@DPTR
0190 FF                MOV     R7,A
0191 EF                MOV     A,R7
0192 54FE              ANL     A,#0FEH
0194 FF                MOV     R7,A
0195 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0198 EF                MOV     A,R7
0199 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1944
019A         ?C0079:
                                           ; SOURCE LINE # 1945
019A         ?C0075:
                                           ; SOURCE LINE # 1948
019A 900000      R     MOV     DPTR,#RTC_alarmCfgMask
019D E0                MOVX    A,@DPTR
019E FF                MOV     R7,A
019F EF                MOV     A,R7
01A0 5402              ANL     A,#02H
01A2 FF                MOV     R7,A
01A3 7E00              MOV     R6,#00H
01A5 EF                MOV     A,R7
01A6 6402              XRL     A,#02H
01A8 4E                ORL     A,R6
01A9 7004              JNZ     ?C0081
01AB 7F01              MOV     R7,#01H
01AD 8002              SJMP    ?C0082
01AF         ?C0081:
01AF 7F00              MOV     R7,#00H
01B1         ?C0082:
01B1 EF                MOV     A,R7
01B2 602C              JZ      ?C0080
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
01B4 900000      R     MOV     DPTR,#RTC_currentTimeDate+01H
01B7 E0                MOVX    A,@DPTR
01B8 FF                MOV     R7,A
01B9 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+01H
01BC E0                MOVX    A,@DPTR
01BD FE                MOV     R6,A
01BE EE                MOV     A,R6
01BF B50710            CJNE    A,AR7,?C0083
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 68  

                                           ; SOURCE LINE # 1951
                                           ; SOURCE LINE # 1953
01C2 900000      R     MOV     DPTR,#RTC_alarmCurStatus
01C5 E0                MOVX    A,@DPTR
01C6 FF                MOV     R7,A
01C7 EF                MOV     A,R7
01C8 4402              ORL     A,#02H
01CA FF                MOV     R7,A
01CB 900000      R     MOV     DPTR,#RTC_alarmCurStatus
01CE EF                MOV     A,R7
01CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1954
01D0 800E              SJMP    ?C0080
01D2         ?C0083:
                                           ; SOURCE LINE # 1956
                                           ; SOURCE LINE # 1958
01D2 900000      R     MOV     DPTR,#RTC_alarmCurStatus
01D5 E0                MOVX    A,@DPTR
01D6 FF                MOV     R7,A
01D7 EF                MOV     A,R7
01D8 54FD              ANL     A,#0FDH
01DA FF                MOV     R7,A
01DB 900000      R     MOV     DPTR,#RTC_alarmCurStatus
01DE EF                MOV     A,R7
01DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1959
01E0         ?C0084:
                                           ; SOURCE LINE # 1960
01E0         ?C0080:
                                           ; SOURCE LINE # 1963
01E0 900000      R     MOV     DPTR,#RTC_alarmCfgMask
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
01E5 EF                MOV     A,R7
01E6 5404              ANL     A,#04H
01E8 FF                MOV     R7,A
01E9 7E00              MOV     R6,#00H
01EB EF                MOV     A,R7
01EC 6404              XRL     A,#04H
01EE 4E                ORL     A,R6
01EF 7004              JNZ     ?C0086
01F1 7F01              MOV     R7,#01H
01F3 8002              SJMP    ?C0087
01F5         ?C0086:
01F5 7F00              MOV     R7,#00H
01F7         ?C0087:
01F7 EF                MOV     A,R7
01F8 602C              JZ      ?C0085
                                           ; SOURCE LINE # 1964
                                           ; SOURCE LINE # 1965
01FA 900000      R     MOV     DPTR,#RTC_currentTimeDate+02H
01FD E0                MOVX    A,@DPTR
01FE FF                MOV     R7,A
01FF 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+02H
0202 E0                MOVX    A,@DPTR
0203 FE                MOV     R6,A
0204 EE                MOV     A,R6
0205 B50710            CJNE    A,AR7,?C0088
                                           ; SOURCE LINE # 1966
                                           ; SOURCE LINE # 1968
0208 900000      R     MOV     DPTR,#RTC_alarmCurStatus
020B E0                MOVX    A,@DPTR
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 69  

020C FF                MOV     R7,A
020D EF                MOV     A,R7
020E 4404              ORL     A,#04H
0210 FF                MOV     R7,A
0211 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0214 EF                MOV     A,R7
0215 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1969
0216 800E              SJMP    ?C0085
0218         ?C0088:
                                           ; SOURCE LINE # 1971
                                           ; SOURCE LINE # 1973
0218 900000      R     MOV     DPTR,#RTC_alarmCurStatus
021B E0                MOVX    A,@DPTR
021C FF                MOV     R7,A
021D EF                MOV     A,R7
021E 54FB              ANL     A,#0FBH
0220 FF                MOV     R7,A
0221 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0224 EF                MOV     A,R7
0225 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1974
0226         ?C0089:
                                           ; SOURCE LINE # 1975
0226         ?C0085:
                                           ; SOURCE LINE # 1978
0226 900000      R     MOV     DPTR,#RTC_alarmCfgMask
0229 E0                MOVX    A,@DPTR
022A FF                MOV     R7,A
022B EF                MOV     A,R7
022C 5408              ANL     A,#08H
022E FF                MOV     R7,A
022F 7E00              MOV     R6,#00H
0231 EF                MOV     A,R7
0232 6408              XRL     A,#08H
0234 4E                ORL     A,R6
0235 7004              JNZ     ?C0091
0237 7F01              MOV     R7,#01H
0239 8002              SJMP    ?C0092
023B         ?C0091:
023B 7F00              MOV     R7,#00H
023D         ?C0092:
023D EF                MOV     A,R7
023E 602C              JZ      ?C0090
                                           ; SOURCE LINE # 1979
                                           ; SOURCE LINE # 1980
0240 900000      R     MOV     DPTR,#RTC_currentTimeDate+03H
0243 E0                MOVX    A,@DPTR
0244 FF                MOV     R7,A
0245 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+03H
0248 E0                MOVX    A,@DPTR
0249 FE                MOV     R6,A
024A EE                MOV     A,R6
024B B50710            CJNE    A,AR7,?C0093
                                           ; SOURCE LINE # 1981
                                           ; SOURCE LINE # 1983
024E 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0251 E0                MOVX    A,@DPTR
0252 FF                MOV     R7,A
0253 EF                MOV     A,R7
0254 4408              ORL     A,#08H
0256 FF                MOV     R7,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 70  

0257 900000      R     MOV     DPTR,#RTC_alarmCurStatus
025A EF                MOV     A,R7
025B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1984
025C 800E              SJMP    ?C0090
025E         ?C0093:
                                           ; SOURCE LINE # 1986
                                           ; SOURCE LINE # 1988
025E 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0261 E0                MOVX    A,@DPTR
0262 FF                MOV     R7,A
0263 EF                MOV     A,R7
0264 54F7              ANL     A,#0F7H
0266 FF                MOV     R7,A
0267 900000      R     MOV     DPTR,#RTC_alarmCurStatus
026A EF                MOV     A,R7
026B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1989
026C         ?C0094:
                                           ; SOURCE LINE # 1990
026C         ?C0090:
                                           ; SOURCE LINE # 1993
026C 900000      R     MOV     DPTR,#RTC_alarmCfgMask
026F E0                MOVX    A,@DPTR
0270 FF                MOV     R7,A
0271 EF                MOV     A,R7
0272 5420              ANL     A,#020H
0274 FF                MOV     R7,A
0275 7E00              MOV     R6,#00H
0277 EF                MOV     A,R7
0278 6420              XRL     A,#020H
027A 4E                ORL     A,R6
027B 7004              JNZ     ?C0096
027D 7F01              MOV     R7,#01H
027F 8002              SJMP    ?C0097
0281         ?C0096:
0281 7F00              MOV     R7,#00H
0283         ?C0097:
0283 EF                MOV     A,R7
0284 6036              JZ      ?C0095
                                           ; SOURCE LINE # 1994
                                           ; SOURCE LINE # 1995
0286 900000      R     MOV     DPTR,#RTC_currentTimeDate+05H
0289 E0                MOVX    A,@DPTR
028A FE                MOV     R6,A
028B A3                INC     DPTR
028C E0                MOVX    A,@DPTR
028D FF                MOV     R7,A
028E 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+05H
0291 E0                MOVX    A,@DPTR
0292 FC                MOV     R4,A
0293 A3                INC     DPTR
0294 E0                MOVX    A,@DPTR
0295 FD                MOV     R5,A
0296 ED                MOV     A,R5
0297 B50714            CJNE    A,AR7,?C0098
029A EC                MOV     A,R4
029B B50610            CJNE    A,AR6,?C0098
                                           ; SOURCE LINE # 1996
                                           ; SOURCE LINE # 1998
029E 900000      R     MOV     DPTR,#RTC_alarmCurStatus
02A1 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 71  

02A2 FF                MOV     R7,A
02A3 EF                MOV     A,R7
02A4 4420              ORL     A,#020H
02A6 FF                MOV     R7,A
02A7 900000      R     MOV     DPTR,#RTC_alarmCurStatus
02AA EF                MOV     A,R7
02AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1999
02AC 800E              SJMP    ?C0095
02AE         ?C0098:
                                           ; SOURCE LINE # 2001
                                           ; SOURCE LINE # 2003
02AE 900000      R     MOV     DPTR,#RTC_alarmCurStatus
02B1 E0                MOVX    A,@DPTR
02B2 FF                MOV     R7,A
02B3 EF                MOV     A,R7
02B4 54DF              ANL     A,#0DFH
02B6 FF                MOV     R7,A
02B7 900000      R     MOV     DPTR,#RTC_alarmCurStatus
02BA EF                MOV     A,R7
02BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2004
02BC         ?C0099:
                                           ; SOURCE LINE # 2005
02BC         ?C0095:
                                           ; SOURCE LINE # 2008
02BC 900000      R     MOV     DPTR,#RTC_alarmCfgMask
02BF E0                MOVX    A,@DPTR
02C0 FF                MOV     R7,A
02C1 EF                MOV     A,R7
02C2 5410              ANL     A,#010H
02C4 FF                MOV     R7,A
02C5 7E00              MOV     R6,#00H
02C7 EF                MOV     A,R7
02C8 6410              XRL     A,#010H
02CA 4E                ORL     A,R6
02CB 7004              JNZ     ?C0101
02CD 7F01              MOV     R7,#01H
02CF 8002              SJMP    ?C0102
02D1         ?C0101:
02D1 7F00              MOV     R7,#00H
02D3         ?C0102:
02D3 EF                MOV     A,R7
02D4 602C              JZ      ?C0100
                                           ; SOURCE LINE # 2009
                                           ; SOURCE LINE # 2010
02D6 900000      R     MOV     DPTR,#RTC_currentTimeDate+04H
02D9 E0                MOVX    A,@DPTR
02DA FF                MOV     R7,A
02DB 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+04H
02DE E0                MOVX    A,@DPTR
02DF FE                MOV     R6,A
02E0 EE                MOV     A,R6
02E1 B50710            CJNE    A,AR7,?C0103
                                           ; SOURCE LINE # 2011
                                           ; SOURCE LINE # 2013
02E4 900000      R     MOV     DPTR,#RTC_alarmCurStatus
02E7 E0                MOVX    A,@DPTR
02E8 FF                MOV     R7,A
02E9 EF                MOV     A,R7
02EA 4410              ORL     A,#010H
02EC FF                MOV     R7,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 72  

02ED 900000      R     MOV     DPTR,#RTC_alarmCurStatus
02F0 EF                MOV     A,R7
02F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2014
02F2 800E              SJMP    ?C0100
02F4         ?C0103:
                                           ; SOURCE LINE # 2016
                                           ; SOURCE LINE # 2018
02F4 900000      R     MOV     DPTR,#RTC_alarmCurStatus
02F7 E0                MOVX    A,@DPTR
02F8 FF                MOV     R7,A
02F9 EF                MOV     A,R7
02FA 54EF              ANL     A,#0EFH
02FC FF                MOV     R7,A
02FD 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0300 EF                MOV     A,R7
0301 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2019
0302         ?C0104:
                                           ; SOURCE LINE # 2020
0302         ?C0100:
                                           ; SOURCE LINE # 2023
0302 900000      R     MOV     DPTR,#RTC_alarmCfgMask
0305 E0                MOVX    A,@DPTR
0306 FF                MOV     R7,A
0307 EF                MOV     A,R7
0308 5440              ANL     A,#040H
030A FF                MOV     R7,A
030B 7E00              MOV     R6,#00H
030D EF                MOV     A,R7
030E 6440              XRL     A,#040H
0310 4E                ORL     A,R6
0311 7004              JNZ     ?C0106
0313 7F01              MOV     R7,#01H
0315 8002              SJMP    ?C0107
0317         ?C0106:
0317 7F00              MOV     R7,#00H
0319         ?C0107:
0319 EF                MOV     A,R7
031A 602C              JZ      ?C0105
                                           ; SOURCE LINE # 2024
                                           ; SOURCE LINE # 2025
031C 900000      R     MOV     DPTR,#RTC_currentTimeDate+07H
031F E0                MOVX    A,@DPTR
0320 FF                MOV     R7,A
0321 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+07H
0324 E0                MOVX    A,@DPTR
0325 FE                MOV     R6,A
0326 EE                MOV     A,R6
0327 B50710            CJNE    A,AR7,?C0108
                                           ; SOURCE LINE # 2026
                                           ; SOURCE LINE # 2028
032A 900000      R     MOV     DPTR,#RTC_alarmCurStatus
032D E0                MOVX    A,@DPTR
032E FF                MOV     R7,A
032F EF                MOV     A,R7
0330 4440              ORL     A,#040H
0332 FF                MOV     R7,A
0333 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0336 EF                MOV     A,R7
0337 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2029
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 73  

0338 800E              SJMP    ?C0105
033A         ?C0108:
                                           ; SOURCE LINE # 2031
                                           ; SOURCE LINE # 2033
033A 900000      R     MOV     DPTR,#RTC_alarmCurStatus
033D E0                MOVX    A,@DPTR
033E FF                MOV     R7,A
033F EF                MOV     A,R7
0340 54BF              ANL     A,#0BFH
0342 FF                MOV     R7,A
0343 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0346 EF                MOV     A,R7
0347 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2034
0348         ?C0109:
                                           ; SOURCE LINE # 2035
0348         ?C0105:
                                           ; SOURCE LINE # 2038
0348 900000      R     MOV     DPTR,#RTC_alarmCfgMask
034B E0                MOVX    A,@DPTR
034C FF                MOV     R7,A
034D EF                MOV     A,R7
034E 5480              ANL     A,#080H
0350 FF                MOV     R7,A
0351 7E00              MOV     R6,#00H
0353 EF                MOV     A,R7
0354 6480              XRL     A,#080H
0356 4E                ORL     A,R6
0357 7004              JNZ     ?C0111
0359 7F01              MOV     R7,#01H
035B 8002              SJMP    ?C0112
035D         ?C0111:
035D 7F00              MOV     R7,#00H
035F         ?C0112:
035F EF                MOV     A,R7
0360 6036              JZ      ?C0110
                                           ; SOURCE LINE # 2039
                                           ; SOURCE LINE # 2040
0362 900000      R     MOV     DPTR,#RTC_currentTimeDate+08H
0365 E0                MOVX    A,@DPTR
0366 FE                MOV     R6,A
0367 A3                INC     DPTR
0368 E0                MOVX    A,@DPTR
0369 FF                MOV     R7,A
036A 900000      R     MOV     DPTR,#RTC_alarmCfgTimeDate+08H
036D E0                MOVX    A,@DPTR
036E FC                MOV     R4,A
036F A3                INC     DPTR
0370 E0                MOVX    A,@DPTR
0371 FD                MOV     R5,A
0372 ED                MOV     A,R5
0373 B50714            CJNE    A,AR7,?C0113
0376 EC                MOV     A,R4
0377 B50610            CJNE    A,AR6,?C0113
                                           ; SOURCE LINE # 2041
                                           ; SOURCE LINE # 2043
037A 900000      R     MOV     DPTR,#RTC_alarmCurStatus
037D E0                MOVX    A,@DPTR
037E FF                MOV     R7,A
037F EF                MOV     A,R7
0380 4480              ORL     A,#080H
0382 FF                MOV     R7,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 74  

0383 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0386 EF                MOV     A,R7
0387 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2044
0388 800E              SJMP    ?C0110
038A         ?C0113:
                                           ; SOURCE LINE # 2046
                                           ; SOURCE LINE # 2048
038A 900000      R     MOV     DPTR,#RTC_alarmCurStatus
038D E0                MOVX    A,@DPTR
038E FF                MOV     R7,A
038F EF                MOV     A,R7
0390 547F              ANL     A,#07FH
0392 FF                MOV     R7,A
0393 900000      R     MOV     DPTR,#RTC_alarmCurStatus
0396 EF                MOV     A,R7
0397 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2049
0398         ?C0114:
                                           ; SOURCE LINE # 2050
0398         ?C0110:
                                           ; SOURCE LINE # 2052
0398 900000      R     MOV     DPTR,#RTC_alarmCfgMask
039B E0                MOVX    A,@DPTR
039C FF                MOV     R7,A
039D 900000      R     MOV     DPTR,#RTC_alarmCfgMaskTemp
03A0 EF                MOV     A,R7
03A1 F0                MOVX    @DPTR,A
03A2         ?C0117:
                                           ; SOURCE LINE # 2056
03A2 900000      R     MOV     DPTR,#RTC_alarmCfgMaskTemp
03A5 E0                MOVX    A,@DPTR
03A6 FF                MOV     R7,A
03A7 EF                MOV     A,R7
03A8 6032              JZ      ?C0121
03AA 900000      R     MOV     DPTR,#RTC_alarmCfgMaskTemp
03AD E0                MOVX    A,@DPTR
03AE FF                MOV     R7,A
03AF 900000      R     MOV     DPTR,#RTC_alarmCurStatus
03B2 E0                MOVX    A,@DPTR
03B3 FE                MOV     R6,A
03B4 EE                MOV     A,R6
03B5 5F                ANL     A,R7
03B6 FF                MOV     R7,A
03B7 900000      R     MOV     DPTR,#RTC_alarmCfgMaskTemp
03BA E0                MOVX    A,@DPTR
03BB FE                MOV     R6,A
03BC EF                MOV     A,R7
03BD B50604            CJNE    A,AR6,?C0119
03C0 7F01              MOV     R7,#01H
03C2 8002              SJMP    ?C0120
03C4         ?C0119:
03C4 7F00              MOV     R7,#00H
03C6         ?C0120:
03C6 EF                MOV     A,R7
03C7 6013              JZ      ?C0121
03C9 900000      R     MOV     DPTR,#RTC_statusDateTime
03CC E0                MOVX    A,@DPTR
03CD FF                MOV     R7,A
03CE EF                MOV     A,R7
03CF 4408              ORL     A,#08H
03D1 FF                MOV     R7,A
C51 COMPILER V9.51   RTC                                                                   05/07/2014 04:36:02 PAGE 75  

03D2 900000      R     MOV     DPTR,#RTC_statusDateTime
03D5 EF                MOV     A,R7
03D6 F0                MOVX    @DPTR,A
03D7 900000      R     MOV     DPTR,#RTC_alarmCurStatus
03DA E4                CLR     A
03DB F0                MOVX    @DPTR,A
03DC         ?C0118:
03DC         ?C0115:
03DC         ?C0116:
                                           ; SOURCE LINE # 2057
03DC         ?C0121:
03DC 22                RET     
             ; FUNCTION RTC_SetInitValues (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2205    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =     56    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
