C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TAKESAMPLE_IRQ
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\TakeSample_IRQ.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\TakeSample_IRQ.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\TakeSample_IRQ.
                    -lst) CD DB NOIP OT(0,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\TakeSample_IRQ
                    -.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: TakeSample_IRQ.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include <cydevice_trm.h>
  19          #include <CyLib.h>
  20          #include <TakeSample_IRQ.h>
  21          
  22          #if !defined(TakeSample_IRQ__REMOVED) /* Check for removal by optimization */
  23          
  24          /*******************************************************************************
  25          *  Place your includes, defines and code here 
  26          ********************************************************************************/
  27          /* `#START TakeSample_IRQ_intc` */
  28          #include "project.h"
  29          #include "EmEEPROM_Access.h"
  30          /* `#END` */
  31          
  32          
  33          /*******************************************************************************
  34          * Function Name: TakeSample_IRQ_Start
  35          ********************************************************************************
  36          *
  37          * Summary:
  38          *  Set up the interrupt and enable it.
  39          *
  40          * Parameters:  
  41          *   None
  42          *
  43          * Return:
  44          *   None
  45          *
  46          *******************************************************************************/
  47          void TakeSample_IRQ_Start(void) 
  48          {
  49   1          /* For all we know the interrupt is active. */
  50   1          TakeSample_IRQ_Disable();
  51   1      
  52   1          /* Set the ISR to point to the TakeSample_IRQ Interrupt. */
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 2   

  53   1          TakeSample_IRQ_SetVector(&TakeSample_IRQ_Interrupt);
  54   1      
  55   1          /* Set the priority. */
  56   1          TakeSample_IRQ_SetPriority((uint8)TakeSample_IRQ_INTC_PRIOR_NUMBER);
  57   1      
  58   1          /* Enable it. */
  59   1          TakeSample_IRQ_Enable();
  60   1      }
  61          
  62          
  63          /*******************************************************************************
  64          * Function Name: TakeSample_IRQ_StartEx
  65          ********************************************************************************
  66          *
  67          * Summary:
  68          *  Set up the interrupt and enable it.
  69          *
  70          * Parameters:  
  71          *   address: Address of the ISR to set in the interrupt vector table.
  72          *
  73          * Return:
  74          *   None
  75          *
  76          *******************************************************************************/
  77          void TakeSample_IRQ_StartEx(cyisraddress address) 
  78          {
  79   1          /* For all we know the interrupt is active. */
  80   1          TakeSample_IRQ_Disable();
  81   1      
  82   1          /* Set the ISR to point to the TakeSample_IRQ Interrupt. */
  83   1          TakeSample_IRQ_SetVector(address);
  84   1      
  85   1          /* Set the priority. */
  86   1          TakeSample_IRQ_SetPriority((uint8)TakeSample_IRQ_INTC_PRIOR_NUMBER);
  87   1      
  88   1          /* Enable it. */
  89   1          TakeSample_IRQ_Enable();
  90   1      }
  91          
  92          
  93          /*******************************************************************************
  94          * Function Name: TakeSample_IRQ_Stop
  95          ********************************************************************************
  96          *
  97          * Summary:
  98          *   Disables and removes the interrupt.
  99          *
 100          * Parameters:  
 101          *   None
 102          *
 103          * Return:
 104          *   None
 105          *
 106          *******************************************************************************/
 107          void TakeSample_IRQ_Stop(void) 
 108          {
 109   1          /* Disable this interrupt. */
 110   1          TakeSample_IRQ_Disable();
 111   1      }
 112          
 113          
 114          /*******************************************************************************
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 3   

 115          * Function Name: TakeSample_IRQ_Interrupt
 116          ********************************************************************************
 117          * Summary:
 118          *   The default Interrupt Service Routine for TakeSample_IRQ.
 119          *
 120          *   Add custom code between the coments to keep the next version of this file
 121          *   from over writting your code.
 122          *
 123          * Parameters:  
 124          *   None
 125          *
 126          * Return:
 127          *   None
 128          *
 129          *******************************************************************************/
 130          CY_ISR(TakeSample_IRQ_Interrupt)
 131          {
 132   1          /*  Place your Interrupt code here. */
 133   1          /* `#START TakeSample_IRQ_Interrupt` */
 134   1          uint16 SampledData=0; 
 135   1          
 136   1          Em_EEPROM_Start(); 
 137   1          ADC_Start();
 138   1          
 139   1          /* ADC */
 140   1          SampledData = ADC_Read16(); /* Function Starts, Converts, Stops, and Returns from ADC */
 141   1          if (SampledData & 0x8000)
 142   1              {
 143   2              SampledData = 0;        /* Ignore negative ADC results */
 144   2              }
 145   1              else if (SampledData >= 0xfff)
 146   1              {
 147   2              SampledData = 0xfff;    /* Ignore high ADC results */
 148   2          }
 149   1          
 150   1          
 151   1          /* EEP */
 152   1          Em_EEPROM_Write(&SampledData,TailPtr,2u);
*** WARNING C182 IN LINE 152 OF .\Generated_Source\PSoC3\TakeSample_IRQ.c: pointer to different objects
 153   1          
 154   1          TailPtr = TailPtr + 2; 
 155   1      
 156   1          /* `#END` */
 157   1      
 158   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 159   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 160   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (TakeSample_IRQ__ES2_PATCH ))     
             - 
                          TakeSample_IRQ_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 163   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 164   1      }
 165          
 166          
 167          /*******************************************************************************
 168          * Function Name: TakeSample_IRQ_SetVector
 169          ********************************************************************************
 170          *
 171          * Summary:
 172          *   Change the ISR vector for the Interrupt. Note calling TakeSample_IRQ_Start
 173          *   will override any effect this method would have had. To set the vector 
 174          *   before the component has been started use TakeSample_IRQ_StartEx instead.
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 4   

 175          *
 176          * Parameters:
 177          *   address: Address of the ISR to set in the interrupt vector table.
 178          *
 179          * Return:
 180          *   None
 181          *
 182          *******************************************************************************/
 183          void TakeSample_IRQ_SetVector(cyisraddress address) 
 184          {
 185   1          CY_SET_REG16(TakeSample_IRQ_INTC_VECTOR, (uint16) address);
 186   1      }
 187          
 188          
 189          /*******************************************************************************
 190          * Function Name: TakeSample_IRQ_GetVector
 191          ********************************************************************************
 192          *
 193          * Summary:
 194          *   Gets the "address" of the current ISR vector for the Interrupt.
 195          *
 196          * Parameters:
 197          *   None
 198          *
 199          * Return:
 200          *   Address of the ISR in the interrupt vector table.
 201          *
 202          *******************************************************************************/
 203          cyisraddress TakeSample_IRQ_GetVector(void) 
 204          {
 205   1          return (cyisraddress) CY_GET_REG16(TakeSample_IRQ_INTC_VECTOR);
 206   1      }
 207          
 208          
 209          /*******************************************************************************
 210          * Function Name: TakeSample_IRQ_SetPriority
 211          ********************************************************************************
 212          *
 213          * Summary:
 214          *   Sets the Priority of the Interrupt. Note calling TakeSample_IRQ_Start
 215          *   or TakeSample_IRQ_StartEx will override any effect this method would 
 216          *   have had. This method should only be called after TakeSample_IRQ_Start or 
 217          *   TakeSample_IRQ_StartEx has been called. To set the initial
 218          *   priority for the component use the cydwr file in the tool.
 219          *
 220          * Parameters:
 221          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
 222          *
 223          * Return:
 224          *   None
 225          *
 226          *******************************************************************************/
 227          void TakeSample_IRQ_SetPriority(uint8 priority) 
 228          {
 229   1          *TakeSample_IRQ_INTC_PRIOR = priority << 5;
 230   1      }
 231          
 232          
 233          /*******************************************************************************
 234          * Function Name: TakeSample_IRQ_GetPriority
 235          ********************************************************************************
 236          *
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 5   

 237          * Summary:
 238          *   Gets the Priority of the Interrupt.
 239          *
 240          * Parameters:
 241          *   None
 242          *
 243          * Return:
 244          *   Priority of the interrupt. 0 - 7, 0 being the highest.
 245          *
 246          *******************************************************************************/
 247          uint8 TakeSample_IRQ_GetPriority(void) 
 248          {
 249   1          uint8 priority;
 250   1      
 251   1      
 252   1          priority = *TakeSample_IRQ_INTC_PRIOR >> 5;
 253   1      
 254   1          return priority;
 255   1      }
 256          
 257          
 258          /*******************************************************************************
 259          * Function Name: TakeSample_IRQ_Enable
 260          ********************************************************************************
 261          *
 262          * Summary:
 263          *   Enables the interrupt.
 264          *
 265          * Parameters:
 266          *   None
 267          *
 268          * Return:
 269          *   None
 270          *
 271          *******************************************************************************/
 272          void TakeSample_IRQ_Enable(void) 
 273          {
 274   1          /* Enable the general interrupt. */
 275   1          *TakeSample_IRQ_INTC_SET_EN = TakeSample_IRQ__INTC_MASK;
 276   1      }
 277          
 278          
 279          /*******************************************************************************
 280          * Function Name: TakeSample_IRQ_GetState
 281          ********************************************************************************
 282          *
 283          * Summary:
 284          *   Gets the state (enabled, disabled) of the Interrupt.
 285          *
 286          * Parameters:
 287          *   None
 288          *
 289          * Return:
 290          *   1 if enabled, 0 if disabled.
 291          *
 292          *******************************************************************************/
 293          uint8 TakeSample_IRQ_GetState(void) 
 294          {
 295   1          /* Get the state of the general interrupt. */
 296   1          return ((*TakeSample_IRQ_INTC_SET_EN & (uint8)TakeSample_IRQ__INTC_MASK) != 0u) ? 1u:0u;
 297   1      }
 298          
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 6   

 299          
 300          /*******************************************************************************
 301          * Function Name: TakeSample_IRQ_Disable
 302          ********************************************************************************
 303          *
 304          * Summary:
 305          *   Disables the Interrupt.
 306          *
 307          * Parameters:
 308          *   None
 309          *
 310          * Return:
 311          *   None
 312          *
 313          *******************************************************************************/
 314          void TakeSample_IRQ_Disable(void) 
 315          {
 316   1          /* Disable the general interrupt. */
 317   1          *TakeSample_IRQ_INTC_CLR_EN = TakeSample_IRQ__INTC_MASK;
 318   1      }
 319          
 320          
 321          /*******************************************************************************
 322          * Function Name: TakeSample_IRQ_SetPending
 323          ********************************************************************************
 324          *
 325          * Summary:
 326          *   Causes the Interrupt to enter the pending state, a software method of
 327          *   generating the interrupt.
 328          *
 329          * Parameters:
 330          *   None
 331          *
 332          * Return:
 333          *   None
 334          *
 335          *******************************************************************************/
 336          void TakeSample_IRQ_SetPending(void) 
 337          {
 338   1          *TakeSample_IRQ_INTC_SET_PD = TakeSample_IRQ__INTC_MASK;
 339   1      }
 340          
 341          
 342          /*******************************************************************************
 343          * Function Name: TakeSample_IRQ_ClearPending
 344          ********************************************************************************
 345          *
 346          * Summary:
 347          *   Clears a pending interrupt.
 348          *
 349          * Parameters:
 350          *   None
 351          *
 352          * Return:
 353          *   None
 354          *
 355          *******************************************************************************/
 356          void TakeSample_IRQ_ClearPending(void) 
 357          {
 358   1          *TakeSample_IRQ_INTC_CLR_PD = TakeSample_IRQ__INTC_MASK;
 359   1      }
 360          
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 7   

 361          #endif /* End check for removal by optimization */
 362          
 363          
 364          /* [] END OF FILE */
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION TakeSample_IRQ_Start (BEGIN)
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 50
0000 120000      R     LCALL   TakeSample_IRQ_Disable
                                           ; SOURCE LINE # 53
0003 7E00        R     MOV     R6,#HIGH TakeSample_IRQ_Interrupt
0005 7F00        R     MOV     R7,#LOW TakeSample_IRQ_Interrupt
0007 120000      R     LCALL   _TakeSample_IRQ_SetVector
                                           ; SOURCE LINE # 56
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _TakeSample_IRQ_SetPriority
                                           ; SOURCE LINE # 59
000F 120000      R     LCALL   TakeSample_IRQ_Enable
                                           ; SOURCE LINE # 60
0012         ?C0001:
0012 22                RET     
             ; FUNCTION TakeSample_IRQ_Start (END)

             ; FUNCTION _TakeSample_IRQ_StartEx (BEGIN)
                                           ; SOURCE LINE # 77
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 80
0008 120000      R     LCALL   TakeSample_IRQ_Disable
                                           ; SOURCE LINE # 83
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _TakeSample_IRQ_SetVector
                                           ; SOURCE LINE # 86
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _TakeSample_IRQ_SetPriority
                                           ; SOURCE LINE # 89
001B 120000      R     LCALL   TakeSample_IRQ_Enable
                                           ; SOURCE LINE # 90
001E         ?C0002:
001E 22                RET     
             ; FUNCTION _TakeSample_IRQ_StartEx (END)

             ; FUNCTION TakeSample_IRQ_Stop (BEGIN)
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 110
0000 120000      R     LCALL   TakeSample_IRQ_Disable
                                           ; SOURCE LINE # 111
0003         ?C0003:
0003 22                RET     
             ; FUNCTION TakeSample_IRQ_Stop (END)

             ; FUNCTION TakeSample_IRQ_Interrupt (BEGIN)
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 9   

0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 134
002B 900000      R     MOV     DPTR,#SampledData
002E E4                CLR     A
002F F0                MOVX    @DPTR,A
0030 A3                INC     DPTR
0031 E4                CLR     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0033 120000      E     LCALL   Em_EEPROM_Start
                                           ; SOURCE LINE # 137
0036 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 140
0039 120000      E     LCALL   ADC_Read16
003C 900000      R     MOV     DPTR,#SampledData
003F EE                MOV     A,R6
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0044 900000      R     MOV     DPTR,#SampledData
0047 E0                MOVX    A,@DPTR
0048 FE                MOV     R6,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EE                MOV     A,R6
004D 30E70A            JNB     ACC.7,?C0004
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0050 900000      R     MOV     DPTR,#SampledData
0053 E4                CLR     A
0054 F0                MOVX    @DPTR,A
0055 A3                INC     DPTR
0056 E4                CLR     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0058 801B              SJMP    ?C0005
005A         ?C0004:
                                           ; SOURCE LINE # 145
005A 900000      R     MOV     DPTR,#SampledData
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 10  

005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 C3                CLR     C
0063 EF                MOV     A,R7
0064 94FF              SUBB    A,#0FFH
0066 EE                MOV     A,R6
0067 940F              SUBB    A,#0FH
0069 400A              JC      ?C0005
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
006B 900000      R     MOV     DPTR,#SampledData
006E 740F              MOV     A,#0FH
0070 F0                MOVX    @DPTR,A
0071 A3                INC     DPTR
0072 74FF              MOV     A,#0FFH
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0075         ?C0006:
0075         ?C0005:
                                           ; SOURCE LINE # 152
0075 7B01              MOV     R3,#01H
0077 7A00        R     MOV     R2,#HIGH SampledData
0079 7900        R     MOV     R1,#LOW SampledData
007B C003              PUSH    AR3
007D C002              PUSH    AR2
007F C001              PUSH    AR1
0081 900000      E     MOV     DPTR,#TailPtr
0084 120000      E     LCALL   ?C?PLDXDATA
0087 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
008A 120000      E     LCALL   ?C?PSTXDATA
008D 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0090 E4                CLR     A
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 7402              MOV     A,#02H
0095 F0                MOVX    @DPTR,A
0096 D001              POP     AR1
0098 D002              POP     AR2
009A D003              POP     AR3
009C 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 154
009F 900000      E     MOV     DPTR,#TailPtr+01H
00A2 E4                CLR     A
00A3 75F002            MOV     B,#02H
00A6 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 164
00A9         ?C0007:
00A9 D007              POP     AR7
00AB D006              POP     AR6
00AD D005              POP     AR5
00AF D004              POP     AR4
00B1 D003              POP     AR3
00B3 D002              POP     AR2
00B5 D001              POP     AR1
00B7 D000              POP     AR0
00B9 D0D0              POP     PSW
00BB D000        E     POP     ?C?XPAGE1SFR
00BD D086              POP     DPS
00BF D084              POP     DPL1
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 11  

00C1 D085              POP     DPH1
00C3 D082              POP     DPL
00C5 D083              POP     DPH
00C7 D0F0              POP     B
00C9 D0E0              POP     ACC
00CB 32                RETI    
             ; FUNCTION TakeSample_IRQ_Interrupt (END)

             ; FUNCTION _TakeSample_IRQ_SetVector (BEGIN)
                                           ; SOURCE LINE # 183
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7900              MOV     R1,#00H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 186
001D         ?C0008:
001D 22                RET     
             ; FUNCTION _TakeSample_IRQ_SetVector (END)

             ; FUNCTION TakeSample_IRQ_GetVector (BEGIN)
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7900              MOV     R1,#00H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 206
0009         ?C0009:
0009 22                RET     
             ; FUNCTION TakeSample_IRQ_GetVector (END)

             ; FUNCTION _TakeSample_IRQ_SetPriority (BEGIN)
                                           ; SOURCE LINE # 227
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 12  

000F FF                MOV     R7,A
0010 904480            MOV     DPTR,#04480H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
0015         ?C0010:
0015 22                RET     
             ; FUNCTION _TakeSample_IRQ_SetPriority (END)

             ; FUNCTION TakeSample_IRQ_GetPriority (BEGIN)
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 252
0000 904480            MOV     DPTR,#04480H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 255
0015         ?C0011:
0015 22                RET     
             ; FUNCTION TakeSample_IRQ_GetPriority (END)

             ; FUNCTION TakeSample_IRQ_Enable (BEGIN)
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 275
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
0006         ?C0012:
0006 22                RET     
             ; FUNCTION TakeSample_IRQ_Enable (END)

             ; FUNCTION TakeSample_IRQ_GetState (BEGIN)
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 296
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E004            JNB     ACC.0,?C0013
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0014
000D         ?C0013:
000D 7F00              MOV     R7,#00H
000F         ?C0014:
                                           ; SOURCE LINE # 297
000F         ?C0015:
000F 22                RET     
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/28/2014 13:53:48 PAGE 13  

             ; FUNCTION TakeSample_IRQ_GetState (END)

             ; FUNCTION TakeSample_IRQ_Disable (BEGIN)
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 317
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0006         ?C0016:
0006 22                RET     
             ; FUNCTION TakeSample_IRQ_Disable (END)

             ; FUNCTION TakeSample_IRQ_SetPending (BEGIN)
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
0000 9044D0            MOV     DPTR,#044D0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 339
0006         ?C0017:
0006 22                RET     
             ; FUNCTION TakeSample_IRQ_SetPending (END)

             ; FUNCTION TakeSample_IRQ_ClearPending (BEGIN)
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0000 9044D8            MOV     DPTR,#044D8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
0006         ?C0018:
0006 22                RET     
             ; FUNCTION TakeSample_IRQ_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    386    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
