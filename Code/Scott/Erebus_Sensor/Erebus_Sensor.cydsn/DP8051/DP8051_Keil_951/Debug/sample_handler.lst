C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SAMPLE_HANDLER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\sample_handler.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\sample_handler.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\sample_handler.lst) CD DB NOIP OT(0,SI
                    -ZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\sample_handler.obj)

line level    source

   1          /* ========================================
   2           *
   3           * (c) Erebus Labs Ltd. 2014
   4           *
   5           * Project: Erebus Labs Sensor
   6           * File:    sample_handler.c
   7           *
   8           * Handles sampling and manages the sample block pointers
   9           *
  10           * ========================================
  11          */
  12          
  13          #include "sample_handler.h"
  14          
  15          void sampling_setup()
  16          {
  17   1          /* Second and Minute RTC interrupts are always enabled for battery checking
  18   1           * and LED blinking if necessary */
  19   1          uint8 RTC_int_mask = MINUTE_MASK | SECOND_MASK;  
  20   1          sample_unit = get_EEPROM_variable(EE_SAMPLE_UNIT);
  21   1          sample_interval = get_EEPROM_variable(EE_SAMPLE_INTERVAL);
  22   1          
  23   1          switch (sample_unit)
  24   1          {
  25   2              case SAMPLE_HOUR: /* Hours */
  26   2                  RTC_int_mask = RTC_int_mask | HOUR_MASK;
  27   2                  break;
  28   2              case SAMPLE_DAY: /* Days */
  29   2                  RTC_int_mask = RTC_int_mask | DAY_MASK;
  30   2                  break;
  31   2          }
  32   1          
  33   1          RTC_WriteIntervalMask(RTC_int_mask);
  34   1          RTC_EnableInt();
  35   1          
  36   1          return;
  37   1       }
  38          
  39          void start_collection(){
  40   1          
  41   1          struct header_package header;
  42   1          RTC_TIME_DATE* datetime = RTC_ReadTime();
  43   1          
  44   1           /* Construct Header */
  45   1          header.start_block = STARTBLOCK;
  46   1          header.sample_sensor = get_EEPROM_variable(EE_SENSOR);
  47   1          header.sample_unit = get_EEPROM_variable(EE_SAMPLE_UNIT);
  48   1          header.sample_interval = get_EEPROM_variable(EE_SAMPLE_INTERVAL);
  49   1          header.second = datetime -> Sec;
  50   1          header.minute = datetime -> Min;
  51   1          header.hour = datetime -> Hour;
  52   1          header.day = datetime -> DayOfMonth;
  53   1          header.month = datetime -> Month;
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 2   

  54   1          header.year = datetime -> Year;
  55   1          
  56   1          if (store_in_flash((uint8*) &header, sizeof(struct header_package))){
  57   2              memory_full();
  58   2              stop_collection();
  59   2              goto exit;
  60   2          }
  61   1          
  62   1          StopCollection_IRQ_Start();
  63   1          StartCollection_IRQ_Stop();
  64   1          sample_enable_flag = 1;
  65   1          sample_interrupt_count = 0;
  66   1      
  67   1      exit:
  68   1          return;   
  69   1      }
  70          
  71          void take_sample()
  72          {
  73   1          uint16 sample = 0;
  74   1          ADC_Wakeup();
  75   1          
  76   1          sample = ADC_Read16(); 
  77   1          
  78   1          if (store_in_flash((uint8*) &sample, sizeof(uint16))){
  79   2              memory_full();
  80   2              stop_collection();
  81   2          }
  82   1          
  83   1          ADC_Sleep();
  84   1          return;    
  85   1      }
  86          
  87          void stop_collection(){
  88   1          
  89   1          StartCollection_IRQ_Start();
  90   1          StopCollection_IRQ_Stop();
  91   1          sample_enable_flag = 0;
  92   1          
  93   1          return;   
  94   1      }
  95          
  96          uint8 store_in_flash(uint8* buffer, uint8 num_bytes){  
  97   1          int byte_diff = 0;
  98   1          int remaining_bytes = 0;
  99   1          uint8 result = 0;
 100   1            
 101   1          /* Calculate number of bytes remaining in the sample block */ 
 102   1          remaining_bytes = sample_head_index - sample_tail_index;
 103   1          if (remaining_bytes < 0){
 104   2              remaining_bytes = SAMPLE_BLOCK_SIZE + remaining_bytes;
 105   2          }
 106   1      
 107   1          /* Confirm there is enough space left */
 108   1          /* Ignore case where head and tail are the same location - that is allowed
 109   1           * when there are currently no samples or headers stored */
 110   1          if (remaining_bytes < num_bytes && (sample_head_index != sample_tail_index)){
 111   2              result = 1;
 112   2              goto exit;
 113   2          }
 114   1          
 115   1          /* Check to see if the whole buffer can fit before the end of the array
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 3   

 116   1           * This will usually be the case */
 117   1          if ((sample_tail_index + num_bytes) < SAMPLE_BLOCK_SIZE){
 118   2              Em_EEPROM_Write(buffer, (uint8*) &(sample_block[sample_tail_index]), num_bytes);
 119   2              sample_tail_index = sample_tail_index + num_bytes;    
 120   2          }
 121   1          else{
 122   2              /* It didn't fit, so now we have to do extra work to split the buffer 
 123   2               * Start by writing whatever will fit before the end of the array */
 124   2              remaining_bytes = SAMPLE_BLOCK_SIZE - sample_tail_index;
 125   2              Em_EEPROM_Write(buffer, (uint8*) &(sample_block[sample_tail_index]), remaining_bytes);
 126   2              
 127   2              /* Write remaining bytes at the top of the array */
 128   2              Em_EEPROM_Write((buffer + remaining_bytes), sample_block, num_bytes - remaining_bytes);
 129   2              sample_tail_index = num_bytes - remaining_bytes;
 130   2          }
 131   1          
 132   1          /* Store new tail pointer in Flash */
 133   1          Em_EEPROM_Write((uint8*) &sample_tail_index, (uint8*) &(current_sample_indices[pointer_tail_index]), s
             -izeof(uint16));
 134   1          
 135   1          /* If we head is now equal to tail, we have filled our buffer */
 136   1          if (sample_tail_index == sample_head_index){
 137   2              result = 1;
 138   2          }
 139   1              
 140   1      exit:
 141   1          return (result);
 142   1      }
 143          
 144          void clear_samples(){
 145   1      
 146   1          /* If we just wrapped our sampling around the end of the array, it's time to 
 147   1           * bump the sample pointers to the next Flash row for wear-levelling */
 148   1          if (sample_head_index > sample_tail_index){
 149   2              pointer_head_index += FLASH_ROW_LENGTH;
 150   2              
 151   2              if (pointer_head_index >= FLASH_ROW_LENGTH * MASTER_ROWS){
 152   3                  pointer_head_index = HEAD_INDEX;
 153   3              }
 154   2              
 155   2              pointer_tail_index = pointer_head_index + TAIL_INDEX;
 156   2              
 157   2              /* Save the new indexes of the head and tail pointers */
 158   2              Em_EEPROM_Write((uint8*) &pointer_head_index, (uint8*) &(master_sample_indices[HEAD_INDEX]), sizeo
             -f(uint16));
 159   2              Em_EEPROM_Write((uint8*) &pointer_tail_index, (uint8*) &(master_sample_indices[TAIL_INDEX]), sizeo
             -f(uint16));
 160   2              
 161   2              /* Copy current tail to its new location */
 162   2              Em_EEPROM_Write((uint8*) &sample_tail_index, (uint8*) &(current_sample_indices[pointer_tail_index]
             -), sizeof(uint16));
 163   2          }
 164   1          
 165   1          /* Update bring head up to current tail position */
 166   1          sample_head_index = sample_tail_index; 
 167   1          Em_EEPROM_Write((uint8*) &sample_tail_index, (uint8*) &(current_sample_indices[pointer_head_index]), s
             -izeof(uint16));
 168   1          
 169   1          /* If memory full flag was set, clear it */
 170   1          if (mem_full_flag){
 171   2              mem_full_flag = 0;
 172   2              Em_EEPROM_Write(&mem_full_flag, &mem_full_flash_flag, sizeof(uint8));
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 4   

 173   2          }
 174   1                  
 175   1          return;
 176   1      }
 177          
 178          void reset_pointers(){
 179   1          
 180   1          pointer_head_index = HEAD_INDEX;
 181   1          pointer_tail_index = TAIL_INDEX;
 182   1          sample_head_index = 0x0;
 183   1          sample_tail_index = 0x0;
 184   1              
 185   1          /* reset master pointers */
 186   1          Em_EEPROM_Write((uint8*) &pointer_head_index, (uint8*) &(master_sample_indices[HEAD_INDEX]), sizeof(ui
             -nt16));
 187   1          Em_EEPROM_Write((uint8*) &pointer_tail_index, (uint8*) &(master_sample_indices[TAIL_INDEX]), sizeof(ui
             -nt16));
 188   1          
 189   1          /* reset sample pointers to the top of the sample block */
 190   1          Em_EEPROM_Write((uint8*) &sample_head_index, (uint8*) &(current_sample_indices[HEAD_INDEX]), sizeof(ui
             -nt16));
 191   1          Em_EEPROM_Write((uint8*) &sample_tail_index, (uint8*) &(current_sample_indices[TAIL_INDEX]), sizeof(ui
             -nt16));
 192   1          
 193   1          return;
 194   1      }
 195             
 196          /* [] END OF FILE */
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION sampling_setup (BEGIN)
                                           ; SOURCE LINE # 15
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 19
0000 900000      R     MOV     DPTR,#RTC_int_mask
0003 7403              MOV     A,#03H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 20
0006 7F01              MOV     R7,#01H
0008 7E00              MOV     R6,#00H
000A 120000      E     LCALL   _get_EEPROM_variable
000D 900000      E     MOV     DPTR,#sample_unit
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 21
0012 7F02              MOV     R7,#02H
0014 7E00              MOV     R6,#00H
0016 120000      E     LCALL   _get_EEPROM_variable
0019 900000      E     MOV     DPTR,#sample_interval
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 23
001E 900000      E     MOV     DPTR,#sample_unit
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 120000      E     LCALL   ?C?CCASE
0027 0000        R     DW      ?C0002
0029 02                DB      02H
002A 0000        R     DW      ?C0003
002C 03                DB      03H
002D 0000              DW      00H
002F 0000        R     DW      ?C0001
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
0031         ?C0002:
                                           ; SOURCE LINE # 26
0031 900000      R     MOV     DPTR,#RTC_int_mask
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 4404              ORL     A,#04H
0039 FF                MOV     R7,A
003A 900000      R     MOV     DPTR,#RTC_int_mask
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 27
003F 800E              SJMP    ?C0001
                                           ; SOURCE LINE # 28
0041         ?C0003:
                                           ; SOURCE LINE # 29
0041 900000      R     MOV     DPTR,#RTC_int_mask
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 4408              ORL     A,#08H
0049 FF                MOV     R7,A
004A 900000      R     MOV     DPTR,#RTC_int_mask
004D EF                MOV     A,R7
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 6   

004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
004F         ?C0001:
                                           ; SOURCE LINE # 33
004F 900000      R     MOV     DPTR,#RTC_int_mask
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 120000      E     LCALL   _RTC_WriteIntervalMask
                                           ; SOURCE LINE # 34
0057 120000      E     LCALL   RTC_EnableInt
                                           ; SOURCE LINE # 37
005A         ?C0004:
005A 22                RET     
             ; FUNCTION sampling_setup (END)

             ; FUNCTION start_collection (BEGIN)
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 42
0000 120000      E     LCALL   RTC_ReadTime
0003 900000      R     MOV     DPTR,#datetime
0006 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 45
0009 900000      R     MOV     DPTR,#header
000C 7420              MOV     A,#020H
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
0012 7F00              MOV     R7,#00H
0014 7E00              MOV     R6,#00H
0016 120000      E     LCALL   _get_EEPROM_variable
0019 900000      R     MOV     DPTR,#header+04H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 47
001E 7F01              MOV     R7,#01H
0020 7E00              MOV     R6,#00H
0022 120000      E     LCALL   _get_EEPROM_variable
0025 900000      R     MOV     DPTR,#header+05H
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 48
002A 7F02              MOV     R7,#02H
002C 7E00              MOV     R6,#00H
002E 120000      E     LCALL   _get_EEPROM_variable
0031 900000      R     MOV     DPTR,#header+06H
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
0036 900000      R     MOV     DPTR,#datetime
0039 120000      E     LCALL   ?C?PLDXDATA
003C 120000      E     LCALL   ?C?CLDPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#header+07H
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
0045 900000      R     MOV     DPTR,#datetime
0048 120000      E     LCALL   ?C?PLDXDATA
004B E9                MOV     A,R1
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 7   

004C 2401              ADD     A,#01H
004E F9                MOV     R1,A
004F EA                MOV     A,R2
0050 3400              ADDC    A,#00H
0052 FA                MOV     R2,A
0053 120000      E     LCALL   ?C?CLDPTR
0056 FF                MOV     R7,A
0057 900000      R     MOV     DPTR,#header+08H
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
005C 900000      R     MOV     DPTR,#datetime
005F 120000      E     LCALL   ?C?PLDXDATA
0062 E9                MOV     A,R1
0063 2402              ADD     A,#02H
0065 F9                MOV     R1,A
0066 EA                MOV     A,R2
0067 3400              ADDC    A,#00H
0069 FA                MOV     R2,A
006A 120000      E     LCALL   ?C?CLDPTR
006D FF                MOV     R7,A
006E 900000      R     MOV     DPTR,#header+09H
0071 EF                MOV     A,R7
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
0073 900000      R     MOV     DPTR,#datetime
0076 120000      E     LCALL   ?C?PLDXDATA
0079 E9                MOV     A,R1
007A 2404              ADD     A,#04H
007C F9                MOV     R1,A
007D EA                MOV     A,R2
007E 3400              ADDC    A,#00H
0080 FA                MOV     R2,A
0081 120000      E     LCALL   ?C?CLDPTR
0084 FF                MOV     R7,A
0085 900000      R     MOV     DPTR,#header+0AH
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
008A 900000      R     MOV     DPTR,#datetime
008D 120000      E     LCALL   ?C?PLDXDATA
0090 E9                MOV     A,R1
0091 2407              ADD     A,#07H
0093 F9                MOV     R1,A
0094 EA                MOV     A,R2
0095 3400              ADDC    A,#00H
0097 FA                MOV     R2,A
0098 120000      E     LCALL   ?C?CLDPTR
009B FF                MOV     R7,A
009C 900000      R     MOV     DPTR,#header+0BH
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
00A1 900000      R     MOV     DPTR,#datetime
00A4 120000      E     LCALL   ?C?PLDXDATA
00A7 E9                MOV     A,R1
00A8 2408              ADD     A,#08H
00AA F9                MOV     R1,A
00AB EA                MOV     A,R2
00AC 3400              ADDC    A,#00H
00AE FA                MOV     R2,A
00AF 120000      E     LCALL   ?C?ILDPTR
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 8   

00B2 FF                MOV     R7,A
00B3 AEF0              MOV     R6,B
00B5 900000      R     MOV     DPTR,#header+02H
00B8 EE                MOV     A,R6
00B9 F0                MOVX    @DPTR,A
00BA A3                INC     DPTR
00BB EF                MOV     A,R7
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 56
00BD 7B01              MOV     R3,#01H
00BF 7A00        R     MOV     R2,#HIGH header
00C1 7900        R     MOV     R1,#LOW header
00C3 7D10              MOV     R5,#010H
00C5 120000      R     LCALL   _store_in_flash
00C8 EF                MOV     A,R7
00C9 6007              JZ      ?C0005
                                           ; SOURCE LINE # 57
00CB 120000      E     LCALL   memory_full
                                           ; SOURCE LINE # 58
00CE 120000      R     LCALL   stop_collection
                                           ; SOURCE LINE # 59
00D1 22                RET     
                                           ; SOURCE LINE # 60
00D2         ?C0005:
                                           ; SOURCE LINE # 62
00D2 120000      E     LCALL   StopCollection_IRQ_Start
                                           ; SOURCE LINE # 63
00D5 120000      E     LCALL   StartCollection_IRQ_Stop
                                           ; SOURCE LINE # 64
00D8 900000      E     MOV     DPTR,#sample_enable_flag
00DB 7401              MOV     A,#01H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
00DE 900000      E     MOV     DPTR,#sample_interrupt_count
00E1 E4                CLR     A
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
00E3         exit:
                                           ; SOURCE LINE # 69
00E3         ?C0007:
00E3 22                RET     
             ; FUNCTION start_collection (END)

             ; FUNCTION take_sample (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
0000 900000      R     MOV     DPTR,#sample
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
0008 120000      E     LCALL   ADC_Wakeup
                                           ; SOURCE LINE # 76
000B 120000      E     LCALL   ADC_Read16
000E 900000      R     MOV     DPTR,#sample
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 EF                MOV     A,R7
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 9   

0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0016 7B01              MOV     R3,#01H
0018 7A00        R     MOV     R2,#HIGH sample
001A 7900        R     MOV     R1,#LOW sample
001C 7D02              MOV     R5,#02H
001E 120000      R     LCALL   _store_in_flash
0021 EF                MOV     A,R7
0022 6006              JZ      ?C0008
                                           ; SOURCE LINE # 79
0024 120000      E     LCALL   memory_full
                                           ; SOURCE LINE # 80
0027 120000      R     LCALL   stop_collection
                                           ; SOURCE LINE # 81
002A         ?C0008:
                                           ; SOURCE LINE # 83
002A 120000      E     LCALL   ADC_Sleep
                                           ; SOURCE LINE # 85
002D         ?C0009:
002D 22                RET     
             ; FUNCTION take_sample (END)

             ; FUNCTION stop_collection (BEGIN)
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 89
0000 120000      E     LCALL   StartCollection_IRQ_Start
                                           ; SOURCE LINE # 90
0003 120000      E     LCALL   StopCollection_IRQ_Stop
                                           ; SOURCE LINE # 91
0006 900000      E     MOV     DPTR,#sample_enable_flag
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
000B         ?C0010:
000B 22                RET     
             ; FUNCTION stop_collection (END)

             ; FUNCTION _store_in_flash (BEGIN)
                                           ; SOURCE LINE # 96
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#num_bytes
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
000B 900000      R     MOV     DPTR,#byte_diff
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
0013 900000      R     MOV     DPTR,#remaining_bytes
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
001B 900000      R     MOV     DPTR,#result
001E E4                CLR     A
001F F0                MOVX    @DPTR,A
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 10  

                                           ; SOURCE LINE # 102
0020 900000      E     MOV     DPTR,#sample_tail_index
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 900000      E     MOV     DPTR,#sample_head_index
002B E0                MOVX    A,@DPTR
002C FC                MOV     R4,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 C3                CLR     C
0031 ED                MOV     A,R5
0032 9F                SUBB    A,R7
0033 FF                MOV     R7,A
0034 EC                MOV     A,R4
0035 9E                SUBB    A,R6
0036 FE                MOV     R6,A
0037 900000      R     MOV     DPTR,#remaining_bytes
003A EE                MOV     A,R6
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
003F 900000      R     MOV     DPTR,#remaining_bytes
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 C3                CLR     C
0048 EE                MOV     A,R6
0049 6480              XRL     A,#080H
004B 9480              SUBB    A,#080H
004D 5018              JNC     ?C0011
                                           ; SOURCE LINE # 104
004F 900000      R     MOV     DPTR,#remaining_bytes
0052 E0                MOVX    A,@DPTR
0053 FE                MOV     R6,A
0054 A3                INC     DPTR
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 2400              ADD     A,#00H
005A FF                MOV     R7,A
005B EE                MOV     A,R6
005C 3404              ADDC    A,#04H
005E FE                MOV     R6,A
005F 900000      R     MOV     DPTR,#remaining_bytes
0062 EE                MOV     A,R6
0063 F0                MOVX    @DPTR,A
0064 A3                INC     DPTR
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
0067         ?C0011:
                                           ; SOURCE LINE # 110
0067 900000      R     MOV     DPTR,#num_bytes
006A E0                MOVX    A,@DPTR
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 11  

006B FF                MOV     R7,A
006C 7E00              MOV     R6,#00H
006E 900000      R     MOV     DPTR,#remaining_bytes
0071 E0                MOVX    A,@DPTR
0072 FC                MOV     R4,A
0073 A3                INC     DPTR
0074 E0                MOVX    A,@DPTR
0075 FD                MOV     R5,A
0076 C3                CLR     C
0077 ED                MOV     A,R5
0078 9F                SUBB    A,R7
0079 EE                MOV     A,R6
007A 6480              XRL     A,#080H
007C F8                MOV     R0,A
007D EC                MOV     A,R4
007E 6480              XRL     A,#080H
0080 98                SUBB    A,R0
0081 5021              JNC     ?C0012
0083 900000      E     MOV     DPTR,#sample_tail_index
0086 E0                MOVX    A,@DPTR
0087 FE                MOV     R6,A
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 900000      E     MOV     DPTR,#sample_head_index
008E E0                MOVX    A,@DPTR
008F FC                MOV     R4,A
0090 A3                INC     DPTR
0091 E0                MOVX    A,@DPTR
0092 FD                MOV     R5,A
0093 ED                MOV     A,R5
0094 6F                XRL     A,R7
0095 7002              JNZ     ?C0023
0097 EC                MOV     A,R4
0098 6E                XRL     A,R6
0099         ?C0023:
0099 6009              JZ      ?C0012
                                           ; SOURCE LINE # 111
009B 900000      R     MOV     DPTR,#result
009E 7401              MOV     A,#01H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
00A1 020000      R     LJMP    exit
                                           ; SOURCE LINE # 113
00A4         ?C0012:
                                           ; SOURCE LINE # 117
00A4 900000      R     MOV     DPTR,#num_bytes
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 7E00              MOV     R6,#00H
00AB 900000      E     MOV     DPTR,#sample_tail_index
00AE E0                MOVX    A,@DPTR
00AF FC                MOV     R4,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 FD                MOV     R5,A
00B3 EF                MOV     A,R7
00B4 2D                ADD     A,R5
00B5 FF                MOV     R7,A
00B6 EE                MOV     A,R6
00B7 3C                ADDC    A,R4
00B8 FE                MOV     R6,A
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 12  

00B9 C3                CLR     C
00BA EE                MOV     A,R6
00BB 9404              SUBB    A,#04H
00BD 504F              JNC     ?C0014
                                           ; SOURCE LINE # 118
00BF 900000      R     MOV     DPTR,#buffer
00C2 120000      E     LCALL   ?C?PLDXDATA
00C5 C003              PUSH    AR3
00C7 C002              PUSH    AR2
00C9 C001              PUSH    AR1
00CB 900000      E     MOV     DPTR,#sample_tail_index
00CE E0                MOVX    A,@DPTR
00CF FE                MOV     R6,A
00D0 A3                INC     DPTR
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 7400        E     MOV     A,#LOW sample_block
00D5 2F                ADD     A,R7
00D6 F9                MOV     R1,A
00D7 7400        E     MOV     A,#HIGH sample_block
00D9 3E                ADDC    A,R6
00DA FA                MOV     R2,A
00DB 7BFF              MOV     R3,#0FFH
00DD 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
00E0 120000      E     LCALL   ?C?PSTXDATA
00E3 900000      R     MOV     DPTR,#num_bytes
00E6 E0                MOVX    A,@DPTR
00E7 FF                MOV     R7,A
00E8 7E00              MOV     R6,#00H
00EA 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
00ED EE                MOV     A,R6
00EE F0                MOVX    @DPTR,A
00EF A3                INC     DPTR
00F0 EF                MOV     A,R7
00F1 F0                MOVX    @DPTR,A
00F2 D001              POP     AR1
00F4 D002              POP     AR2
00F6 D003              POP     AR3
00F8 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 119
00FB 900000      R     MOV     DPTR,#num_bytes
00FE E0                MOVX    A,@DPTR
00FF FF                MOV     R7,A
0100 7E00              MOV     R6,#00H
0102 900000      E     MOV     DPTR,#sample_tail_index
0105 EE                MOV     A,R6
0106 8FF0              MOV     B,R7
0108 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 120
010B 020000      R     LJMP    ?C0015
010E         ?C0014:
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 124
010E 900000      E     MOV     DPTR,#sample_tail_index
0111 E0                MOVX    A,@DPTR
0112 FE                MOV     R6,A
0113 A3                INC     DPTR
0114 E0                MOVX    A,@DPTR
0115 FF                MOV     R7,A
0116 C3                CLR     C
0117 E4                CLR     A
0118 9F                SUBB    A,R7
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 13  

0119 FF                MOV     R7,A
011A 7404              MOV     A,#04H
011C 9E                SUBB    A,R6
011D FE                MOV     R6,A
011E 900000      R     MOV     DPTR,#remaining_bytes
0121 EE                MOV     A,R6
0122 F0                MOVX    @DPTR,A
0123 A3                INC     DPTR
0124 EF                MOV     A,R7
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
0126 900000      R     MOV     DPTR,#buffer
0129 120000      E     LCALL   ?C?PLDXDATA
012C C003              PUSH    AR3
012E C002              PUSH    AR2
0130 C001              PUSH    AR1
0132 900000      E     MOV     DPTR,#sample_tail_index
0135 E0                MOVX    A,@DPTR
0136 FE                MOV     R6,A
0137 A3                INC     DPTR
0138 E0                MOVX    A,@DPTR
0139 FF                MOV     R7,A
013A 7400        E     MOV     A,#LOW sample_block
013C 2F                ADD     A,R7
013D F9                MOV     R1,A
013E 7400        E     MOV     A,#HIGH sample_block
0140 3E                ADDC    A,R6
0141 FA                MOV     R2,A
0142 7BFF              MOV     R3,#0FFH
0144 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0147 120000      E     LCALL   ?C?PSTXDATA
014A 900000      R     MOV     DPTR,#remaining_bytes
014D E0                MOVX    A,@DPTR
014E FE                MOV     R6,A
014F A3                INC     DPTR
0150 E0                MOVX    A,@DPTR
0151 FF                MOV     R7,A
0152 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0155 EE                MOV     A,R6
0156 F0                MOVX    @DPTR,A
0157 A3                INC     DPTR
0158 EF                MOV     A,R7
0159 F0                MOVX    @DPTR,A
015A D001              POP     AR1
015C D002              POP     AR2
015E D003              POP     AR3
0160 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 128
0163 900000      R     MOV     DPTR,#buffer
0166 120000      E     LCALL   ?C?PLDXDATA
0169 900000      R     MOV     DPTR,#remaining_bytes
016C E0                MOVX    A,@DPTR
016D FE                MOV     R6,A
016E A3                INC     DPTR
016F E0                MOVX    A,@DPTR
0170 FF                MOV     R7,A
0171 E9                MOV     A,R1
0172 2F                ADD     A,R7
0173 F9                MOV     R1,A
0174 EA                MOV     A,R2
0175 3E                ADDC    A,R6
0176 FA                MOV     R2,A
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 14  

0177 C003              PUSH    AR3
0179 C002              PUSH    AR2
017B C001              PUSH    AR1
017D 7BFF              MOV     R3,#0FFH
017F 7A00        E     MOV     R2,#HIGH sample_block
0181 7900        E     MOV     R1,#LOW sample_block
0183 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0186 120000      E     LCALL   ?C?PSTXDATA
0189 900000      R     MOV     DPTR,#num_bytes
018C E0                MOVX    A,@DPTR
018D FF                MOV     R7,A
018E 7E00              MOV     R6,#00H
0190 900000      R     MOV     DPTR,#remaining_bytes
0193 E0                MOVX    A,@DPTR
0194 FC                MOV     R4,A
0195 A3                INC     DPTR
0196 E0                MOVX    A,@DPTR
0197 FD                MOV     R5,A
0198 C3                CLR     C
0199 EF                MOV     A,R7
019A 9D                SUBB    A,R5
019B FF                MOV     R7,A
019C EE                MOV     A,R6
019D 9C                SUBB    A,R4
019E FE                MOV     R6,A
019F 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
01A2 EE                MOV     A,R6
01A3 F0                MOVX    @DPTR,A
01A4 A3                INC     DPTR
01A5 EF                MOV     A,R7
01A6 F0                MOVX    @DPTR,A
01A7 D001              POP     AR1
01A9 D002              POP     AR2
01AB D003              POP     AR3
01AD 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 129
01B0 900000      R     MOV     DPTR,#num_bytes
01B3 E0                MOVX    A,@DPTR
01B4 FF                MOV     R7,A
01B5 7E00              MOV     R6,#00H
01B7 900000      R     MOV     DPTR,#remaining_bytes
01BA E0                MOVX    A,@DPTR
01BB FC                MOV     R4,A
01BC A3                INC     DPTR
01BD E0                MOVX    A,@DPTR
01BE FD                MOV     R5,A
01BF C3                CLR     C
01C0 EF                MOV     A,R7
01C1 9D                SUBB    A,R5
01C2 FF                MOV     R7,A
01C3 EE                MOV     A,R6
01C4 9C                SUBB    A,R4
01C5 FE                MOV     R6,A
01C6 900000      E     MOV     DPTR,#sample_tail_index
01C9 EE                MOV     A,R6
01CA F0                MOVX    @DPTR,A
01CB A3                INC     DPTR
01CC EF                MOV     A,R7
01CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
01CE         ?C0015:
                                           ; SOURCE LINE # 133
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 15  

01CE 7B01              MOV     R3,#01H
01D0 7A00        E     MOV     R2,#HIGH sample_tail_index
01D2 7900        E     MOV     R1,#LOW sample_tail_index
01D4 C003              PUSH    AR3
01D6 C002              PUSH    AR2
01D8 C001              PUSH    AR1
01DA 900000      E     MOV     DPTR,#pointer_tail_index
01DD E0                MOVX    A,@DPTR
01DE FE                MOV     R6,A
01DF A3                INC     DPTR
01E0 E0                MOVX    A,@DPTR
01E1 FF                MOV     R7,A
01E2 EF                MOV     A,R7
01E3 25E0              ADD     A,ACC
01E5 FF                MOV     R7,A
01E6 EE                MOV     A,R6
01E7 33                RLC     A
01E8 FE                MOV     R6,A
01E9 7400        E     MOV     A,#LOW current_sample_indices
01EB 2F                ADD     A,R7
01EC F9                MOV     R1,A
01ED 7400        E     MOV     A,#HIGH current_sample_indices
01EF 3E                ADDC    A,R6
01F0 FA                MOV     R2,A
01F1 7BFF              MOV     R3,#0FFH
01F3 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
01F6 120000      E     LCALL   ?C?PSTXDATA
01F9 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
01FC E4                CLR     A
01FD F0                MOVX    @DPTR,A
01FE A3                INC     DPTR
01FF 7402              MOV     A,#02H
0201 F0                MOVX    @DPTR,A
0202 D001              POP     AR1
0204 D002              POP     AR2
0206 D003              POP     AR3
0208 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 136
020B 900000      E     MOV     DPTR,#sample_head_index
020E E0                MOVX    A,@DPTR
020F FE                MOV     R6,A
0210 A3                INC     DPTR
0211 E0                MOVX    A,@DPTR
0212 FF                MOV     R7,A
0213 900000      E     MOV     DPTR,#sample_tail_index
0216 E0                MOVX    A,@DPTR
0217 FC                MOV     R4,A
0218 A3                INC     DPTR
0219 E0                MOVX    A,@DPTR
021A FD                MOV     R5,A
021B ED                MOV     A,R5
021C B5070A            CJNE    A,AR7,exit
021F EC                MOV     A,R4
0220 B50606            CJNE    A,AR6,exit
                                           ; SOURCE LINE # 137
0223 900000      R     MOV     DPTR,#result
0226 7401              MOV     A,#01H
0228 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0229         ?C0016:
                                           ; SOURCE LINE # 140
0229         exit:
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 16  

                                           ; SOURCE LINE # 141
0229 900000      R     MOV     DPTR,#result
022C E0                MOVX    A,@DPTR
022D FF                MOV     R7,A
                                           ; SOURCE LINE # 142
022E         ?C0017:
022E 22                RET     
             ; FUNCTION _store_in_flash (END)

             ; FUNCTION clear_samples (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 148
0000 900000      E     MOV     DPTR,#sample_tail_index
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      E     MOV     DPTR,#sample_head_index
000B E0                MOVX    A,@DPTR
000C FC                MOV     R4,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FD                MOV     R5,A
0010 D3                SETB    C
0011 ED                MOV     A,R5
0012 9F                SUBB    A,R7
0013 EC                MOV     A,R4
0014 9E                SUBB    A,R6
0015 5003              JNC     $ + 5H
0017 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 149
001A 900000      E     MOV     DPTR,#pointer_head_index
001D 7401              MOV     A,#01H
001F 75F020            MOV     B,#020H
0022 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 151
0025 900000      E     MOV     DPTR,#pointer_head_index
0028 E0                MOVX    A,@DPTR
0029 FE                MOV     R6,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D C3                CLR     C
002E EF                MOV     A,R7
002F 9460              SUBB    A,#060H
0031 EE                MOV     A,R6
0032 9401              SUBB    A,#01H
0034 4008              JC      ?C0019
                                           ; SOURCE LINE # 152
0036 900000      E     MOV     DPTR,#pointer_head_index
0039 E4                CLR     A
003A F0                MOVX    @DPTR,A
003B A3                INC     DPTR
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
003E         ?C0019:
                                           ; SOURCE LINE # 155
003E 900000      E     MOV     DPTR,#pointer_head_index
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 17  

0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 2401              ADD     A,#01H
0049 FF                MOV     R7,A
004A EE                MOV     A,R6
004B 3400              ADDC    A,#00H
004D FE                MOV     R6,A
004E 900000      E     MOV     DPTR,#pointer_tail_index
0051 EE                MOV     A,R6
0052 F0                MOVX    @DPTR,A
0053 A3                INC     DPTR
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
0056 7B01              MOV     R3,#01H
0058 7A00        E     MOV     R2,#HIGH pointer_head_index
005A 7900        E     MOV     R1,#LOW pointer_head_index
005C C003              PUSH    AR3
005E C002              PUSH    AR2
0060 C001              PUSH    AR1
0062 7BFF              MOV     R3,#0FFH
0064 7A00        E     MOV     R2,#HIGH master_sample_indices
0066 7900        E     MOV     R1,#LOW master_sample_indices
0068 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
006B 120000      E     LCALL   ?C?PSTXDATA
006E 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0071 E4                CLR     A
0072 F0                MOVX    @DPTR,A
0073 A3                INC     DPTR
0074 7402              MOV     A,#02H
0076 F0                MOVX    @DPTR,A
0077 D001              POP     AR1
0079 D002              POP     AR2
007B D003              POP     AR3
007D 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 159
0080 7B01              MOV     R3,#01H
0082 7A00        E     MOV     R2,#HIGH pointer_tail_index
0084 7900        E     MOV     R1,#LOW pointer_tail_index
0086 C003              PUSH    AR3
0088 C002              PUSH    AR2
008A C001              PUSH    AR1
008C 7BFF              MOV     R3,#0FFH
008E 7A00        E     MOV     R2,#HIGH master_sample_indices+02H
0090 7900        E     MOV     R1,#LOW master_sample_indices+02H
0092 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0095 120000      E     LCALL   ?C?PSTXDATA
0098 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
009B E4                CLR     A
009C F0                MOVX    @DPTR,A
009D A3                INC     DPTR
009E 7402              MOV     A,#02H
00A0 F0                MOVX    @DPTR,A
00A1 D001              POP     AR1
00A3 D002              POP     AR2
00A5 D003              POP     AR3
00A7 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 162
00AA 7B01              MOV     R3,#01H
00AC 7A00        E     MOV     R2,#HIGH sample_tail_index
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 18  

00AE 7900        E     MOV     R1,#LOW sample_tail_index
00B0 C003              PUSH    AR3
00B2 C002              PUSH    AR2
00B4 C001              PUSH    AR1
00B6 900000      E     MOV     DPTR,#pointer_tail_index
00B9 E0                MOVX    A,@DPTR
00BA FE                MOV     R6,A
00BB A3                INC     DPTR
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE EF                MOV     A,R7
00BF 25E0              ADD     A,ACC
00C1 FF                MOV     R7,A
00C2 EE                MOV     A,R6
00C3 33                RLC     A
00C4 FE                MOV     R6,A
00C5 7400        E     MOV     A,#LOW current_sample_indices
00C7 2F                ADD     A,R7
00C8 F9                MOV     R1,A
00C9 7400        E     MOV     A,#HIGH current_sample_indices
00CB 3E                ADDC    A,R6
00CC FA                MOV     R2,A
00CD 7BFF              MOV     R3,#0FFH
00CF 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
00D2 120000      E     LCALL   ?C?PSTXDATA
00D5 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
00D8 E4                CLR     A
00D9 F0                MOVX    @DPTR,A
00DA A3                INC     DPTR
00DB 7402              MOV     A,#02H
00DD F0                MOVX    @DPTR,A
00DE D001              POP     AR1
00E0 D002              POP     AR2
00E2 D003              POP     AR3
00E4 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 163
00E7         ?C0018:
                                           ; SOURCE LINE # 166
00E7 900000      E     MOV     DPTR,#sample_tail_index
00EA E0                MOVX    A,@DPTR
00EB FE                MOV     R6,A
00EC A3                INC     DPTR
00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF 900000      E     MOV     DPTR,#sample_head_index
00F2 EE                MOV     A,R6
00F3 F0                MOVX    @DPTR,A
00F4 A3                INC     DPTR
00F5 EF                MOV     A,R7
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
00F7 7B01              MOV     R3,#01H
00F9 7A00        E     MOV     R2,#HIGH sample_tail_index
00FB 7900        E     MOV     R1,#LOW sample_tail_index
00FD C003              PUSH    AR3
00FF C002              PUSH    AR2
0101 C001              PUSH    AR1
0103 900000      E     MOV     DPTR,#pointer_head_index
0106 E0                MOVX    A,@DPTR
0107 FE                MOV     R6,A
0108 A3                INC     DPTR
0109 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 19  

010A FF                MOV     R7,A
010B EF                MOV     A,R7
010C 25E0              ADD     A,ACC
010E FF                MOV     R7,A
010F EE                MOV     A,R6
0110 33                RLC     A
0111 FE                MOV     R6,A
0112 7400        E     MOV     A,#LOW current_sample_indices
0114 2F                ADD     A,R7
0115 F9                MOV     R1,A
0116 7400        E     MOV     A,#HIGH current_sample_indices
0118 3E                ADDC    A,R6
0119 FA                MOV     R2,A
011A 7BFF              MOV     R3,#0FFH
011C 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
011F 120000      E     LCALL   ?C?PSTXDATA
0122 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0125 E4                CLR     A
0126 F0                MOVX    @DPTR,A
0127 A3                INC     DPTR
0128 7402              MOV     A,#02H
012A F0                MOVX    @DPTR,A
012B D001              POP     AR1
012D D002              POP     AR2
012F D003              POP     AR3
0131 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 170
0134 900000      E     MOV     DPTR,#mem_full_flag
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 EF                MOV     A,R7
013A 602F              JZ      ?C0021
                                           ; SOURCE LINE # 171
013C 900000      E     MOV     DPTR,#mem_full_flag
013F E4                CLR     A
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
0141 7B01              MOV     R3,#01H
0143 7A00        E     MOV     R2,#HIGH mem_full_flag
0145 7900        E     MOV     R1,#LOW mem_full_flag
0147 C003              PUSH    AR3
0149 C002              PUSH    AR2
014B C001              PUSH    AR1
014D 7BFF              MOV     R3,#0FFH
014F 7A00        E     MOV     R2,#HIGH mem_full_flash_flag
0151 7900        E     MOV     R1,#LOW mem_full_flash_flag
0153 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0156 120000      E     LCALL   ?C?PSTXDATA
0159 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
015C E4                CLR     A
015D F0                MOVX    @DPTR,A
015E A3                INC     DPTR
015F 7401              MOV     A,#01H
0161 F0                MOVX    @DPTR,A
0162 D001              POP     AR1
0164 D002              POP     AR2
0166 D003              POP     AR3
0168 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 173
016B         ?C0020:
                                           ; SOURCE LINE # 176
016B         ?C0021:
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 20  

016B 22                RET     
             ; FUNCTION clear_samples (END)

             ; FUNCTION reset_pointers (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 180
0000 900000      E     MOV     DPTR,#pointer_head_index
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0008 900000      E     MOV     DPTR,#pointer_tail_index
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
0011 900000      E     MOV     DPTR,#sample_head_index
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0019 900000      E     MOV     DPTR,#sample_tail_index
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0021 7B01              MOV     R3,#01H
0023 7A00        E     MOV     R2,#HIGH pointer_head_index
0025 7900        E     MOV     R1,#LOW pointer_head_index
0027 C003              PUSH    AR3
0029 C002              PUSH    AR2
002B C001              PUSH    AR1
002D 7BFF              MOV     R3,#0FFH
002F 7A00        E     MOV     R2,#HIGH master_sample_indices
0031 7900        E     MOV     R1,#LOW master_sample_indices
0033 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0036 120000      E     LCALL   ?C?PSTXDATA
0039 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F 7402              MOV     A,#02H
0041 F0                MOVX    @DPTR,A
0042 D001              POP     AR1
0044 D002              POP     AR2
0046 D003              POP     AR3
0048 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 187
004B 7B01              MOV     R3,#01H
004D 7A00        E     MOV     R2,#HIGH pointer_tail_index
004F 7900        E     MOV     R1,#LOW pointer_tail_index
0051 C003              PUSH    AR3
0053 C002              PUSH    AR2
0055 C001              PUSH    AR1
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 21  

0057 7BFF              MOV     R3,#0FFH
0059 7A00        E     MOV     R2,#HIGH master_sample_indices+02H
005B 7900        E     MOV     R1,#LOW master_sample_indices+02H
005D 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0060 120000      E     LCALL   ?C?PSTXDATA
0063 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0066 E4                CLR     A
0067 F0                MOVX    @DPTR,A
0068 A3                INC     DPTR
0069 7402              MOV     A,#02H
006B F0                MOVX    @DPTR,A
006C D001              POP     AR1
006E D002              POP     AR2
0070 D003              POP     AR3
0072 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 190
0075 7B01              MOV     R3,#01H
0077 7A00        E     MOV     R2,#HIGH sample_head_index
0079 7900        E     MOV     R1,#LOW sample_head_index
007B C003              PUSH    AR3
007D C002              PUSH    AR2
007F C001              PUSH    AR1
0081 7BFF              MOV     R3,#0FFH
0083 7A00        E     MOV     R2,#HIGH current_sample_indices
0085 7900        E     MOV     R1,#LOW current_sample_indices
0087 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
008A 120000      E     LCALL   ?C?PSTXDATA
008D 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0090 E4                CLR     A
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 7402              MOV     A,#02H
0095 F0                MOVX    @DPTR,A
0096 D001              POP     AR1
0098 D002              POP     AR2
009A D003              POP     AR3
009C 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 191
009F 7B01              MOV     R3,#01H
00A1 7A00        E     MOV     R2,#HIGH sample_tail_index
00A3 7900        E     MOV     R1,#LOW sample_tail_index
00A5 C003              PUSH    AR3
00A7 C002              PUSH    AR2
00A9 C001              PUSH    AR1
00AB 7BFF              MOV     R3,#0FFH
00AD 7A00        E     MOV     R2,#HIGH current_sample_indices+02H
00AF 7900        E     MOV     R1,#LOW current_sample_indices+02H
00B1 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
00B4 120000      E     LCALL   ?C?PSTXDATA
00B7 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
00BA E4                CLR     A
00BB F0                MOVX    @DPTR,A
00BC A3                INC     DPTR
00BD 7402              MOV     A,#02H
00BF F0                MOVX    @DPTR,A
00C0 D001              POP     AR1
00C2 D002              POP     AR2
00C4 D003              POP     AR3
00C6 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 194
00C9         ?C0022:
00C9 22                RET     
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/19/2014 19:58:52 PAGE 22  

             ; FUNCTION reset_pointers (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1502    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     31    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
