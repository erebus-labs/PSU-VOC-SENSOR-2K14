C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE STOPCOLLECTION_IRQ
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\StopCollection_IRQ.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\StopCollection_IRQ.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\StopCollect
                    -ion_IRQ.lst) CD DB NOIP OT(0,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\StopCo
                    -llection_IRQ.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: StopCollection_IRQ.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include <cydevice_trm.h>
  19          #include <CyLib.h>
  20          #include <StopCollection_IRQ.h>
  21          
  22          #if !defined(StopCollection_IRQ__REMOVED) /* Check for removal by optimization */
  23          
  24          /*******************************************************************************
  25          *  Place your includes, defines and code here 
  26          ********************************************************************************/
  27          /* `#START StopCollection_IRQ_intc` */
  28              #include "Interface.h"
  29              #include "Globals.h"
  30              #include "Macros.h"
  31          /* `#END` */
  32          
  33          
  34          /*******************************************************************************
  35          * Function Name: StopCollection_IRQ_Start
  36          ********************************************************************************
  37          *
  38          * Summary:
  39          *  Set up the interrupt and enable it.
  40          *
  41          * Parameters:  
  42          *   None
  43          *
  44          * Return:
  45          *   None
  46          *
  47          *******************************************************************************/
  48          void StopCollection_IRQ_Start(void) 
  49          {
  50   1          /* For all we know the interrupt is active. */
  51   1          StopCollection_IRQ_Disable();
  52   1      
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 2   

  53   1          /* Set the ISR to point to the StopCollection_IRQ Interrupt. */
  54   1          StopCollection_IRQ_SetVector(&StopCollection_IRQ_Interrupt);
  55   1      
  56   1          /* Set the priority. */
  57   1          StopCollection_IRQ_SetPriority((uint8)StopCollection_IRQ_INTC_PRIOR_NUMBER);
  58   1      
  59   1          /* Enable it. */
  60   1          StopCollection_IRQ_Enable();
  61   1      }
  62          
  63          
  64          /*******************************************************************************
  65          * Function Name: StopCollection_IRQ_StartEx
  66          ********************************************************************************
  67          *
  68          * Summary:
  69          *  Set up the interrupt and enable it.
  70          *
  71          * Parameters:  
  72          *   address: Address of the ISR to set in the interrupt vector table.
  73          *
  74          * Return:
  75          *   None
  76          *
  77          *******************************************************************************/
  78          void StopCollection_IRQ_StartEx(cyisraddress address) 
  79          {
  80   1          /* For all we know the interrupt is active. */
  81   1          StopCollection_IRQ_Disable();
  82   1      
  83   1          /* Set the ISR to point to the StopCollection_IRQ Interrupt. */
  84   1          StopCollection_IRQ_SetVector(address);
  85   1      
  86   1          /* Set the priority. */
  87   1          StopCollection_IRQ_SetPriority((uint8)StopCollection_IRQ_INTC_PRIOR_NUMBER);
  88   1      
  89   1          /* Enable it. */
  90   1          StopCollection_IRQ_Enable();
  91   1      }
  92          
  93          
  94          /*******************************************************************************
  95          * Function Name: StopCollection_IRQ_Stop
  96          ********************************************************************************
  97          *
  98          * Summary:
  99          *   Disables and removes the interrupt.
 100          *
 101          * Parameters:  
 102          *   None
 103          *
 104          * Return:
 105          *   None
 106          *
 107          *******************************************************************************/
 108          void StopCollection_IRQ_Stop(void) 
 109          {
 110   1          /* Disable this interrupt. */
 111   1          StopCollection_IRQ_Disable();
 112   1      }
 113          
 114          
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 3   

 115          /*******************************************************************************
 116          * Function Name: StopCollection_IRQ_Interrupt
 117          ********************************************************************************
 118          * Summary:
 119          *   The default Interrupt Service Routine for StopCollection_IRQ.
 120          *
 121          *   Add custom code between the coments to keep the next version of this file
 122          *   from over writting your code.
 123          *
 124          * Parameters:  
 125          *   None
 126          *
 127          * Return:
 128          *   None
 129          *
 130          *******************************************************************************/
 131          CY_ISR(StopCollection_IRQ_Interrupt)
 132          {
 133   1          /*  Place your Interrupt code here. */
 134   1          /* `#START StopCollection_IRQ_Interrupt` */
 135   1          
 136   1          #ifdef SLEEP_EN
 137   1          CyPmRestoreClocks(); 
 138   1          RTC_EnableInt();
 139   1          LED_off(ALL);
 140   1          LED_PWM_Wakeup();
 141   1          #endif 
 142   1          
 143   1          LED_on(BUTTON);
 144   1          DataStop_waiting = 1;
 145   1              
 146   1          /* `#END` */
 147   1      
 148   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 149   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 150   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (StopCollection_IRQ__ES2_PATCH )) 
             -     
                          StopCollection_IRQ_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 153   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 154   1      }
 155          
 156          
 157          /*******************************************************************************
 158          * Function Name: StopCollection_IRQ_SetVector
 159          ********************************************************************************
 160          *
 161          * Summary:
 162          *   Change the ISR vector for the Interrupt. Note calling StopCollection_IRQ_Start
 163          *   will override any effect this method would have had. To set the vector 
 164          *   before the component has been started use StopCollection_IRQ_StartEx instead.
 165          *
 166          * Parameters:
 167          *   address: Address of the ISR to set in the interrupt vector table.
 168          *
 169          * Return:
 170          *   None
 171          *
 172          *******************************************************************************/
 173          void StopCollection_IRQ_SetVector(cyisraddress address) 
 174          {
 175   1          CY_SET_REG16(StopCollection_IRQ_INTC_VECTOR, (uint16) address);
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 4   

 176   1      }
 177          
 178          
 179          /*******************************************************************************
 180          * Function Name: StopCollection_IRQ_GetVector
 181          ********************************************************************************
 182          *
 183          * Summary:
 184          *   Gets the "address" of the current ISR vector for the Interrupt.
 185          *
 186          * Parameters:
 187          *   None
 188          *
 189          * Return:
 190          *   Address of the ISR in the interrupt vector table.
 191          *
 192          *******************************************************************************/
 193          cyisraddress StopCollection_IRQ_GetVector(void) 
 194          {
 195   1          return (cyisraddress) CY_GET_REG16(StopCollection_IRQ_INTC_VECTOR);
 196   1      }
 197          
 198          
 199          /*******************************************************************************
 200          * Function Name: StopCollection_IRQ_SetPriority
 201          ********************************************************************************
 202          *
 203          * Summary:
 204          *   Sets the Priority of the Interrupt. Note calling StopCollection_IRQ_Start
 205          *   or StopCollection_IRQ_StartEx will override any effect this method would 
 206          *   have had. This method should only be called after StopCollection_IRQ_Start or 
 207          *   StopCollection_IRQ_StartEx has been called. To set the initial
 208          *   priority for the component use the cydwr file in the tool.
 209          *
 210          * Parameters:
 211          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
 212          *
 213          * Return:
 214          *   None
 215          *
 216          *******************************************************************************/
 217          void StopCollection_IRQ_SetPriority(uint8 priority) 
 218          {
 219   1          *StopCollection_IRQ_INTC_PRIOR = priority << 5;
 220   1      }
 221          
 222          
 223          /*******************************************************************************
 224          * Function Name: StopCollection_IRQ_GetPriority
 225          ********************************************************************************
 226          *
 227          * Summary:
 228          *   Gets the Priority of the Interrupt.
 229          *
 230          * Parameters:
 231          *   None
 232          *
 233          * Return:
 234          *   Priority of the interrupt. 0 - 7, 0 being the highest.
 235          *
 236          *******************************************************************************/
 237          uint8 StopCollection_IRQ_GetPriority(void) 
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 5   

 238          {
 239   1          uint8 priority;
 240   1      
 241   1      
 242   1          priority = *StopCollection_IRQ_INTC_PRIOR >> 5;
 243   1      
 244   1          return priority;
 245   1      }
 246          
 247          
 248          /*******************************************************************************
 249          * Function Name: StopCollection_IRQ_Enable
 250          ********************************************************************************
 251          *
 252          * Summary:
 253          *   Enables the interrupt.
 254          *
 255          * Parameters:
 256          *   None
 257          *
 258          * Return:
 259          *   None
 260          *
 261          *******************************************************************************/
 262          void StopCollection_IRQ_Enable(void) 
 263          {
 264   1          /* Enable the general interrupt. */
 265   1          *StopCollection_IRQ_INTC_SET_EN = StopCollection_IRQ__INTC_MASK;
 266   1      }
 267          
 268          
 269          /*******************************************************************************
 270          * Function Name: StopCollection_IRQ_GetState
 271          ********************************************************************************
 272          *
 273          * Summary:
 274          *   Gets the state (enabled, disabled) of the Interrupt.
 275          *
 276          * Parameters:
 277          *   None
 278          *
 279          * Return:
 280          *   1 if enabled, 0 if disabled.
 281          *
 282          *******************************************************************************/
 283          uint8 StopCollection_IRQ_GetState(void) 
 284          {
 285   1          /* Get the state of the general interrupt. */
 286   1          return ((*StopCollection_IRQ_INTC_SET_EN & (uint8)StopCollection_IRQ__INTC_MASK) != 0u) ? 1u:0u;
 287   1      }
 288          
 289          
 290          /*******************************************************************************
 291          * Function Name: StopCollection_IRQ_Disable
 292          ********************************************************************************
 293          *
 294          * Summary:
 295          *   Disables the Interrupt.
 296          *
 297          * Parameters:
 298          *   None
 299          *
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 6   

 300          * Return:
 301          *   None
 302          *
 303          *******************************************************************************/
 304          void StopCollection_IRQ_Disable(void) 
 305          {
 306   1          /* Disable the general interrupt. */
 307   1          *StopCollection_IRQ_INTC_CLR_EN = StopCollection_IRQ__INTC_MASK;
 308   1      }
 309          
 310          
 311          /*******************************************************************************
 312          * Function Name: StopCollection_IRQ_SetPending
 313          ********************************************************************************
 314          *
 315          * Summary:
 316          *   Causes the Interrupt to enter the pending state, a software method of
 317          *   generating the interrupt.
 318          *
 319          * Parameters:
 320          *   None
 321          *
 322          * Return:
 323          *   None
 324          *
 325          *******************************************************************************/
 326          void StopCollection_IRQ_SetPending(void) 
 327          {
 328   1          *StopCollection_IRQ_INTC_SET_PD = StopCollection_IRQ__INTC_MASK;
 329   1      }
 330          
 331          
 332          /*******************************************************************************
 333          * Function Name: StopCollection_IRQ_ClearPending
 334          ********************************************************************************
 335          *
 336          * Summary:
 337          *   Clears a pending interrupt.
 338          *
 339          * Parameters:
 340          *   None
 341          *
 342          * Return:
 343          *   None
 344          *
 345          *******************************************************************************/
 346          void StopCollection_IRQ_ClearPending(void) 
 347          {
 348   1          *StopCollection_IRQ_INTC_CLR_PD = StopCollection_IRQ__INTC_MASK;
 349   1      }
 350          
 351          #endif /* End check for removal by optimization */
 352          
 353          
 354          /* [] END OF FILE */
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION StopCollection_IRQ_Start (BEGIN)
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 51
0000 120000      R     LCALL   StopCollection_IRQ_Disable
                                           ; SOURCE LINE # 54
0003 7E00        R     MOV     R6,#HIGH StopCollection_IRQ_Interrupt
0005 7F00        R     MOV     R7,#LOW StopCollection_IRQ_Interrupt
0007 120000      R     LCALL   _StopCollection_IRQ_SetVector
                                           ; SOURCE LINE # 57
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _StopCollection_IRQ_SetPriority
                                           ; SOURCE LINE # 60
000F 120000      R     LCALL   StopCollection_IRQ_Enable
                                           ; SOURCE LINE # 61
0012         ?C0001:
0012 22                RET     
             ; FUNCTION StopCollection_IRQ_Start (END)

             ; FUNCTION _StopCollection_IRQ_StartEx (BEGIN)
                                           ; SOURCE LINE # 78
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0008 120000      R     LCALL   StopCollection_IRQ_Disable
                                           ; SOURCE LINE # 84
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _StopCollection_IRQ_SetVector
                                           ; SOURCE LINE # 87
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _StopCollection_IRQ_SetPriority
                                           ; SOURCE LINE # 90
001B 120000      R     LCALL   StopCollection_IRQ_Enable
                                           ; SOURCE LINE # 91
001E         ?C0002:
001E 22                RET     
             ; FUNCTION _StopCollection_IRQ_StartEx (END)

             ; FUNCTION StopCollection_IRQ_Stop (BEGIN)
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 111
0000 120000      R     LCALL   StopCollection_IRQ_Disable
                                           ; SOURCE LINE # 112
0003         ?C0003:
0003 22                RET     
             ; FUNCTION StopCollection_IRQ_Stop (END)

             ; FUNCTION StopCollection_IRQ_Interrupt (BEGIN)
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 8   

0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 137
002B 120000      E     LCALL   CyPmRestoreClocks
                                           ; SOURCE LINE # 138
002E 120000      E     LCALL   RTC_EnableInt
                                           ; SOURCE LINE # 139
0031 7F00              MOV     R7,#00H
0033 120000      E     LCALL   _LED_off
                                           ; SOURCE LINE # 140
0036 120000      E     LCALL   LED_PWM_Wakeup
                                           ; SOURCE LINE # 143
0039 7F06              MOV     R7,#06H
003B 120000      E     LCALL   _LED_on
                                           ; SOURCE LINE # 144
003E 900000      E     MOV     DPTR,#DataStop_waiting
0041 7401              MOV     A,#01H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0044         ?C0004:
0044 D007              POP     AR7
0046 D006              POP     AR6
0048 D005              POP     AR5
004A D004              POP     AR4
004C D003              POP     AR3
004E D002              POP     AR2
0050 D001              POP     AR1
0052 D000              POP     AR0
0054 D0D0              POP     PSW
0056 D000        E     POP     ?C?XPAGE1SFR
0058 D086              POP     DPS
005A D084              POP     DPL1
005C D085              POP     DPH1
005E D082              POP     DPL
0060 D083              POP     DPH
0062 D0F0              POP     B
0064 D0E0              POP     ACC
0066 32                RETI    
             ; FUNCTION StopCollection_IRQ_Interrupt (END)

             ; FUNCTION _StopCollection_IRQ_SetVector (BEGIN)
                                           ; SOURCE LINE # 173
0000 900000      R     MOV     DPTR,#address
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 9   

0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7916              MOV     R1,#016H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 176
001D         ?C0005:
001D 22                RET     
             ; FUNCTION _StopCollection_IRQ_SetVector (END)

             ; FUNCTION StopCollection_IRQ_GetVector (BEGIN)
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7916              MOV     R1,#016H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 196
0009         ?C0006:
0009 22                RET     
             ; FUNCTION StopCollection_IRQ_GetVector (END)

             ; FUNCTION _StopCollection_IRQ_SetPriority (BEGIN)
                                           ; SOURCE LINE # 217
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 90448B            MOV     DPTR,#0448BH
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0015         ?C0007:
0015 22                RET     
             ; FUNCTION _StopCollection_IRQ_SetPriority (END)

             ; FUNCTION StopCollection_IRQ_GetPriority (BEGIN)
                                           ; SOURCE LINE # 237
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 10  

                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 242
0000 90448B            MOV     DPTR,#0448BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 245
0015         ?C0008:
0015 22                RET     
             ; FUNCTION StopCollection_IRQ_GetPriority (END)

             ; FUNCTION StopCollection_IRQ_Enable (BEGIN)
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 265
0000 9044C1            MOV     DPTR,#044C1H
0003 7408              MOV     A,#08H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0006         ?C0009:
0006 22                RET     
             ; FUNCTION StopCollection_IRQ_Enable (END)

             ; FUNCTION StopCollection_IRQ_GetState (BEGIN)
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 286
0000 9044C1            MOV     DPTR,#044C1H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E304            JNB     ACC.3,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 287
000F         ?C0012:
000F 22                RET     
             ; FUNCTION StopCollection_IRQ_GetState (END)

             ; FUNCTION StopCollection_IRQ_Disable (BEGIN)
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 307
0000 9044C9            MOV     DPTR,#044C9H
0003 7408              MOV     A,#08H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
0006         ?C0013:
C51 COMPILER V9.51   STOPCOLLECTION_IRQ                                                    05/07/2014 04:58:00 PAGE 11  

0006 22                RET     
             ; FUNCTION StopCollection_IRQ_Disable (END)

             ; FUNCTION StopCollection_IRQ_SetPending (BEGIN)
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0000 9044D1            MOV     DPTR,#044D1H
0003 7408              MOV     A,#08H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
0006         ?C0014:
0006 22                RET     
             ; FUNCTION StopCollection_IRQ_SetPending (END)

             ; FUNCTION StopCollection_IRQ_ClearPending (BEGIN)
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
0000 9044D9            MOV     DPTR,#044D9H
0003 7408              MOV     A,#08H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0006         ?C0015:
0006 22                RET     
             ; FUNCTION StopCollection_IRQ_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    285    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
