C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE EEPROM_R
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\EEPROM_R.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\EEPROM_R.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\EEPROM_R.lst) CD DB N
                    -OIP OT(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\EEPROM_R.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: EEPROM_R.c
   3          * Version 2.10
   4          *
   5          * Description:
   6          *  Provides the source code to the API for the EEPROM component.
   7          *
   8          ********************************************************************************
   9          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions,
  11          * disclaimers, and limitations in the end user license agreement accompanying
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          #include "EEPROM_R.h"
  16          
  17          
  18          #if (CY_PSOC3 || CY_PSOC5LP)
  19          
  20              /*******************************************************************************
  21              * Function Name: EEPROM_R_Enable
  22              ********************************************************************************
  23              *
  24              * Summary:
  25              *  Enable the EEPROM.
  26              *
  27              * Parameters:
  28              *  None
  29              *
  30              * Return:
  31              *  None
  32              *
  33              *******************************************************************************/
  34              void EEPROM_R_Enable(void) 
  35              {
  36   1              CyEEPROM_Start();
  37   1          }
  38          
  39          
  40              /*******************************************************************************
  41              * Function Name: EEPROM_R_Start
  42              ********************************************************************************
  43              *
  44              * Summary:
  45              *  Starts EEPROM.
  46              *
  47              * Parameters:
  48              *  None
  49              *
  50              * Return:
  51              *  None
  52              *
  53              *******************************************************************************/
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 2   

  54              void EEPROM_R_Start(void) 
  55              {
  56   1              /* Enable the EEPROM */
  57   1              EEPROM_R_Enable();
  58   1          }
  59          
  60          
  61              /*******************************************************************************
  62              * Function Name: EEPROM_R_Stop
  63              ********************************************************************************
  64              *
  65              * Summary:
  66              *  Stops and powers down EEPROM.
  67              *
  68              * Parameters:
  69              *  None
  70              *
  71              * Return:
  72              *  None
  73              *
  74              *******************************************************************************/
  75              void EEPROM_R_Stop (void) 
  76              {
  77   1              /* Disable EEPROM */
  78   1              CyEEPROM_Stop();
  79   1          }
  80          
  81          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: EEPROM_R_EraseSector
  86          ********************************************************************************
  87          *
  88          * Summary:
  89          *  Erases a sector of memory. This function blocks until the operation is
  90          *  complete.
  91          *
  92          * Parameters:
  93          *  sectorNumber:  Sector number to erase.
  94          *
  95          * Return:
  96          *  CYRET_SUCCESS, if the operation was successful.
  97          *  CYRET_BAD_PARAM, if the parameter sectorNumber out of range.
  98          *  CYRET_LOCKED, if the spc is being used.
  99          *  CYRET_UNKNOWN, if there was an SPC error.
 100          *
 101          *******************************************************************************/
 102          cystatus EEPROM_R_EraseSector(uint8 sectorNumber) 
 103          {
 104   1          cystatus status;
 105   1      
 106   1          /* Start the SPC */
 107   1          CySpcStart();
 108   1      
 109   1          if(sectorNumber < (uint8) CY_EEPROM_NUMBER_ARRAYS)
 110   1          {
 111   2              /* See if we can get the SPC. */
 112   2              if(CySpcLock() == CYRET_SUCCESS)
 113   2              {
 114   3                  #if(CY_PSOC5A)
              
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 3   

                              /* Plan for failure */
                              status = CYRET_UNKNOWN;
              
                              /* Command to load a row of data */
                              if(CySpcLoadRow(CY_SPC_FIRST_EE_ARRAYID, 0, CYDEV_EEPROM_ROW_SIZE) == CYRET_STARTED)
                              {
                                  while(CY_SPC_BUSY)
                                  {
                                      /* Wait until SPC becomes idle */
                                  }
              
                                  /* SPC is idle now */
                                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
                                  {
                                      status = CYRET_SUCCESS;
                                  }
                              }
              
                              /* Command to erase a sector */
                              if(status == CYRET_SUCCESS)
                              {
              
                          #endif /* (CY_PSOC5A) */
 139   3      
 140   3                          if(CySpcEraseSector(CY_SPC_FIRST_EE_ARRAYID, sectorNumber) == CYRET_STARTED)
 141   3                          {
 142   4                              /* Plan for failure */
 143   4                              status = CYRET_UNKNOWN;
 144   4      
 145   4                              while(CY_SPC_BUSY)
 146   4                              {
 147   5                                  /* Wait until SPC becomes idle */
 148   5                              }
 149   4      
 150   4                              /* SPC is idle now */
 151   4                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 152   4                              {
 153   5                                  status = CYRET_SUCCESS;
 154   5                              }
 155   4                          }
 156   3                          else
 157   3                          {
 158   4                              status = CYRET_UNKNOWN;
 159   4                          }
 160   3      
 161   3                  #if(CY_PSOC5A)
              
                              }
                              else
                              {
                                  status = CYRET_UNKNOWN;
                              }
              
                          #endif /* (CY_PSOC5A) */
 170   3      
 171   3                      /* Unlock the SPC so someone else can use it. */
 172   3                      CySpcUnlock();
 173   3              }
 174   2              else
 175   2              {
 176   3                  status = CYRET_LOCKED;
 177   3              }
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 4   

 178   2          }
 179   1          else
 180   1          {
 181   2              status = CYRET_BAD_PARAM;
 182   2          }
 183   1      
 184   1          return(status);
 185   1      }
 186          
 187          
 188          /*******************************************************************************
 189          * Function Name: EEPROM_R_Write
 190          ********************************************************************************
 191          *
 192          * Summary:
 193          *  Writes a row, CYDEV_EEPROM_ROW_SIZE of data to the EEPROM. This is
 194          *  a blocking call. It will not return until the function succeeds or fails.
 195          *
 196          * Parameters:
 197          *  rowData:  Address of the data to write to the EEPROM.
 198          *  rowNumber:  EEPROM row number to program.
 199          *
 200          * Return:
 201          *  CYRET_SUCCESS, if the operation was successful.
 202          *  CYRET_BAD_PARAM, if the parameter rowNumber out of range.
 203          *  CYRET_LOCKED, if the spc is being used.
 204          *  CYRET_UNKNOWN, if there was an SPC error.
 205          *
 206          *******************************************************************************/
 207          cystatus EEPROM_R_Write(const uint8 * rowData, uint8 rowNumber) 
 208          {
 209   1          cystatus status;
 210   1      
 211   1          /* Start the SPC */
 212   1          CySpcStart();
 213   1      
 214   1          if(rowNumber < (uint8) CY_EEPROM_NUMBER_ROWS)
 215   1          {
 216   2              /* See if we can get the SPC. */
 217   2              if(CySpcLock() == CYRET_SUCCESS)
 218   2              {
 219   3                  /* Plan for failure */
 220   3                  status = CYRET_UNKNOWN;
 221   3      
 222   3                  /* Command to load a row of data */
 223   3                  if(CySpcLoadRow(CY_SPC_FIRST_EE_ARRAYID, rowData, CYDEV_EEPROM_ROW_SIZE) == CYRET_STARTED)
 224   3                  {
 225   4                      while(CY_SPC_BUSY)
 226   4                      {
 227   5                          /* Wait until SPC becomes idle */
 228   5                      }
 229   4      
 230   4                      /* SPC is idle now */
 231   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 232   4                      {
 233   5                          status = CYRET_SUCCESS;
 234   5                      }
 235   4      
 236   4                      /* Command to erase and program the row. */
 237   4                      if(status == CYRET_SUCCESS)
 238   4                      {
 239   5                          if(CySpcWriteRow(CY_SPC_FIRST_EE_ARRAYID, (uint16)rowNumber, dieTemperature[0],
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 5   

 240   5                          dieTemperature[1]) == CYRET_STARTED)
 241   5                          {
 242   6                              /* Plan for failure */
 243   6                              status = CYRET_UNKNOWN;
 244   6      
 245   6                              while(CY_SPC_BUSY)
 246   6                              {
 247   7                                  /* Wait until SPC becomes idle */
 248   7                              }
 249   6      
 250   6                              /* SPC is idle now */
 251   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 252   6                              {
 253   7                                  status = CYRET_SUCCESS;
 254   7                              }
 255   6                          }
 256   5                          else
 257   5                          {
 258   6                              status = CYRET_UNKNOWN;
 259   6                          }
 260   5                      }
 261   4                      else
 262   4                      {
 263   5                          status = CYRET_UNKNOWN;
 264   5                      }
 265   4                  }
 266   3      
 267   3                  /* Unlock the SPC so someone else can use it. */
 268   3                  CySpcUnlock();
 269   3              }
 270   2              else
 271   2              {
 272   3                  status = CYRET_LOCKED;
 273   3              }
 274   2          }
 275   1          else
 276   1          {
 277   2              status = CYRET_BAD_PARAM;
 278   2          }
 279   1      
 280   1          return(status);
 281   1      }
 282          
 283          
 284          /*******************************************************************************
 285          * Function Name: EEPROM_R_StartWrite
 286          ********************************************************************************
 287          *
 288          * Summary:
 289          *  Starts the SPC write function. This function does not block, it returns
 290          *  once the command has begun the SPC write function. This function must be used
 291          *  in combination with EEPROM_R_QueryWrite(). Once this function has
 292          *  been called the SPC will be locked until EEPROM_R_QueryWrite()
 293          *  returns CYRET_SUCCESS.
 294          *
 295          * Parameters:
 296          *  rowData:  Address of buffer containing a row of data to write to the EEPROM.
 297          *  rowNumber:  EEPROM row number to program.
 298          *
 299          * Return:
 300          *  CYRET_STARTED, if the spc command to write was successfuly started.
 301          *  CYRET_BAD_PARAM, if the parameter rowNumber out of range.
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 6   

 302          *  CYRET_LOCKED, if the spc is being used.
 303          *  CYRET_UNKNOWN, if there was an SPC error.
 304          *
 305          *******************************************************************************/
 306          cystatus EEPROM_R_StartWrite(const uint8 * rowData, uint8 rowNumber) \
 307          
 308          {
 309   1          cystatus status;
 310   1      
 311   1          if(rowNumber < (uint8) CY_EEPROM_NUMBER_ROWS)
 312   1          {
 313   2              /* See if we can get the SPC. */
 314   2              if(CySpcLock() == CYRET_SUCCESS)
 315   2              {
 316   3                  /* Plan for failure */
 317   3                  status = CYRET_UNKNOWN;
 318   3      
 319   3                  /* Command to load a row of data */
 320   3                  if(CySpcLoadRow(CY_SPC_FIRST_EE_ARRAYID, rowData, CYDEV_EEPROM_ROW_SIZE) == CYRET_STARTED)
 321   3                  {
 322   4                      while(CY_SPC_BUSY)
 323   4                      {
 324   5                          /* Wait until SPC becomes idle */
 325   5                      }
 326   4      
 327   4                      /* SPC is idle now */
 328   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 329   4                      {
 330   5                          status = CYRET_SUCCESS;
 331   5                      }
 332   4      
 333   4                      /* Command to erase and program the row. */
 334   4                      if(status == CYRET_SUCCESS)
 335   4                      {
 336   5                          if(CySpcWriteRow(CY_SPC_FIRST_EE_ARRAYID, (uint16)rowNumber, dieTemperature[0],
 337   5                          dieTemperature[1]) == CYRET_STARTED)
 338   5                          {
 339   6                              status = CYRET_STARTED;
 340   6                          }
 341   5                          else
 342   5                          {
 343   6                              status = CYRET_UNKNOWN;
 344   6                          }
 345   5                      }
 346   4                      else
 347   4                      {
 348   5                          status = CYRET_UNKNOWN;
 349   5                      }
 350   4                  }
 351   3              }
 352   2              else
 353   2              {
 354   3                  status = CYRET_LOCKED;
 355   3              }
 356   2          }
 357   1          else
 358   1          {
 359   2              status = CYRET_BAD_PARAM;
 360   2          }
 361   1      
 362   1          return(status);
 363   1      }
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 7   

 364          
 365          
 366          /*******************************************************************************
 367          * Function Name: EEPROM_R_QueryWrite
 368          ********************************************************************************
 369          *
 370          * Summary:
 371          *  Checks the state of write to EEPROM. This function must be called until
 372          *  the return value is not CYRET_STARTED.
 373          *
 374          * Parameters:
 375          *  None
 376          *
 377          * Return:
 378          *  CYRET_STARTED, if the spc command is still processing.
 379          *  CYRET_SUCCESS, if the operation was successful.
 380          *  CYRET_UNKNOWN, if there was an SPC error.
 381          *
 382          *******************************************************************************/
 383          cystatus EEPROM_R_QueryWrite(void) 
 384          {
 385   1          cystatus status;
 386   1      
 387   1          /* Check if SPC is idle */
 388   1          if(CY_SPC_IDLE)
 389   1          {
 390   2              /* SPC is idle now */
 391   2              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 392   2              {
 393   3                  status = CYRET_SUCCESS;
 394   3              }
 395   2              else
 396   2              {
 397   3                  status = CYRET_UNKNOWN;
 398   3              }
 399   2      
 400   2              /* Unlock the SPC so someone else can use it. */
 401   2              CySpcUnlock();
 402   2          }
 403   1          else
 404   1          {
 405   2              status = CYRET_STARTED;
 406   2          }
 407   1      
 408   1          return(status);
 409   1      }
 410          
 411          
 412          /*******************************************************************************
 413          * Function Name: EEPROM_R_ByteWrite
 414          ********************************************************************************
 415          *
 416          * Summary:
 417          *  Writes a byte of data to the EEPROM. This is a blocking call. It will not
 418          *  return until the function succeeds or fails.
 419          *
 420          * Parameters:
 421          *  dataByte:  Byte of data to write to the EEPROM.
 422          *  rowNumber:  EEPROM row number to program.
 423          *  byteNumber:  Byte number within the row to program.
 424          *
 425          * Return:
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 8   

 426          *  CYRET_SUCCESS, if the operation was successful.
 427          *  CYRET_BAD_PARAM, if the parameter rowNumber or byteNumber out of range.
 428          *  CYRET_LOCKED, if the spc is being used.
 429          *  CYRET_UNKNOWN, if there was an SPC error.
 430          *
 431          *******************************************************************************/
 432          cystatus EEPROM_R_ByteWrite(uint8 dataByte, uint8 rowNumber, uint8 byteNumber) \
 433          
 434          {
 435   1          cystatus status;
 436   1      
 437   1          /* Start the SPC */
 438   1          CySpcStart();
 439   1      
 440   1          if((rowNumber < (uint8) CY_EEPROM_NUMBER_ROWS) && (byteNumber < (uint8) SIZEOF_EEPROM_ROW))
 441   1          {
 442   2              /* See if we can get the SPC. */
 443   2              if(CySpcLock() == CYRET_SUCCESS)
 444   2              {
 445   3                  /* Plan for failure */
 446   3                  status = CYRET_UNKNOWN;
 447   3      
 448   3                  /* Command to load a byte of data */
 449   3                  if(CySpcLoadMultiByte(CY_SPC_FIRST_EE_ARRAYID, (uint16)byteNumber, &dataByte,\
 450   3                                                                      EEPROM_R_SPC_BYTE_WRITE_SIZE) == CYRET_STA
             -RTED)
 451   3                  {
 452   4                      while(CY_SPC_BUSY)
 453   4                      {
 454   5                          /* Wait until SPC becomes idle */
 455   5                      }
 456   4      
 457   4                      /* SPC is idle now */
 458   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 459   4                      {
 460   5                          status = CYRET_SUCCESS;
 461   5                      }
 462   4      
 463   4                      /* Command to erase and program the row. */
 464   4                      if(status == CYRET_SUCCESS)
 465   4                      {
 466   5                          if(CySpcWriteRow(CY_SPC_FIRST_EE_ARRAYID, (uint16)rowNumber, dieTemperature[0],
 467   5                          dieTemperature[1]) == CYRET_STARTED)
 468   5                          {
 469   6                              /* Plan for failure */
 470   6                              status = CYRET_UNKNOWN;
 471   6      
 472   6                              while(CY_SPC_BUSY)
 473   6                              {
 474   7                                  /* Wait until SPC becomes idle */
 475   7                              }
 476   6      
 477   6                              /* SPC is idle now */
 478   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 479   6                              {
 480   7                                  status = CYRET_SUCCESS;
 481   7                              }
 482   6                          }
 483   5                          else
 484   5                          {
 485   6                              status = CYRET_UNKNOWN;
 486   6                          }
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 9   

 487   5                      }
 488   4                      else
 489   4                      {
 490   5                          status = CYRET_UNKNOWN;
 491   5                      }
 492   4                  }
 493   3      
 494   3                  /* Unlock the SPC so someone else can use it. */
 495   3                  CySpcUnlock();
 496   3              }
 497   2              else
 498   2              {
 499   3                  status = CYRET_LOCKED;
 500   3              }
 501   2          }
 502   1          else
 503   1          {
 504   2              status = CYRET_BAD_PARAM;
 505   2          }
 506   1      
 507   1          return(status);
 508   1      }
 509          
 510          
 511          /* [] END OF FILE */
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION EEPROM_R_Enable (BEGIN)
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
0000 120000      E     LCALL   CyEEPROM_Start
                                           ; SOURCE LINE # 37
0003 22                RET     
             ; FUNCTION EEPROM_R_Enable (END)

             ; FUNCTION EEPROM_R_Start (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0000 120000      R     LCALL   EEPROM_R_Enable
                                           ; SOURCE LINE # 58
0003 22                RET     
             ; FUNCTION EEPROM_R_Start (END)

             ; FUNCTION EEPROM_R_Stop (BEGIN)
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 78
0000 120000      E     LCALL   CyEEPROM_Stop
                                           ; SOURCE LINE # 79
0003 22                RET     
             ; FUNCTION EEPROM_R_Stop (END)

             ; FUNCTION _EEPROM_R_EraseSector (BEGIN)
                                           ; SOURCE LINE # 102
0000 900000      R     MOV     DPTR,#sectorNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 107
0005 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 109
0008 900000      R     MOV     DPTR,#sectorNumber
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E C3                CLR     C
000F 9402              SUBB    A,#02H
0011 5065              JNC     ?C0004
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 112
0013 120000      E     LCALL   CySpcLock
0016 EF                MOV     A,R7
0017 7057              JNZ     ?C0005
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 140
0019 900000      R     MOV     DPTR,#sectorNumber
001C E0                MOVX    A,@DPTR
001D FD                MOV     R5,A
001E 7F40              MOV     R7,#040H
0020 120000      E     LCALL   _CySpcEraseSector
0023 EF                MOV     A,R7
0024 6407              XRL     A,#07H
0026 703D              JNZ     ?C0006
                                           ; SOURCE LINE # 141
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 11  

                                           ; SOURCE LINE # 143
0028 900000      R     MOV     DPTR,#status
002B 74FF              MOV     A,#0FFH
002D F0                MOVX    @DPTR,A
002E         ?C0007:
                                           ; SOURCE LINE # 145
002E 904722            MOV     DPTR,#04722H
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 5402              ANL     A,#02H
0036 FF                MOV     R7,A
0037 7E00              MOV     R6,#00H
0039 EF                MOV     A,R7
003A 4E                ORL     A,R6
003B 60F1              JZ      ?C0007
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 148
003D         ?C0008:
                                           ; SOURCE LINE # 151
003D 904722            MOV     DPTR,#04722H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 5402              ANL     A,#02H
0045 FF                MOV     R7,A
0046 7E00              MOV     R6,#00H
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A 600D              JZ      ?C0010
004C 904722            MOV     DPTR,#04722H
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 13                RRC     A
0053 13                RRC     A
0054 543F              ANL     A,#03FH
0056 FF                MOV     R7,A
0057 8002              SJMP    ?C0011
0059         ?C0010:
0059 7FFF              MOV     R7,#0FFH
005B         ?C0011:
005B EF                MOV     A,R7
005C 700D              JNZ     ?C0012
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
005E 900000      R     MOV     DPTR,#status
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0063 8006              SJMP    ?C0012
0065         ?C0006:
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0065 900000      R     MOV     DPTR,#status
0068 74FF              MOV     A,#0FFH
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
006B         ?C0012:
                                           ; SOURCE LINE # 172
006B 120000      E     LCALL   CySpcUnlock
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 12  

                                           ; SOURCE LINE # 173
006E 800E              SJMP    ?C0014
0070         ?C0005:
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0070 900000      R     MOV     DPTR,#status
0073 7404              MOV     A,#04H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
0076 8006              SJMP    ?C0014
0078         ?C0004:
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0078 900000      R     MOV     DPTR,#status
007B 7401              MOV     A,#01H
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
007E         ?C0014:
                                           ; SOURCE LINE # 184
007E 900000      R     MOV     DPTR,#status
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
                                           ; SOURCE LINE # 185
0083         ?C0015:
0083 22                RET     
             ; FUNCTION _EEPROM_R_EraseSector (END)

             ; FUNCTION _EEPROM_R_Write (BEGIN)
                                           ; SOURCE LINE # 207
0000 900000      R     MOV     DPTR,#rowData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#rowNumber
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 212
000B 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 214
000E 900000      R     MOV     DPTR,#rowNumber
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 C3                CLR     C
0015 9480              SUBB    A,#080H
0017 4003              JC      $ + 5H
0019 020000      R     LJMP    ?C0016
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 217
001C 120000      E     LCALL   CySpcLock
001F EF                MOV     A,R7
0020 6003              JZ      $ + 5H
0022 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 220
0025 900000      R     MOV     DPTR,#status
0028 74FF              MOV     A,#0FFH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
002B 900000      R     MOV     DPTR,#rowData
002E 120000      E     LCALL   ?C?PLDXDATA
0031 900000      E     MOV     DPTR,#?_CySpcLoadRow?BYTE+04H
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 13  

0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 7410              MOV     A,#010H
0039 F0                MOVX    @DPTR,A
003A 7F40              MOV     R7,#040H
003C 120000      E     LCALL   _CySpcLoadRow
003F EF                MOV     A,R7
0040 6407              XRL     A,#07H
0042 6003              JZ      $ + 5H
0044 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 224
0047         ?C0019:
                                           ; SOURCE LINE # 225
0047 904722            MOV     DPTR,#04722H
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 5402              ANL     A,#02H
004F FF                MOV     R7,A
0050 7E00              MOV     R6,#00H
0052 EF                MOV     A,R7
0053 4E                ORL     A,R6
0054 60F1              JZ      ?C0019
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 228
0056         ?C0020:
                                           ; SOURCE LINE # 231
0056 904722            MOV     DPTR,#04722H
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 5402              ANL     A,#02H
005E FF                MOV     R7,A
005F 7E00              MOV     R6,#00H
0061 EF                MOV     A,R7
0062 4E                ORL     A,R6
0063 600D              JZ      ?C0022
0065 904722            MOV     DPTR,#04722H
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B 13                RRC     A
006C 13                RRC     A
006D 543F              ANL     A,#03FH
006F FF                MOV     R7,A
0070 8002              SJMP    ?C0023
0072         ?C0022:
0072 7FFF              MOV     R7,#0FFH
0074         ?C0023:
0074 EF                MOV     A,R7
0075 7005              JNZ     ?C0021
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0077 900000      R     MOV     DPTR,#status
007A E4                CLR     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
007C         ?C0021:
                                           ; SOURCE LINE # 237
007C 900000      R     MOV     DPTR,#status
007F E0                MOVX    A,@DPTR
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 14  

0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 7067              JNZ     ?C0024
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0084 900000      R     MOV     DPTR,#rowNumber
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A FD                MOV     R5,A
008B 7C00              MOV     R4,#00H
008D 900000      E     MOV     DPTR,#dieTemperature
0090 E0                MOVX    A,@DPTR
0091 FB                MOV     R3,A
0092 900000      E     MOV     DPTR,#dieTemperature+01H
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
009C 7F40              MOV     R7,#040H
009E 120000      E     LCALL   _CySpcWriteRow
00A1 EF                MOV     A,R7
00A2 6407              XRL     A,#07H
00A4 703D              JNZ     ?C0025
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 243
00A6 900000      R     MOV     DPTR,#status
00A9 74FF              MOV     A,#0FFH
00AB F0                MOVX    @DPTR,A
00AC         ?C0026:
                                           ; SOURCE LINE # 245
00AC 904722            MOV     DPTR,#04722H
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 5402              ANL     A,#02H
00B4 FF                MOV     R7,A
00B5 7E00              MOV     R6,#00H
00B7 EF                MOV     A,R7
00B8 4E                ORL     A,R6
00B9 60F1              JZ      ?C0026
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 248
00BB         ?C0027:
                                           ; SOURCE LINE # 251
00BB 904722            MOV     DPTR,#04722H
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 EF                MOV     A,R7
00C1 5402              ANL     A,#02H
00C3 FF                MOV     R7,A
00C4 7E00              MOV     R6,#00H
00C6 EF                MOV     A,R7
00C7 4E                ORL     A,R6
00C8 600D              JZ      ?C0029
00CA 904722            MOV     DPTR,#04722H
00CD E0                MOVX    A,@DPTR
00CE FF                MOV     R7,A
00CF EF                MOV     A,R7
00D0 13                RRC     A
00D1 13                RRC     A
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 15  

00D2 543F              ANL     A,#03FH
00D4 FF                MOV     R7,A
00D5 8002              SJMP    ?C0030
00D7         ?C0029:
00D7 7FFF              MOV     R7,#0FFH
00D9         ?C0030:
00D9 EF                MOV     A,R7
00DA 7015              JNZ     ?C0018
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
00DC 900000      R     MOV     DPTR,#status
00DF E4                CLR     A
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
00E1 800E              SJMP    ?C0018
00E3         ?C0025:
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
00E3 900000      R     MOV     DPTR,#status
00E6 74FF              MOV     A,#0FFH
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
00E9 8006              SJMP    ?C0018
00EB         ?C0024:
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
00EB 900000      R     MOV     DPTR,#status
00EE 74FF              MOV     A,#0FFH
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
00F1         ?C0018:
                                           ; SOURCE LINE # 268
00F1 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 269
00F4 800E              SJMP    ?C0034
00F6         ?C0017:
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
00F6 900000      R     MOV     DPTR,#status
00F9 7404              MOV     A,#04H
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
00FC 8006              SJMP    ?C0034
00FE         ?C0016:
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
00FE 900000      R     MOV     DPTR,#status
0101 7401              MOV     A,#01H
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0104         ?C0034:
                                           ; SOURCE LINE # 280
0104 900000      R     MOV     DPTR,#status
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
                                           ; SOURCE LINE # 281
0109         ?C0035:
0109 22                RET     
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 16  

             ; FUNCTION _EEPROM_R_Write (END)

             ; FUNCTION _EEPROM_R_StartWrite (BEGIN)
                                           ; SOURCE LINE # 306
0000 900000      R     MOV     DPTR,#rowData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#rowNumber
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 311
000B 900000      R     MOV     DPTR,#rowNumber
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 C3                CLR     C
0012 9480              SUBB    A,#080H
0014 4003              JC      $ + 5H
0016 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 314
0019 120000      E     LCALL   CySpcLock
001C EF                MOV     A,R7
001D 6003              JZ      $ + 5H
001F 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 317
0022 900000      R     MOV     DPTR,#status
0025 74FF              MOV     A,#0FFH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 320
0028 900000      R     MOV     DPTR,#rowData
002B 120000      E     LCALL   ?C?PLDXDATA
002E 900000      E     MOV     DPTR,#?_CySpcLoadRow?BYTE+04H
0031 E4                CLR     A
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 7410              MOV     A,#010H
0036 F0                MOVX    @DPTR,A
0037 7F40              MOV     R7,#040H
0039 120000      E     LCALL   _CySpcLoadRow
003C EF                MOV     A,R7
003D 6407              XRL     A,#07H
003F 6003              JZ      $ + 5H
0041 020000      R     LJMP    ?C0049
                                           ; SOURCE LINE # 321
0044         ?C0039:
                                           ; SOURCE LINE # 322
0044 904722            MOV     DPTR,#04722H
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A 5402              ANL     A,#02H
004C FF                MOV     R7,A
004D 7E00              MOV     R6,#00H
004F EF                MOV     A,R7
0050 4E                ORL     A,R6
0051 60F1              JZ      ?C0039
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 325
0053         ?C0040:
                                           ; SOURCE LINE # 328
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 17  

0053 904722            MOV     DPTR,#04722H
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 5402              ANL     A,#02H
005B FF                MOV     R7,A
005C 7E00              MOV     R6,#00H
005E EF                MOV     A,R7
005F 4E                ORL     A,R6
0060 600D              JZ      ?C0042
0062 904722            MOV     DPTR,#04722H
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 13                RRC     A
0069 13                RRC     A
006A 543F              ANL     A,#03FH
006C FF                MOV     R7,A
006D 8002              SJMP    ?C0043
006F         ?C0042:
006F 7FFF              MOV     R7,#0FFH
0071         ?C0043:
0071 EF                MOV     A,R7
0072 7005              JNZ     ?C0041
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0074 900000      R     MOV     DPTR,#status
0077 E4                CLR     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 331
0079         ?C0041:
                                           ; SOURCE LINE # 334
0079 900000      R     MOV     DPTR,#status
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F 7031              JNZ     ?C0044
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0081 900000      R     MOV     DPTR,#rowNumber
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 EF                MOV     A,R7
0087 FD                MOV     R5,A
0088 7C00              MOV     R4,#00H
008A 900000      E     MOV     DPTR,#dieTemperature
008D E0                MOVX    A,@DPTR
008E FB                MOV     R3,A
008F 900000      E     MOV     DPTR,#dieTemperature+01H
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
0099 7F40              MOV     R7,#040H
009B 120000      E     LCALL   _CySpcWriteRow
009E EF                MOV     A,R7
009F B40708            CJNE    A,#07H,?C0045
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
00A2 900000      R     MOV     DPTR,#status
00A5 7407              MOV     A,#07H
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 18  

00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
00A8 801E              SJMP    ?C0049
00AA         ?C0045:
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
00AA 900000      R     MOV     DPTR,#status
00AD 74FF              MOV     A,#0FFH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
00B0 8016              SJMP    ?C0049
00B2         ?C0044:
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
00B2 900000      R     MOV     DPTR,#status
00B5 74FF              MOV     A,#0FFH
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
00B8 800E              SJMP    ?C0049
00BA         ?C0037:
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
00BA 900000      R     MOV     DPTR,#status
00BD 7404              MOV     A,#04H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
00C0 8006              SJMP    ?C0049
00C2         ?C0036:
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
00C2 900000      R     MOV     DPTR,#status
00C5 7401              MOV     A,#01H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
00C8         ?C0049:
                                           ; SOURCE LINE # 362
00C8 900000      R     MOV     DPTR,#status
00CB E0                MOVX    A,@DPTR
00CC FF                MOV     R7,A
                                           ; SOURCE LINE # 363
00CD         ?C0050:
00CD 22                RET     
             ; FUNCTION _EEPROM_R_StartWrite (END)

             ; FUNCTION EEPROM_R_QueryWrite (BEGIN)
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 388
0000 904722            MOV     DPTR,#04722H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5402              ANL     A,#02H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6033              JZ      ?C0051
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 19  

                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 391
000F 904722            MOV     DPTR,#04722H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5402              ANL     A,#02H
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 4E                ORL     A,R6
001C 600D              JZ      ?C0053
001E 904722            MOV     DPTR,#04722H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 13                RRC     A
0025 13                RRC     A
0026 543F              ANL     A,#03FH
0028 FF                MOV     R7,A
0029 8002              SJMP    ?C0054
002B         ?C0053:
002B 7FFF              MOV     R7,#0FFH
002D         ?C0054:
002D EF                MOV     A,R7
002E 7007              JNZ     ?C0052
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0030 900000      R     MOV     DPTR,#status
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
0035 8006              SJMP    ?C0055
0037         ?C0052:
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
0037 900000      R     MOV     DPTR,#status
003A 74FF              MOV     A,#0FFH
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
003D         ?C0055:
                                           ; SOURCE LINE # 401
003D 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 402
0040 8006              SJMP    ?C0056
0042         ?C0051:
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
0042 900000      R     MOV     DPTR,#status
0045 7407              MOV     A,#07H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
0048         ?C0056:
                                           ; SOURCE LINE # 408
0048 900000      R     MOV     DPTR,#status
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
                                           ; SOURCE LINE # 409
004D         ?C0057:
004D 22                RET     
             ; FUNCTION EEPROM_R_QueryWrite (END)

C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 20  

             ; FUNCTION _EEPROM_R_ByteWrite (BEGIN)
                                           ; SOURCE LINE # 432
0000 900000      R     MOV     DPTR,#dataByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowNumber
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#byteNumber
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 438
000F 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 440
0012 900000      R     MOV     DPTR,#rowNumber
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 C3                CLR     C
0019 9480              SUBB    A,#080H
001B 4003              JC      $ + 5H
001D 020000      R     LJMP    ?C0058
0020 900000      R     MOV     DPTR,#byteNumber
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 C3                CLR     C
0027 9410              SUBB    A,#010H
0029 4003              JC      $ + 5H
002B 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 443
002E 120000      E     LCALL   CySpcLock
0031 EF                MOV     A,R7
0032 6003              JZ      $ + 5H
0034 020000      R     LJMP    ?C0059
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 446
0037 900000      R     MOV     DPTR,#status
003A 74FF              MOV     A,#0FFH
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
003D 900000      R     MOV     DPTR,#byteNumber
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 FD                MOV     R5,A
0044 7C00              MOV     R4,#00H
0046 7B01              MOV     R3,#01H
0048 7A00        R     MOV     R2,#HIGH dataByte
004A 7900        R     MOV     R1,#LOW dataByte
004C 900000      E     MOV     DPTR,#?_CySpcLoadMultiByte?BYTE+06H
004F 7401              MOV     A,#01H
0051 F0                MOVX    @DPTR,A
0052 7F40              MOV     R7,#040H
0054 120000      E     LCALL   _CySpcLoadMultiByte
0057 EF                MOV     A,R7
0058 6407              XRL     A,#07H
005A 6003              JZ      $ + 5H
005C 020000      R     LJMP    ?C0060
                                           ; SOURCE LINE # 451
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 21  

005F         ?C0061:
                                           ; SOURCE LINE # 452
005F 904722            MOV     DPTR,#04722H
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 5402              ANL     A,#02H
0067 FF                MOV     R7,A
0068 7E00              MOV     R6,#00H
006A EF                MOV     A,R7
006B 4E                ORL     A,R6
006C 60F1              JZ      ?C0061
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 455
006E         ?C0062:
                                           ; SOURCE LINE # 458
006E 904722            MOV     DPTR,#04722H
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 5402              ANL     A,#02H
0076 FF                MOV     R7,A
0077 7E00              MOV     R6,#00H
0079 EF                MOV     A,R7
007A 4E                ORL     A,R6
007B 600D              JZ      ?C0064
007D 904722            MOV     DPTR,#04722H
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 EF                MOV     A,R7
0083 13                RRC     A
0084 13                RRC     A
0085 543F              ANL     A,#03FH
0087 FF                MOV     R7,A
0088 8002              SJMP    ?C0065
008A         ?C0064:
008A 7FFF              MOV     R7,#0FFH
008C         ?C0065:
008C EF                MOV     A,R7
008D 7005              JNZ     ?C0063
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
008F 900000      R     MOV     DPTR,#status
0092 E4                CLR     A
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0094         ?C0063:
                                           ; SOURCE LINE # 464
0094 900000      R     MOV     DPTR,#status
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 7067              JNZ     ?C0066
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
009C 900000      R     MOV     DPTR,#rowNumber
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 FD                MOV     R5,A
00A3 7C00              MOV     R4,#00H
00A5 900000      E     MOV     DPTR,#dieTemperature
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 22  

00A8 E0                MOVX    A,@DPTR
00A9 FB                MOV     R3,A
00AA 900000      E     MOV     DPTR,#dieTemperature+01H
00AD E0                MOVX    A,@DPTR
00AE FF                MOV     R7,A
00AF 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
00B2 EF                MOV     A,R7
00B3 F0                MOVX    @DPTR,A
00B4 7F40              MOV     R7,#040H
00B6 120000      E     LCALL   _CySpcWriteRow
00B9 EF                MOV     A,R7
00BA 6407              XRL     A,#07H
00BC 703D              JNZ     ?C0067
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 470
00BE 900000      R     MOV     DPTR,#status
00C1 74FF              MOV     A,#0FFH
00C3 F0                MOVX    @DPTR,A
00C4         ?C0068:
                                           ; SOURCE LINE # 472
00C4 904722            MOV     DPTR,#04722H
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 EF                MOV     A,R7
00CA 5402              ANL     A,#02H
00CC FF                MOV     R7,A
00CD 7E00              MOV     R6,#00H
00CF EF                MOV     A,R7
00D0 4E                ORL     A,R6
00D1 60F1              JZ      ?C0068
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 475
00D3         ?C0069:
                                           ; SOURCE LINE # 478
00D3 904722            MOV     DPTR,#04722H
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 5402              ANL     A,#02H
00DB FF                MOV     R7,A
00DC 7E00              MOV     R6,#00H
00DE EF                MOV     A,R7
00DF 4E                ORL     A,R6
00E0 600D              JZ      ?C0071
00E2 904722            MOV     DPTR,#04722H
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 13                RRC     A
00E9 13                RRC     A
00EA 543F              ANL     A,#03FH
00EC FF                MOV     R7,A
00ED 8002              SJMP    ?C0072
00EF         ?C0071:
00EF 7FFF              MOV     R7,#0FFH
00F1         ?C0072:
00F1 EF                MOV     A,R7
00F2 7015              JNZ     ?C0060
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
00F4 900000      R     MOV     DPTR,#status
00F7 E4                CLR     A
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 23  

00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
00F9 800E              SJMP    ?C0060
00FB         ?C0067:
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
00FB 900000      R     MOV     DPTR,#status
00FE 74FF              MOV     A,#0FFH
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
0101 8006              SJMP    ?C0060
0103         ?C0066:
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
0103 900000      R     MOV     DPTR,#status
0106 74FF              MOV     A,#0FFH
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
0109         ?C0060:
                                           ; SOURCE LINE # 495
0109 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 496
010C 800E              SJMP    ?C0076
010E         ?C0059:
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
010E 900000      R     MOV     DPTR,#status
0111 7404              MOV     A,#04H
0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
0114 8006              SJMP    ?C0076
0116         ?C0058:
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
0116 900000      R     MOV     DPTR,#status
0119 7401              MOV     A,#01H
011B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
011C         ?C0076:
                                           ; SOURCE LINE # 507
011C 900000      R     MOV     DPTR,#status
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
                                           ; SOURCE LINE # 508
0121         ?C0077:
0121 22                RET     
             ; FUNCTION _EEPROM_R_ByteWrite (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    984    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.51   EEPROM_R                                                              03/21/2014 14:33:26 PAGE 24  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
