C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYPM
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyPm.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyPm.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\cyPm.lst) CD DB NOIP OT(3,SPEED)
                    - INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\cyPm.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: cyPm.c
   3          * Version 4.0
   4          *
   5          * Description:
   6          *  Provides an API for the power management.
   7          *
   8          * Note:
   9          *  Documentation of the API's in this file is located in the
  10          *  System Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "cyPm.h"
  20          
  21          
  22          /*******************************************************************
  23          * Place your includes, defines and code here. Do not use merge
  24          * region below unless any component datasheet suggest to do so.
  25          *******************************************************************/
  26          /* `#START CY_PM_HEADER_INCLUDE` */
  27          
  28          /* `#END` */
  29          
  30          
  31          static CY_PM_BACKUP_STRUCT          cyPmBackup;
  32          static CY_PM_CLOCK_BACKUP_STRUCT    cyPmClockBackup;
  33          
  34          /* Convertion table between register's values and frequency in MHz  */
  35          static const uint8 CYCODE cyPmImoFreqReg2Mhz[7u] = {12u, 6u, 24u, 3u, 48u, 62u, 74u};
  36          
  37          /* Function Prototypes */
  38          static void CyPmHibSaveSet(void);
  39          static void CyPmHibRestore(void) ;
  40          
  41          static void CyPmHibSlpSaveSet(void) ;
  42          static void CyPmHibSlpRestore(void) ;
  43          
  44          static void CyPmHviLviSaveDisable(void) ;
  45          static void CyPmHviLviRestore(void) ;
  46          
  47          
  48          /*******************************************************************************
  49          * Function Name: CyPmSaveClocks
  50          ********************************************************************************
  51          *
  52          * Summary:
  53          *  This function is called in preparation for entering sleep or hibernate low
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 2   

  54          *  power modes. Saves all state of the clocking system that does not persist
  55          *  during sleep/hibernate or that needs to be altered in preparation for
  56          *  sleep/hibernate. Shutdowns all the digital and analog clock dividers for the
  57          *  active power mode configuration.
  58          *
  59          *  Switches the master clock over to the IMO and shuts down the PLL and MHz
  60          *  Crystal. The IMO frequency is set to either 12 MHz or 48 MHz to match the
  61          *  Design-Wide Resources System Editor "Enable Fast IMO During Startup" setting.
  62          *  The ILO and 32 KHz oscillators are not impacted. The current Flash wait state
  63          *  setting is saved and the Flash wait state setting is set for the current IMO
  64          *  speed.
  65          *
  66          *  Note If the Master Clock source is routed through the DSI inputs, then it
  67          *  must be set manually to another source before using the
  68          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
  69          *
  70          * Parameters:
  71          *  None
  72          *
  73          * Return:
  74          *  None
  75          *
  76          * Side Effects:
  77          *  All peripheral clocks are going to be off after this API method call.
  78          *
  79          *******************************************************************************/
  80          void CyPmSaveClocks(void) 
  81          {
  82   1          /* Digital and analog clocks - save enable state and disable them all */
  83   1          cyPmClockBackup.enClkA = CY_PM_ACT_CFG1_REG & CY_PM_ACT_EN_CLK_A_MASK;
  84   1          cyPmClockBackup.enClkD = CY_PM_ACT_CFG2_REG;
  85   1          CY_PM_ACT_CFG1_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_A_MASK));
  86   1          CY_PM_ACT_CFG2_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_D_MASK));
  87   1      
  88   1          /* Save current flash wait cycles and set the maximum value */
  89   1          cyPmClockBackup.flashWaitCycles = CY_PM_CACHE_CR_CYCLES_MASK & CY_PM_CACHE_CR_REG;
  90   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
  91   1      
  92   1          /* IMO - save current IMO MHz OSC frequency and USB mode is on bit */
  93   1          cyPmClockBackup.imoFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
  94   1          cyPmClockBackup.imoUsbClk = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_USB;
  95   1      
  96   1          /* IMO doubler - save enable state */
  97   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
  98   1          {
  99   2              /* IMO doubler enabled - save and disable */
 100   2              cyPmClockBackup.imo2x = CY_PM_ENABLED;
 101   2          }
 102   1          else
 103   1          {
 104   2              /* IMO doubler disabled */
 105   2              cyPmClockBackup.imo2x = CY_PM_DISABLED;
 106   2          }
 107   1      
 108   1          /* IMO - set appropriate frequency for LPM */
 109   1          CyIMO_SetFreq(CY_PM_IMO_FREQ_LPM);
 110   1      
 111   1          /* IMO - save enable state and enable without wait to settle */
 112   1          if(0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG))
 113   1          {
 114   2              /* IMO - save enabled state */
 115   2              cyPmClockBackup.imoEnable = CY_PM_ENABLED;
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 3   

 116   2          }
 117   1          else
 118   1          {
 119   2              /* IMO - save disabled state */
 120   2              cyPmClockBackup.imoEnable = CY_PM_DISABLED;
 121   2      
 122   2              /* IMO - enable */
 123   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 124   2          }
 125   1      
 126   1          /* IMO - save the current IMOCLK source and set to IMO if not yet */
 127   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_XCLKEN))
 128   1          {
 129   2              /* DSI or XTAL CLK */
 130   2              cyPmClockBackup.imoClkSrc =
 131   2                  (0u == (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO2X_SRC)) ? CY_IMO_SOURCE_DSI : CY_IMO_SOURCE_X
             -TAL;
 132   2      
 133   2              /* IMO -  set IMOCLK source to MHz OSC */
 134   2              CyIMO_SetSource(CY_IMO_SOURCE_IMO);
 135   2          }
 136   1          else
 137   1          {
 138   2              /* IMO */
 139   2              cyPmClockBackup.imoClkSrc = CY_IMO_SOURCE_IMO;
 140   2          }
 141   1      
 142   1          /* Save clk_imo source */
 143   1          cyPmClockBackup.clkImoSrc = CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK;
 144   1      
 145   1          /* If IMOCLK2X or SPC OSC is source for clk_imo, set it to IMOCLK */
 146   1          if(CY_PM_CLKDIST_IMO_OUT_IMO != cyPmClockBackup.clkImoSrc)
 147   1          {
 148   2              /* Set IMOCLK to source for clk_imo */
 149   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 150   2                                      CY_PM_CLKDIST_IMO_OUT_IMO;
 151   2          }    /* Need to change nothing if IMOCLK is source clk_imo */
 152   1      
 153   1          /* IMO doubler - disable it (saved above) */
 154   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
 155   1          {
 156   2              CyIMO_DisableDoubler();
 157   2          }
 158   1      
 159   1          /* Master clock - save divider and set it to divide-by-one (if no yet) */
 160   1          cyPmClockBackup.clkSyncDiv = CY_PM_CLKDIST_MSTR0_REG;
 161   1          if(CY_PM_DIV_BY_ONE != cyPmClockBackup.clkSyncDiv)
 162   1          {
 163   2              CyMasterClk_SetDivider(CY_PM_DIV_BY_ONE);
 164   2          }    /* Need to change nothing if master clock divider is 1 */
 165   1      
 166   1          /* Master clock - save current source */
 167   1          cyPmClockBackup.masterClkSrc = CY_PM_CLKDIST_MSTR1_REG & CY_PM_MASTER_CLK_SRC_MASK;
 168   1      
 169   1          /* Master clock source - set it to IMO if not yet. */
 170   1          if(CY_MASTER_SOURCE_IMO != cyPmClockBackup.masterClkSrc)
 171   1          {
 172   2              CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 173   2          }    /* Need to change nothing if master clock source is IMO */
 174   1      
 175   1          /* Bus clock - save divider and set it, if needed, to divide-by-one */
 176   1          cyPmClockBackup.clkBusDiv = (uint16) ((uint16) CY_PM_CLK_BUS_MSB_DIV_REG << 8u);
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 4   

 177   1          cyPmClockBackup.clkBusDiv |= CY_PM_CLK_BUS_LSB_DIV_REG;
 178   1          if(CY_PM_BUS_CLK_DIV_BY_ONE != cyPmClockBackup.clkBusDiv)
 179   1          {
 180   2              CyBusClk_SetDivider(CY_PM_BUS_CLK_DIV_BY_ONE);
 181   2          }    /* Do nothing if saved and actual values are equal */
 182   1      
 183   1          /* Set number of wait cycles for the flash according CPU frequency in MHz */
 184   1          CyFlash_SetWaitCycles((uint8)CY_PM_GET_CPU_FREQ_MHZ);
 185   1      
 186   1          /* PLL - check enable state, disable if needed */
 187   1          if(0u != (CY_PM_FASTCLK_PLL_CFG0_REG & CY_PM_PLL_CFG0_ENABLE))
 188   1          {
 189   2              /* PLL is enabled - save state and disable */
 190   2              cyPmClockBackup.pllEnableState = CY_PM_ENABLED;
 191   2              CyPLL_OUT_Stop();
 192   2          }
 193   1          else
 194   1          {
 195   2              /* PLL is disabled - save state */
 196   2              cyPmClockBackup.pllEnableState = CY_PM_DISABLED;
 197   2          }
 198   1      
 199   1          /* MHz ECO - check enable state and disable if needed */
 200   1          if(0u != (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_ENABLE))
 201   1          {
 202   2              /* MHz ECO is enabled - save state and disable */
 203   2              cyPmClockBackup.xmhzEnableState = CY_PM_ENABLED;
 204   2              CyXTAL_Stop();
 205   2          }
 206   1          else
 207   1          {
 208   2              /* MHz ECO is disabled - save state */
 209   2              cyPmClockBackup.xmhzEnableState = CY_PM_DISABLED;
 210   2          }
 211   1      
 212   1      
 213   1          /***************************************************************************
 214   1          * Save enable state of delay between the system bus clock and each of the
 215   1          * 4 individual analog clocks. This bit non-retention and it's value should
 216   1          * be restored on wakeup.
 217   1          ***************************************************************************/
 218   1          if(0u != (CY_PM_CLKDIST_DELAY_REG & CY_PM_CLKDIST_DELAY_EN))
 219   1          {
 220   2              cyPmClockBackup.clkDistDelay = CY_PM_ENABLED;
 221   2          }
 222   1          else
 223   1          {
 224   2              cyPmClockBackup.clkDistDelay = CY_PM_DISABLED;
 225   2          }
 226   1      }
 227          
 228          
 229          /*******************************************************************************
 230          * Function Name: CyPmRestoreClocks
 231          ********************************************************************************
 232          *
 233          * Summary:
 234          *  Restores any state that was preserved by the last call to CyPmSaveClocks().
 235          *  The Flash wait state setting is also restored.
 236          *
 237          *  Note If the Master Clock source is routed through the DSI inputs, then it
 238          *  must be set manually to another source before using the
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 5   

 239          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
 240          *
 241          *  PSoC 3 and PSoC 5LP:
 242          *  The merge region could be used to process state when the megahertz crystal is
 243          *  not ready after the hold-off timeout.
 244          *
 245          *  PSoC 5:
 246          *  The 130 ms is given for the megahertz crystal to stabilize. It's readiness is
 247          *  not verified after the hold-off timeout.
 248          *
 249          * Parameters:
 250          *  None
 251          *
 252          * Return:
 253          *  None
 254          *
 255          *******************************************************************************/
 256          void CyPmRestoreClocks(void) 
 257          {
 258   1          cystatus status = CYRET_TIMEOUT;
 259   1          uint16 i;
 260   1          uint16 clkBusDivTmp;
 261   1      
 262   1      
 263   1          /* Convertion table between CyIMO_SetFreq() parameters and register's value */
 264   1          const uint8 CYCODE cyPmImoFreqMhz2Reg[7u] = {
 265   1              CY_IMO_FREQ_12MHZ, CY_IMO_FREQ_6MHZ,  CY_IMO_FREQ_24MHZ, CY_IMO_FREQ_3MHZ,
 266   1              CY_IMO_FREQ_48MHZ, 5u, 6u};
 267   1      
 268   1          /* Restore enable state of delay between the system bus clock and ACLKs. */
 269   1          if(CY_PM_ENABLED == cyPmClockBackup.clkDistDelay)
 270   1          {
 271   2              /* Delay for both the bandgap and the delay line to settle out */
 272   2              CyDelayCycles((uint32)(CY_PM_CLK_DELAY_BANDGAP_SETTLE_US + CY_PM_CLK_DELAY_BIAS_SETTLE_US) *
 273   2                              CY_PM_GET_CPU_FREQ_MHZ);
 274   2      
 275   2              CY_PM_CLKDIST_DELAY_REG |= CY_PM_CLKDIST_DELAY_EN;
 276   2          }
 277   1      
 278   1          /* MHz ECO restore state */
 279   1          if(CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState)
 280   1          {
 281   2              /***********************************************************************
 282   2              * Enabling XMHZ XTAL. The actual CyXTAL_Start() with non zero wait
 283   2              * period uses FTW for period measurement. This could cause a problem
 284   2              * if CTW/FTW is used as a wake up time in the low power modes APIs.
 285   2              * So, the XTAL wait procedure is implemented with a software delay.
 286   2              ***********************************************************************/
 287   2      
 288   2              /* Enable XMHZ XTAL with no wait */
 289   2              (void) CyXTAL_Start(CY_PM_XTAL_MHZ_NO_WAIT);
 290   2      
 291   2              /* Read XERR bit to clear it */
 292   2              (void) CY_PM_FASTCLK_XMHZ_CSR_REG;
 293   2      
 294   2              /* Wait */
 295   2              for(i = CY_PM_MHZ_XTAL_WAIT_NUM_OF_200_US; i > 0u; i--)
 296   2              {
 297   3                  /* Make a 200 microseconds delay */
 298   3                  CyDelayCycles((uint32)CY_PM_WAIT_200_US * CY_PM_GET_CPU_FREQ_MHZ);
 299   3      
 300   3                  /* High output indicates oscillator failure */
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 6   

 301   3                  if(0u == (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_XERR))
 302   3                  {
 303   4                      status = CYRET_SUCCESS;
 304   4                      break;
 305   4                  }
 306   3              }
 307   2      
 308   2              if(CYRET_TIMEOUT == status)
 309   2              {
 310   3                  /*******************************************************************
 311   3                  * Process the situation when megahertz crystal is not ready.
 312   3                  * Time to stabialize value is crystal specific.
 313   3                  *******************************************************************/
 314   3                 /* `#START_MHZ_ECO_TIMEOUT` */
 315   3      
 316   3                 /* `#END` */
 317   3              }
 318   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState) */
 319   1      
 320   1      
 321   1          /* Temprorary set the maximum flash wait cycles */
 322   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
 323   1      
 324   1          /* The XTAL and DSI clocks are ready to be source for Master clock. */
 325   1          if((CY_PM_MASTER_CLK_SRC_XTAL == cyPmClockBackup.masterClkSrc) ||
 326   1             (CY_PM_MASTER_CLK_SRC_DSI  == cyPmClockBackup.masterClkSrc))
 327   1          {
 328   2              /* Restore Master clock's divider */
 329   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 330   2              {
 331   3                  /* Restore Master clock divider */
 332   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 333   3              }
 334   2      
 335   2              /* Restore Master clock source */
 336   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 337   2          }
 338   1      
 339   1          /* IMO - restore IMO frequency */
 340   1          if((0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB)) &&
 341   1              (CY_IMO_FREQ_24MHZ == cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]))
 342   1          {
 343   2              /* Restore IMO frequency (24 MHz) and trim it for USB */
 344   2              CyIMO_SetFreq(CY_IMO_FREQ_USB);
 345   2          }
 346   1          else
 347   1          {
 348   2              /* Restore IMO frequency */
 349   2              CyIMO_SetFreq(cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]);
 350   2      
 351   2              if(0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB))
 352   2              {
 353   3                  CY_PM_FASTCLK_IMO_CR_REG |= CY_PM_FASTCLK_IMO_CR_USB;
 354   3              }
 355   2              else
 356   2              {
 357   3                  CY_PM_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_PM_FASTCLK_IMO_CR_USB));
 358   3              }
 359   2          }
 360   1      
 361   1          /* IMO - restore enable state if needed */
 362   1          if((CY_PM_ENABLED == cyPmClockBackup.imoEnable) &&
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 7   

 363   1             (0u == (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 364   1          {
 365   2              /* IMO - restore enabled state */
 366   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 367   2          }
 368   1      
 369   1          /* IMO - restore disable state if needed */
 370   1          if((CY_PM_DISABLED == cyPmClockBackup.imoEnable) &&
 371   1             (0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 372   1          {
 373   2              CyIMO_Stop();
 374   2          }
 375   1      
 376   1          /* IMO - restore IMOCLK source */
 377   1          CyIMO_SetSource(cyPmClockBackup.imoClkSrc);
 378   1      
 379   1          /* Restore IMO doubler enable state (turned off by CyPmSaveClocks()) */
 380   1          if(CY_PM_ENABLED == cyPmClockBackup.imo2x)
 381   1          {
 382   2              CyIMO_EnableDoubler();
 383   2          }
 384   1      
 385   1          /* IMO - restore clk_imo source, if needed */
 386   1          if(cyPmClockBackup.clkImoSrc != (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK))
 387   1          {
 388   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 389   2                                      cyPmClockBackup.clkImoSrc;
 390   2          }
 391   1      
 392   1          /* PLL restore state */
 393   1          if(CY_PM_ENABLED == cyPmClockBackup.pllEnableState)
 394   1          {
 395   2              /***********************************************************************
 396   2              * Enable PLL. The actual CyPLL_OUT_Start() without wait period uses FTW
 397   2              * for period measurement. This could cause a problem if CTW/FTW is used
 398   2              * as a wakeup time in the low power modes APIs. To omit this issue PLL
 399   2              * wait procedure is implemented with a software delay.
 400   2              ***********************************************************************/
 401   2      
 402   2              /* Enable PLL */
 403   2              (void) CyPLL_OUT_Start(CY_PM_PLL_OUT_NO_WAIT);
 404   2      
 405   2              /* Make a 250 us delay */
 406   2              CyDelayCycles((uint32)CY_PM_WAIT_250_US * CY_PM_GET_CPU_FREQ_MHZ);
 407   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.pllEnableState) */
 408   1      
 409   1      
 410   1          /* PLL and IMO is ready to be source for Master clock */
 411   1          if((CY_PM_MASTER_CLK_SRC_IMO == cyPmClockBackup.masterClkSrc) ||
 412   1             (CY_PM_MASTER_CLK_SRC_PLL == cyPmClockBackup.masterClkSrc))
 413   1          {
 414   2              /* Restore Master clock divider */
 415   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 416   2              {
 417   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 418   3              }
 419   2      
 420   2              /* Restore Master clock source */
 421   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 422   2          }
 423   1      
 424   1          /* Bus clock - restore divider, if needed */
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 8   

 425   1          clkBusDivTmp = (uint16) ((uint16)CY_PM_CLK_BUS_MSB_DIV_REG << 8u);
 426   1          clkBusDivTmp |= CY_PM_CLK_BUS_LSB_DIV_REG;
 427   1          if(cyPmClockBackup.clkBusDiv != clkBusDivTmp)
 428   1          {
 429   2              CyBusClk_SetDivider(cyPmClockBackup.clkBusDiv);
 430   2          }
 431   1      
 432   1          /* Restore flash wait cycles */
 433   1          CY_PM_CACHE_CR_REG = ((CY_PM_CACHE_CR_REG & ((uint8)(~CY_PM_CACHE_CR_CYCLES_MASK))) |
 434   1                                 cyPmClockBackup.flashWaitCycles);
 435   1      
 436   1          /* Digital and analog clocks - restore state */
 437   1          CY_PM_ACT_CFG1_REG = cyPmClockBackup.enClkA;
 438   1          CY_PM_ACT_CFG2_REG = cyPmClockBackup.enClkD;
 439   1      }
 440          
 441          
 442          /*******************************************************************************
 443          * Function Name: CyPmAltAct
 444          ********************************************************************************
 445          *
 446          * Summary:
 447          *  Puts the part into the Alternate Active (Standby) state. The Alternate Active
 448          *  state can allow for any of the capabilities of the device to be active, but
 449          *  the operation of this function is dependent on the CPU being disabled during
 450          *  the Alternate Active state. The configuration code and the component APIs
 451          *  will configure the template for the Alternate Active state to be the same as
 452          *  the Active state with the exception that the CPU will be disabled during
 453          *  Alternate Active.
 454          *
 455          *  Note Before calling this function, you must manually configure the power mode
 456          *  of the source clocks for the timer that is used as the wakeup timer.
 457          *
 458          *  PSoC 3:
 459          *  Before switching to Alternate Active, if a wakeupTime other than NONE is
 460          *  specified, then the appropriate timer state is configured as specified with
 461          *  the interrupt for that timer disabled.  The wakeup source will be the
 462          *  combination of the values specified in the wakeupSource and any timer
 463          *  specified in the wakeupTime argument.  Once the wakeup condition is
 464          *  satisfied, then all saved state is restored and the function returns in the
 465          *  Active state.
 466          *
 467          *  Note that if the wakeupTime is made with a different value, the period before
 468          *  the wakeup occurs can be significantly shorter than the specified time.  If
 469          *  the next call is made with the same wakeupTime value, then the wakeup will
 470          *  occur the specified period after the previous wakeup occurred.
 471          *
 472          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 473          *  specified timer will be left as specified by wakeupTime with the timer
 474          *  enabled and the interrupt disabled.  If the CTW, FTW or One PPS is already
 475          *  configured for wakeup, for example with the SleepTimer or RTC components,
 476          *  then specify NONE for the wakeupTime and include the appropriate source for
 477          *  wakeupSource.
 478          *
 479          *  PSoC 5LP:
 480          *  This function is used to both enter the Alternate Active mode and halt the
 481          *  processor.  For PSoC 3 these two actions must be paired together.  With PSoC
 482          *  5LP the processor can be halted independently with the __WFI() function from
 483          *  the CMSIS library that is included in Creator.  This function should be used
 484          *  instead when the action required is just to halt the processor until an
 485          *  enabled interrupt occurs.
 486          *
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 9   

 487          *  The wakeupTime parameter is not used for this device. It must be set to zero
 488          *  (PM_ALT_ACT_TIME_NONE). The wake up time configuration can be done by a
 489          *  separate component: the CTW wakeup interval should be configured with the
 490          *  Sleep Timer component and one second interval should be configured with the
 491          *  RTC component.
 492          *
 493          *  The wakeup behavior depends on wakeupSource parameter in the following
 494          *  manner: upon function execution the device will be switched from Active to
 495          *  Alternate Active mode and then the CPU will be halted. When an enabled wakeup
 496          *  event occurs the device will return to Active mode.  Similarly when an
 497          *  enabled interrupt occurs the CPU will be started. These two actions will
 498          *  occur together provided that the event that occurs is an enabled wakeup
 499          *  source and also generates an interrupt. If just the wakeup event occurs then
 500          *  the device will be in Active mode, but the CPU will remain halted waiting for
 501          *  an interrupt. If an interrupt occurs from something other than a wakeup
 502          *  source, then the CPU will restart with the device in Alternate Active mode
 503          *  until a wakeup event occurs.
 504          *
 505          *  For example, if CyPmAltAct(PM_ALT_ACT_TIME_NONE, PM_ALT_ACT_SRC_PICU) is
 506          *  called and PICU interrupt occurs, the CPU will be started and device will be
 507          *  switched into Active mode. And if CyPmAltAct(PM_ALT_ACT_TIME_NONE,
 508          *  PM_ALT_ACT_SRC_NONE) is called and PICU interrupt occurs, the CPU will be
 509          *  started while device remains in Alternate Active mode.
 510          *
 511          * Parameters:
 512          *  wakeupTime: Specifies a timer wakeup source and the frequency of that
 513          *              source. For PSoC 5LP this parameter is ignored.
 514          *
 515          *           Define                      Time
 516          *  PM_ALT_ACT_TIME_NONE             None
 517          *  PM_ALT_ACT_TIME_ONE_PPS          One PPS: 1 second
 518          *  PM_ALT_ACT_TIME_CTW_2MS          CTW: 2 ms
 519          *  PM_ALT_ACT_TIME_CTW_4MS          CTW: 4 ms
 520          *  PM_ALT_ACT_TIME_CTW_8MS          CTW: 8 ms
 521          *  PM_ALT_ACT_TIME_CTW_16MS         CTW: 16 ms
 522          *  PM_ALT_ACT_TIME_CTW_32MS         CTW: 32 ms
 523          *  PM_ALT_ACT_TIME_CTW_64MS         CTW: 64 ms
 524          *  PM_ALT_ACT_TIME_CTW_128MS        CTW: 128 ms
 525          *  PM_ALT_ACT_TIME_CTW_256MS        CTW: 256 ms
 526          *  PM_ALT_ACT_TIME_CTW_512MS        CTW: 512 ms
 527          *  PM_ALT_ACT_TIME_CTW_1024MS       CTW: 1024 ms
 528          *  PM_ALT_ACT_TIME_CTW_2048MS       CTW: 2048 ms
 529          *  PM_ALT_ACT_TIME_CTW_4096MS       CTW: 4096 ms
 530          *  PM_ALT_ACT_TIME_FTW(1-256)*       FTW: 10us to 2.56 ms
 531          *
 532          *  *Note:   PM_ALT_ACT_TIME_FTW() is a macro that takes an argument that
 533          *           specifies how many increments of 10 us to delay.
 534                      For PSoC 3 silicon the valid range of  values is 1 to 256.
 535          *
 536          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 537          *                   a wakeupTime has been specified the associated timer will be
 538          *                   included as a wakeup source.
 539          *
 540          *           Define                      Source
 541          *  PM_ALT_ACT_SRC_NONE              None
 542          *  PM_ALT_ACT_SRC_COMPARATOR0       Comparator 0
 543          *  PM_ALT_ACT_SRC_COMPARATOR1       Comparator 1
 544          *  PM_ALT_ACT_SRC_COMPARATOR2       Comparator 2
 545          *  PM_ALT_ACT_SRC_COMPARATOR3       Comparator 3
 546          *  PM_ALT_ACT_SRC_INTERRUPT         Interrupt
 547          *  PM_ALT_ACT_SRC_PICU              PICU
 548          *  PM_ALT_ACT_SRC_I2C               I2C
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 10  

 549          *  PM_ALT_ACT_SRC_BOOSTCONVERTER    Boost Converter
 550          *  PM_ALT_ACT_SRC_FTW               Fast Timewheel*
 551          *  PM_ALT_ACT_SRC_VD                High and Low Voltage Detection (HVI, LVI)*
 552          *  PM_ALT_ACT_SRC_CTW               Central Timewheel**
 553          *  PM_ALT_ACT_SRC_ONE_PPS           One PPS**
 554          *  PM_ALT_ACT_SRC_LCD               LCD
 555          *
 556          *  *Note : FTW and HVI/LVI wakeup signals are in the same mask bit.
 557          *  **Note: CTW and One PPS wakeup signals are in the same mask bit.
 558          *
 559          *  When specifying a Comparator as the wakeupSource an instance specific define
 560          *  should be used that will track with the specific comparator that the instance
 561          *  is placed into. As an example, for a Comparator instance named MyComp the
 562          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 563          *
 564          *  When CTW, FTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 565          *  function must be called upon wakeup with corresponding parameter. Please
 566          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 567          *  information.
 568          *
 569          * Return:
 570          *  None
 571          *
 572          * Reentrant:
 573          *  No
 574          *
 575          * Side Effects:
 576          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 577          *  specified timer will be left as specified by wakeupTime with the timer
 578          *  enabled and the interrupt disabled.  Also, the ILO 1 KHz (if CTW timer is
 579          *  used as wakeup time) or ILO 100 KHz (if FTW timer is used as wakeup time)
 580          *  will be left started.
 581          *
 582          *******************************************************************************/
 583          void CyPmAltAct(uint16 wakeupTime, uint16 wakeupSource) 
 584          {
 585   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_ALT_ACT_TIME_NONE == wakeupTime);
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 596   1      
 597   1      
 598   1          #if(CY_PSOC3)
 599   1      
 600   1              /* FTW - save current and set new configuration */
 601   1              if((wakeupTime >= PM_ALT_ACT_TIME_FTW(1u)) && (wakeupTime <= PM_ALT_ACT_TIME_FTW(256u)))
 602   1              {
 603   2                  CyPmFtwSetInterval(PM_ALT_ACT_FTW_INTERVAL(wakeupTime));
 604   2      
 605   2                  /* Include associated timer to the wakeupSource */
 606   2                  wakeupSource |= PM_ALT_ACT_SRC_FTW;
 607   2              }
 608   1      
 609   1              /* CTW - save current and set new configuration */
 610   1              if((wakeupTime >= PM_ALT_ACT_TIME_CTW_2MS) && (wakeupTime <= PM_ALT_ACT_TIME_CTW_4096MS))
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 11  

 611   1              {
 612   2                  /* Save current CTW configuration and set new one */
 613   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 614   2      
 615   2                  /* Include associated timer to the wakeupSource */
 616   2                  wakeupSource |= PM_ALT_ACT_SRC_CTW;
 617   2              }
 618   1      
 619   1              /* 1PPS - save current and set new configuration */
 620   1              if(PM_ALT_ACT_TIME_ONE_PPS == wakeupTime)
 621   1              {
 622   2                  /* Save current 1PPS configuration and set new one */
 623   2                  CyPmOppsSet();
 624   2      
 625   2                  /* Include associated timer to the wakeupSource */
 626   2                  wakeupSource |= PM_ALT_ACT_SRC_ONE_PPS;
 627   2              }
 628   1      
 629   1          #endif /* (CY_PSOC3) */
 630   1      
 631   1      
 632   1          /* Save and set new wake up configuration */
 633   1      
 634   1          /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 635   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 636   1          CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 637   1      
 638   1          /* Comparators */
 639   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 640   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 641   1      
 642   1          /* LCD */
 643   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 644   1          CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 645   1      
 646   1      
 647   1          /* Switch to the Alternate Active mode */
 648   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_ALT_ACT)
             -;
 649   1      
 650   1          /* Recommended readback. */
 651   1          (void) CY_PM_MODE_CSR_REG;
 652   1      
 653   1          /* Two recommended NOPs to get into the mode. */
 654   1          CY_NOP;
 655   1          CY_NOP;
 656   1      
 657   1          /* Execute WFI instruction (for ARM-based devices only) */
 658   1          CY_PM_WFI;
 659   1      
 660   1          /* Point of return from Alternate Active Mode */
 661   1      
 662   1          /* Restore wake up configuration */
 663   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
 664   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
 665   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
 666   1      }
 667          
 668          
 669          /*******************************************************************************
 670          * Function Name: CyPmSleep
 671          ********************************************************************************
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 12  

 672          *
 673          * Summary:
 674          *  Puts the part into the Sleep state.
 675          *
 676          *  Note Before calling this function, you must manually configure the power
 677          *  mode of the source clocks for the timer that is used as wakeup timer.
 678          *
 679          *  Note Before calling this function, you must prepare clock tree configuration
 680          *  for the low power mode by calling CyPmSaveClocks(). And restore clock
 681          *  configuration after CyPmSleep() execution by calling CyPmRestoreClocks(). See
 682          *  Power Management section, Clock Configuration subsection of the System
 683          *  Reference Guide for more information.
 684          *
 685          *  PSoC 3:
 686          *  Before switching to Sleep, if a wakeupTime other than NONE is specified,
 687          *  then the appropriate timer state is configured as specified with the
 688          *  interrupt for that timer disabled.  The wakeup source will be the combination
 689          *  of the values specified in the wakeupSource and any timer specified in the
 690          *  wakeupTime argument.  Once the wakeup condition is satisfied, then all saved
 691          *  state is restored and the function returns in the Active state.
 692          *
 693          *  Note that if the wakeupTime is made with a different value, the period before
 694          *  the wakeup occurs can be significantly shorter than the specified time.  If
 695          *  the next call is made with the same wakeupTime value, then the wakeup will
 696          *  occur the specified period after the previous wakeup occurred.
 697          *
 698          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 699          *  specified timer will be left as specified by wakeupTime with the timer
 700          *  enabled and the interrupt disabled.  If the CTW or One PPS is already
 701          *  configured for wakeup, for example with the SleepTimer or RTC components,
 702          *  then specify NONE for the wakeupTime and include the appropriate source for
 703          *  wakeupSource.
 704          *
 705          *  PSoC 5LP:
 706          *  The wakeupTime parameter is not used and the only NONE can be specified.
 707          *  The wakeup time must be configured with the component, SleepTimer for CTW
 708          *  intervals and RTC for 1PPS interval. The component must be configured to
 709          *  generate an interrrupt.
 710          *
 711          * Parameters:
 712          *  wakeupTime:      Specifies a timer wakeup source and the frequency of that
 713          *                   source. For PSoC 5LP, this parameter is ignored.
 714          *
 715          *           Define                      Time
 716          *  PM_SLEEP_TIME_NONE               None
 717          *  PM_SLEEP_TIME_ONE_PPS            One PPS: 1 second
 718          *  PM_SLEEP_TIME_CTW_2MS            CTW: 2 ms
 719          *  PM_SLEEP_TIME_CTW_4MS            CTW: 4 ms
 720          *  PM_SLEEP_TIME_CTW_8MS            CTW: 8 ms
 721          *  PM_SLEEP_TIME_CTW_16MS           CTW: 16 ms
 722          *  PM_SLEEP_TIME_CTW_32MS           CTW: 32 ms
 723          *  PM_SLEEP_TIME_CTW_64MS           CTW: 64 ms
 724          *  PM_SLEEP_TIME_CTW_128MS          CTW: 128 ms
 725          *  PM_SLEEP_TIME_CTW_256MS          CTW: 256 ms
 726          *  PM_SLEEP_TIME_CTW_512MS          CTW: 512 ms
 727          *  PM_SLEEP_TIME_CTW_1024MS         CTW: 1024 ms
 728          *  PM_SLEEP_TIME_CTW_2048MS         CTW: 2048 ms
 729          *  PM_SLEEP_TIME_CTW_4096MS         CTW: 4096 ms
 730          *
 731          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 732          *                   a wakeupTime has been specified the associated timer will be
 733          *                   included as a wakeup source.
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 13  

 734          *
 735          *           Define                      Source
 736          *  PM_SLEEP_SRC_NONE                None
 737          *  PM_SLEEP_SRC_COMPARATOR0         Comparator 0
 738          *  PM_SLEEP_SRC_COMPARATOR1         Comparator 1
 739          *  PM_SLEEP_SRC_COMPARATOR2         Comparator 2
 740          *  PM_SLEEP_SRC_COMPARATOR3         Comparator 3
 741          *  PM_SLEEP_SRC_PICU                PICU
 742          *  PM_SLEEP_SRC_I2C                 I2C
 743          *  PM_SLEEP_SRC_BOOSTCONVERTER      Boost Converter
 744          *  PM_SLEEP_SRC_VD                  High and Low Voltage Detection (HVI, LVI)
 745          *  PM_SLEEP_SRC_CTW                 Central Timewheel*
 746          *  PM_SLEEP_SRC_ONE_PPS             One PPS*
 747          *  PM_SLEEP_SRC_LCD                 LCD
 748          *
 749          *  *Note:   CTW and One PPS wakeup signals are in the same mask bit.
 750          *
 751          *  When specifying a Comparator as the wakeupSource an instance specific define
 752          *  should be used that will track with the specific comparator that the instance
 753          *  is placed into. As an example for a Comparator instance named MyComp the
 754          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 755          *
 756          *  When CTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 757          *  function must be called upon wakeup with corresponding parameter. Please
 758          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 759          *  information.
 760          *
 761          * Return:
 762          *  None
 763          *
 764          * Reentrant:
 765          *  No
 766          *
 767          * Side Effects and Restrictions:
 768          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 769          *  specified timer will be left as specified by wakeupTime with the timer
 770          *  enabled and the interrupt disabled. Also, the ILO 1 KHz (if CTW timer is
 771          *  used as wake up time) will be left started.
 772          *
 773          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
 774          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
 775          *  delay is measured using rising edges of the 1 kHz ILO.
 776          *
 777          *  For PSoC 3 silicon hardware buzz should be disabled before entering a sleep
 778          *  power mode. It is disabled by PSoC Creator during startup.
 779          *  If a Low Voltage Interrupt (LVI), High Voltage Interrupt (HVI) or Brown Out
 780          *  detect (power supply supervising capabilities) are required in a design
 781          *  during sleep, use the Central Time Wheel (CTW) to periodically wake the
 782          *  device, perform software buzz, and refresh the supervisory services. If LVI,
 783          *  HVI, or Brown Out is not required, then use of the CTW is not required.
 784          *  Refer to the device errata for more information.
 785          *
 786          *******************************************************************************/
 787          void CyPmSleep(uint8 wakeupTime, uint16 wakeupSource) 
 788          {
 789   1          uint8 interruptState;
 790   1      
 791   1          /* Save current global interrupt enable and disable it */
 792   1          interruptState = CyEnterCriticalSection();
 793   1      
 794   1      
 795   1          /***********************************************************************
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 14  

 796   1          * The Hibernate/Sleep regulator has a settling time after a reset.
 797   1          * During this time, the system ignores requests to enter Sleep and
 798   1          * Hibernate modes. The holdoff delay is measured using rising edges of
 799   1          * the 1 kHz ILO.
 800   1          ***********************************************************************/
 801   1          if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
 802   1          {
 803   2              /* Disable hold off - no action on restore */
 804   2              CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
 805   2          }
 806   1          else
 807   1          {
 808   2              /* Abort, device is not ready for low power mode entry */
 809   2      
 810   2              /* Restore global interrupt enable state */
 811   2              CyExitCriticalSection(interruptState);
 812   2      
 813   2              return;
 814   2          }
 815   1      
 816   1      
 817   1          /***********************************************************************
 818   1          * PSoC3 < TO6:
 819   1          * - Hardware buzz must be disabled before sleep mode entry.
 820   1          * - Voltage supervision (HVI/LVI) requires hardware buzz, so they must
 821   1          *   be aslo disabled.
 822   1          *
 823   1          * PSoC3 >= TO6:
 824   1          * - Voltage supervision (HVI/LVI) requires hardware buzz, so hardware buzz must be
 825   1          *   enabled before sleep mode entry and restored on wakeup.
 826   1          ***********************************************************************/
 827   1          #if(CY_PSOC3)
 828   1      
 829   1              /* Silicon Revision ID is below TO6 */
 830   1              if(CYDEV_CHIP_REV_ACTUAL < 5u)
 831   1              {
 832   2                  /* Hardware buzz expected to be disabled in Sleep mode */
 833   2                  CYASSERT(0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ));
 834   2              }
 835   1      
 836   1      
 837   1              if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
 838   1                  CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
 839   1              {
 840   2                  if(CYDEV_CHIP_REV_ACTUAL < 5u)
 841   2                  {
 842   3                      /* LVI/HVI requires hardware buzz to be enabled */
 843   3                      CYASSERT(0u != 0u);
 844   3                  }
 845   2                  else
 846   2                  {
 847   3                      if (0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ))
 848   3                      {
 849   4                          cyPmBackup.hardwareBuzz = CY_PM_DISABLED;
 850   4                          CY_PM_PWRSYS_WAKE_TR2_REG |= CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ;
 851   4                      }
 852   3                      else
 853   3                      {
 854   4                          cyPmBackup.hardwareBuzz = CY_PM_ENABLED;
 855   4                      }
 856   3                  }
 857   2              }
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 15  

 858   1      
 859   1          #endif /* (CY_PSOC3) */
 860   1      
 861   1      
 862   1          /*******************************************************************************
 863   1          * For ARM-based devices, an interrupt is required for the CPU to wake up. The
 864   1          * Power Management implementation assumes that wakeup time is configured with a
 865   1          * separate component (component-based wakeup time configuration) for an
 866   1          * interrupt to be issued on terminal count. For more information, refer to the
 867   1          * Wakeup Time Configuration section of System Reference Guide.
 868   1          *******************************************************************************/
 869   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_SLEEP_TIME_NONE == wakeupTime);
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 880   1      
 881   1      
 882   1          CyPmHibSlpSaveSet();
 883   1      
 884   1      
 885   1          #if(CY_PSOC3)
 886   1      
 887   1              /* CTW - save current and set new configuration */
 888   1              if((wakeupTime >= PM_SLEEP_TIME_CTW_2MS) && (wakeupTime <= PM_SLEEP_TIME_CTW_4096MS))
 889   1              {
 890   2                  /* Save current and set new configuration of the CTW */
 891   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 892   2      
 893   2                  /* Include associated timer to the wakeupSource */
 894   2                  wakeupSource |= PM_SLEEP_SRC_CTW;
 895   2              }
 896   1      
 897   1              /* 1PPS - save current and set new configuration */
 898   1              if(PM_SLEEP_TIME_ONE_PPS == wakeupTime)
 899   1              {
 900   2                  /* Save current and set new configuration of the 1PPS */
 901   2                  CyPmOppsSet();
 902   2      
 903   2                  /* Include associated timer to the wakeupSource */
 904   2                  wakeupSource |= PM_SLEEP_SRC_ONE_PPS;
 905   2              }
 906   1      
 907   1          #endif /* (CY_PSOC3) */
 908   1      
 909   1      
 910   1          /* Save and set new wake up configuration */
 911   1      
 912   1          /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 913   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 914   1          CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 915   1      
 916   1          /* Comparators */
 917   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 918   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 919   1      
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 16  

 920   1          /* LCD */
 921   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 922   1          CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 923   1      
 924   1      
 925   1          /*******************************************************************
 926   1          * Do not use merge region below unless any component datasheet
 927   1          * suggest to do so.
 928   1          *******************************************************************/
 929   1          /* `#START CY_PM_JUST_BEFORE_SLEEP` */
 930   1      
 931   1          /* `#END` */
 932   1      
 933   1      
 934   1          /* Last moment IMO frequency change */
 935   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
 936   1          {
 937   2              /* IMO frequency is 12 MHz */
 938   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
 939   2          }
 940   1          else
 941   1          {
 942   2              /* IMO frequency is not 12 MHz */
 943   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
 944   2      
 945   2              /* Save IMO frequency */
 946   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
 947   2      
 948   2              /* Set IMO frequency to 12 MHz */
 949   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
 950   2          }
 951   1      
 952   1          /* Switch to the Sleep mode */
 953   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_SLEEP);
 954   1      
 955   1          /* Recommended readback. */
 956   1          (void) CY_PM_MODE_CSR_REG;
 957   1      
 958   1          /* Two recommended NOPs to get into the mode. */
 959   1          CY_NOP;
 960   1          CY_NOP;
 961   1      
 962   1          /* Execute WFI instruction (for ARM-based devices only) */
 963   1          CY_PM_WFI;
 964   1      
 965   1          /* Point of return from Sleep Mode */
 966   1      
 967   1          /* Restore last moment IMO frequency change */
 968   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
 969   1          {
 970   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
 971   2                                          cyPmBackup.imoActFreq;
 972   2          }
 973   1      
 974   1      
 975   1          /*******************************************************************
 976   1          * Do not use merge region below unless any component datasheet
 977   1          * suggest to do so.
 978   1          *******************************************************************/
 979   1          /* `#START CY_PM_JUST_AFTER_WAKEUP_FROM_SLEEP` */
 980   1      
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 17  

 981   1          /* `#END` */
 982   1      
 983   1      
 984   1          /* Restore hardware configuration */
 985   1          CyPmHibSlpRestore();
 986   1      
 987   1      
 988   1          /* Disable hardware buzz, if it was previously enabled */
 989   1          #if(CY_PSOC3)
 990   1      
 991   1              if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
 992   1                  CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
 993   1              {
 994   2                  if(CYDEV_CHIP_REV_ACTUAL >= 5u)
 995   2                  {
 996   3                      if (CY_PM_DISABLED == cyPmBackup.hardwareBuzz)
 997   3                      {
 998   4                          CY_PM_PWRSYS_WAKE_TR2_REG &= (uint8)(~CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ);
 999   4                      }
1000   3                  }
1001   2              }
1002   1      
1003   1          #endif /* (CY_PSOC3) */
1004   1      
1005   1      
1006   1          /* Restore current wake up configuration */
1007   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1008   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1009   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1010   1      
1011   1          /* Restore global interrupt enable state */
1012   1          CyExitCriticalSection(interruptState);
1013   1      }
1014          
1015          
1016          /*******************************************************************************
1017          * Function Name: CyPmHibernate
1018          ********************************************************************************
1019          *
1020          * Summary:
1021          *  Puts the part into the Hibernate state.
1022          *
1023          *  PSoC 3 and PSoC 5LP:
1024          *  Before switching to Hibernate, the current status of the PICU wakeup source
1025          *  bit is saved and then set. This configures the device to wake up from the
1026          *  PICU. Make sure you have at least one pin configured to generate a PICU
1027          *  interrupt. For pin Px.y, the register "PICU_INTTYPE_PICUx_INTTYPEy" controls
1028          *  the PICU behavior. In the TRM, this register is "PICU[0..15]_INTTYPE[0..7]."
1029          *  In the Pins component datasheet, this register is referred to as the IRQ
1030          *  option. Once the wakeup occurs, the PICU wakeup source bit is restored and
1031          *  the PSoC returns to the Active state.
1032          *
1033          * Parameters:
1034          *  None
1035          *
1036          * Return:
1037          *  None
1038          *
1039          * Reentrant:
1040          *  No
1041          *
1042          * Side Effects:
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 18  

1043          *  Applications must wait 20 us before re-entering hibernate or sleep after
1044          *  waking up from hibernate. The 20 us allows the sleep regulator time to
1045          *  stabilize before the next hibernate / sleep event occurs. The 20 us
1046          *  requirement begins when the device wakes up. There is no hardware check that
1047          *  this requirement is met. The specified delay should be done on ISR entry.
1048          *
1049          *  After wakeup PICU interrupt occurs, the Pin_ClearInterrupt() (where Pin is
1050          *  instance name of the Pins component) function must be called to clear the
1051          *  latched pin events to allow proper Hibernate mode entry andd to enable
1052          *  detection of future events.
1053          *
1054          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
1055          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
1056          *  delay is measured using rising edges of the 1 kHz ILO.
1057          *
1058          *******************************************************************************/
1059          void CyPmHibernate(void) 
1060          {
1061   1          uint8 interruptState;
1062   1      
1063   1          /* Save current global interrupt enable and disable it */
1064   1          interruptState = CyEnterCriticalSection();
1065   1      
1066   1              /***********************************************************************
1067   1              * The Hibernate/Sleep regulator has a settling time after a reset.
1068   1              * During this time, the system ignores requests to enter Sleep and
1069   1              * Hibernate modes. The holdoff delay is measured using rising edges of
1070   1              * the 1 kHz ILO.
1071   1              ***********************************************************************/
1072   1              if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
1073   1              {
1074   2                  /* Disable hold off - no action on restore */
1075   2                  CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
1076   2              }
1077   1              else
1078   1              {
1079   2                  /* Abort, device is not ready for low power mode entry */
1080   2      
1081   2                  /* Restore global interrupt enable state */
1082   2                  CyExitCriticalSection(interruptState);
1083   2      
1084   2                  return;
1085   2              }
1086   1      
1087   1          CyPmHibSaveSet();
1088   1      
1089   1      
1090   1          /* Save and enable only wakeup on PICU */
1091   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
1092   1          CY_PM_WAKEUP_CFG0_REG = CY_PM_WAKEUP_PICU;
1093   1      
1094   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
1095   1          CY_PM_WAKEUP_CFG1_REG = 0x00u;
1096   1      
1097   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
1098   1          CY_PM_WAKEUP_CFG2_REG = 0x00u;
1099   1      
1100   1      
1101   1          /* Last moment IMO frequency change */
1102   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
1103   1          {
1104   2              /* IMO frequency is 12 MHz */
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 19  

1105   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
1106   2          }
1107   1          else
1108   1          {
1109   2              /* IMO frequency is not 12 MHz */
1110   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
1111   2      
1112   2              /* Save IMO frequency */
1113   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1114   2      
1115   2              /* Set IMO frequency to 12 MHz */
1116   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
1117   2          }
1118   1      
1119   1      
1120   1          /* Switch to Hibernate Mode */
1121   1          CY_PM_MODE_CSR_REG = (CY_PM_MODE_CSR_REG & ((uint8) (~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_HIBERNAT
             -E;
1122   1      
1123   1          /* Recommended readback. */
1124   1          (void) CY_PM_MODE_CSR_REG;
1125   1      
1126   1          /* Two recommended NOPs to get into the mode. */
1127   1          CY_NOP;
1128   1          CY_NOP;
1129   1      
1130   1          /* Execute WFI instruction (for ARM-based devices only) */
1131   1          CY_PM_WFI;
1132   1      
1133   1      
1134   1          /* Point of return from Hibernate mode */
1135   1      
1136   1      
1137   1          /* Restore last moment IMO frequency change */
1138   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1139   1          {
1140   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1141   2                                          cyPmBackup.imoActFreq;
1142   2          }
1143   1      
1144   1      
1145   1          /* Restore device for proper Hibernate mode exit*/
1146   1          CyPmHibRestore();
1147   1      
1148   1          /* Restore current wake up configuration */
1149   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1150   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1151   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1152   1      
1153   1          /* Restore global interrupt enable state */
1154   1          CyExitCriticalSection(interruptState);
1155   1      }
1156          
1157          
1158          /*******************************************************************************
1159          * Function Name: CyPmReadStatus
1160          ********************************************************************************
1161          *
1162          * Summary:
1163          *  Manages the Power Manager Interrupt Status Register.  This register has the
1164          *  interrupt status for the one pulse per second, central timewheel and fast
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 20  

1165          *  timewheel timers.  This hardware register clears on read.  To allow for only
1166          *  clearing the bits of interest and preserving the other bits, this function
1167          *  uses a shadow register that retains the state.  This function reads the
1168          *  status register and ORs that value with the shadow register.  That is the
1169          *  value that is returned.  Then the bits in the mask that are set are cleared
1170          *  from this value and written back to the shadow register.
1171          *
1172          *  Note You must call this function within 1 ms (1 clock cycle of the ILO)
1173          *  after a CTW event has occurred.
1174          *
1175          * Parameters:
1176          *  mask: Bits in the shadow register to clear.
1177          *
1178          *       Define                      Source
1179          *  CY_PM_FTW_INT                Fast Timewheel
1180          *  CY_PM_CTW_INT                Central Timewheel
1181          *  CY_PM_ONEPPS_INT             One Pulse Per Second
1182          *
1183          * Return:
1184          *  Status.  Same bits values as the mask parameter.
1185          *
1186          *******************************************************************************/
1187          uint8 CyPmReadStatus(uint8 mask) 
1188          {
1189   1          static uint8 interruptStatus;
1190   1          uint8 interruptState;
1191   1          uint8 tmpStatus;
1192   1      
1193   1          /* Enter critical section */
1194   1          interruptState = CyEnterCriticalSection();
1195   1      
1196   1          /* Save value of the register, copy it and clear desired bit */
1197   1          interruptStatus |= CY_PM_INT_SR_REG;
1198   1          tmpStatus = interruptStatus;
1199   1          interruptStatus &= ((uint8)(~mask));
1200   1      
1201   1          /* Exit critical section */
1202   1          CyExitCriticalSection(interruptState);
1203   1      
1204   1          return(tmpStatus);
1205   1      }
1206          
1207          
1208          /*******************************************************************************
1209          * Function Name: CyPmHibSaveSet
1210          ********************************************************************************
1211          *
1212          * Summary:
1213          *  Prepare device for proper Hibernate low power mode entry:
1214          *  - Disables I2C backup regulator
1215          *  - Saves ILO power down mode state and enable it
1216          *  - Saves state of 1 kHz and 100 kHz ILO and disable them
1217          *  - Disables sleep regulator and shorts vccd to vpwrsleep
1218          *  - Save LVI/HVI configuration and disable them - CyPmHviLviSaveDisable()
1219          *  - CyPmHibSlpSaveSet() function is called
1220          *
1221          * Parameters:
1222          *  None
1223          *
1224          * Return:
1225          *  None
1226          *
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 21  

1227          * Reentrant:
1228          *  No
1229          *
1230          *******************************************************************************/
1231          static void CyPmHibSaveSet(void) 
1232          {
1233   1          /* I2C backup reg must be off when the sleep regulator is unavailable */
1234   1          if(0u != (CY_PM_PWRSYS_CR1_REG & CY_PM_PWRSYS_CR1_I2CREG_BACKUP))
1235   1          {
1236   2              /***********************************************************************
1237   2              * If I2C backup regulator is enabled, all the fixed-function registers
1238   2              * store their values while device is in low power mode, otherwise their
1239   2              * configuration is lost. The I2C API makes a decision to restore or not
1240   2              * to restore I2C registers based on this. If this regulator will be
1241   2              * disabled and then enabled, I2C API will suppose that I2C block
1242   2              * registers preserved their values, while this is not true. So, the
1243   2              * backup regulator is disabled. The I2C sleep APIs is responsible for
1244   2              * restoration.
1245   2              ***********************************************************************/
1246   2      
1247   2              /* Disable I2C backup register */
1248   2              CY_PM_PWRSYS_CR1_REG &= ((uint8)(~CY_PM_PWRSYS_CR1_I2CREG_BACKUP));
1249   2          }
1250   1      
1251   1      
1252   1          /* Save current ILO power mode and ensure low power mode */
1253   1          cyPmBackup.iloPowerMode = CyILO_SetPowerMode(CY_PM_POWERDOWN_MODE);
1254   1      
1255   1          /* Save current 1kHz ILO enable state. Disabled automatically. */
1256   1          cyPmBackup.ilo1kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_1K)) ?
1257   1                                      CY_PM_DISABLED : CY_PM_ENABLED;
1258   1      
1259   1          /* Save current 100kHz ILO enable state. Disabled automatically. */
1260   1          cyPmBackup.ilo100kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_100K)) ?
1261   1                                      CY_PM_DISABLED : CY_PM_ENABLED;
1262   1      
1263   1      
1264   1          /* Disable the sleep regulator and shorts vccd to vpwrsleep */
1265   1          if(0u == (CY_PM_PWRSYS_SLP_TR_REG & CY_PM_PWRSYS_SLP_TR_BYPASS))
1266   1          {
1267   2              /* Save current bypass state */
1268   2              cyPmBackup.slpTrBypass = CY_PM_DISABLED;
1269   2              CY_PM_PWRSYS_SLP_TR_REG |= CY_PM_PWRSYS_SLP_TR_BYPASS;
1270   2          }
1271   1          else
1272   1          {
1273   2              cyPmBackup.slpTrBypass = CY_PM_ENABLED;
1274   2          }
1275   1      
1276   1          /* LPCOMPs are always enabled (even when BOTH ext_vccd=1 and ext_vcca=1)*/
1277   1      
1278   1      
1279   1          /***************************************************************************
1280   1          * LVI/HVI must be disabled in Hibernate
1281   1          ***************************************************************************/
1282   1      
1283   1          /* Save LVI/HVI configuration and disable them */
1284   1          CyPmHviLviSaveDisable();
1285   1      
1286   1      
1287   1          /* Make the same preparations for Hibernate and Sleep modes */
1288   1          CyPmHibSlpSaveSet();
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 22  

1289   1      
1290   1      
1291   1          /***************************************************************************
1292   1          * Save and set power mode wakeup trim registers
1293   1          ***************************************************************************/
1294   1          cyPmBackup.wakeupTrim0 = CY_PM_PWRSYS_WAKE_TR0_REG;
1295   1          cyPmBackup.wakeupTrim1 = CY_PM_PWRSYS_WAKE_TR1_REG;
1296   1      
1297   1          CY_PM_PWRSYS_WAKE_TR0_REG = CY_PM_PWRSYS_WAKE_TR0;
1298   1          CY_PM_PWRSYS_WAKE_TR1_REG = CY_PM_PWRSYS_WAKE_TR1;
1299   1      }
1300          
1301          
1302          /*******************************************************************************
1303          * Function Name: CyPmHibRestore
1304          ********************************************************************************
1305          *
1306          * Summary:
1307          *  Restore device for proper Hibernate mode exit:
1308          *  - Restore LVI/HVI configuration - call CyPmHviLviRestore()
1309          *  - CyPmHibSlpSaveRestore() function is called
1310          *  - Restores ILO power down mode state and enable it
1311          *  - Restores state of 1 kHz and 100 kHz ILO and disable them
1312          *  - Restores sleep regulator settings
1313          *
1314          * Parameters:
1315          *  None
1316          *
1317          * Return:
1318          *  None
1319          *
1320          *******************************************************************************/
1321          static void CyPmHibRestore(void) 
1322          {
1323   1          /* Restore LVI/HVI configuration */
1324   1          CyPmHviLviRestore();
1325   1      
1326   1          /* Restore the same configuration for Hibernate and Sleep modes */
1327   1          CyPmHibSlpRestore();
1328   1      
1329   1          /* Restore 1kHz ILO enable state */
1330   1          if(CY_PM_ENABLED == cyPmBackup.ilo1kEnable)
1331   1          {
1332   2              /* Enable 1kHz ILO */
1333   2              CyILO_Start1K();
1334   2          }
1335   1      
1336   1          /* Restore 100kHz ILO enable state */
1337   1          if(CY_PM_ENABLED == cyPmBackup.ilo100kEnable)
1338   1          {
1339   2              /* Enable 100kHz ILO */
1340   2              CyILO_Start100K();
1341   2          }
1342   1      
1343   1          /* Restore ILO power mode */
1344   1          (void) CyILO_SetPowerMode(cyPmBackup.iloPowerMode);
1345   1      
1346   1      
1347   1          if(CY_PM_DISABLED == cyPmBackup.slpTrBypass)
1348   1          {
1349   2              /* Enable the sleep regulator */
1350   2              CY_PM_PWRSYS_SLP_TR_REG &= ((uint8)(~CY_PM_PWRSYS_SLP_TR_BYPASS));
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 23  

1351   2          }
1352   1      
1353   1      
1354   1          /***************************************************************************
1355   1          * Restore power mode wakeup trim registers
1356   1          ***************************************************************************/
1357   1          CY_PM_PWRSYS_WAKE_TR0_REG = cyPmBackup.wakeupTrim0;
1358   1          CY_PM_PWRSYS_WAKE_TR1_REG = cyPmBackup.wakeupTrim1;
1359   1      }
1360          
1361          
1362          /*******************************************************************************
1363          * Function Name: CyPmCtwSetInterval
1364          ********************************************************************************
1365          *
1366          * Summary:
1367          *  Performs CTW configuration:
1368          *  - Disables CTW interrupt
1369          *  - Enables 1 kHz ILO
1370          *  - Sets new CTW interval
1371          *
1372          * Parameters:
1373          *  ctwInterval: the CTW interval to be set.
1374          *
1375          * Return:
1376          *  None
1377          *
1378          * Side Effects:
1379          *  Enables ILO 1 KHz clock and leaves it enabled.
1380          *
1381          *******************************************************************************/
1382          void CyPmCtwSetInterval(uint8 ctwInterval) 
1383          {
1384   1          /* Disable CTW interrupt enable */
1385   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_IE));
1386   1      
1387   1          /* Enable 1kHz ILO (required for CTW operation) */
1388   1          CyILO_Start1K();
1389   1      
1390   1          /* Interval could be set only while CTW is disabled */
1391   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_CTW_EN))
1392   1          {
1393   2              /* Set CTW interval if needed */
1394   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1395   2              {
1396   3                  /* Disable the CTW, set new CTW interval and enable it again */
1397   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_EN));
1398   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1399   3                  CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1400   3              }   /* Required interval is already set */
1401   2          }
1402   1          else
1403   1          {
1404   2              /* Set CTW interval if needed */
1405   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1406   2              {
1407   3                  /* Set the new CTW interval. Could be changed if CTW is disabled */
1408   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1409   3              }   /* Required interval is already set */
1410   2      
1411   2              /* Enable the CTW */
1412   2              CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 24  

1413   2          }
1414   1      }
1415          
1416          
1417          /*******************************************************************************
1418          * Function Name: CyPmOppsSet
1419          ********************************************************************************
1420          *
1421          * Summary:
1422          *  Performs 1PPS configuration:
1423          *  - Starts 32 KHz XTAL
1424          *  - Disables 1PPS interupts
1425          *  - Enables 1PPS
1426          *
1427          * Parameters:
1428          *  None
1429          *
1430          * Return:
1431          *  None
1432          *
1433          *******************************************************************************/
1434          void CyPmOppsSet(void) 
1435          {
1436   1          /* Enable 32kHz XTAL if needed */
1437   1          if(0u == (CY_PM_SLOWCLK_X32_CR_REG & CY_PM_X32_CR_X32EN))
1438   1          {
1439   2              /* Enable 32kHz XTAL */
1440   2              CyXTAL_32KHZ_Start();
1441   2          }
1442   1      
1443   1          /* Disable 1PPS interrupt enable */
1444   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_1PPS_IE));
1445   1      
1446   1          /* Enable 1PPS operation */
1447   1          CY_PM_TW_CFG2_REG |= CY_PM_1PPS_EN;
1448   1      }
1449          
1450          
1451          /*******************************************************************************
1452          * Function Name: CyPmFtwSetInterval
1453          ********************************************************************************
1454          *
1455          * Summary:
1456          *  Performs FTW configuration:
1457          *  - Disables FTW interrupt
1458          *  - Enables 100 kHz ILO
1459          *  - Sets new FTW interval.
1460          *
1461          * Parameters:
1462          *  ftwInterval - FTW counter interval.
1463          *
1464          * Return:
1465          *  None
1466          *
1467          * Side Effects:
1468          *  Enables ILO 100 KHz clock and leaves it enabled.
1469          *
1470          *******************************************************************************/
1471          void CyPmFtwSetInterval(uint8 ftwInterval) 
1472          {
1473   1          /* Disable FTW interrupt enable */
1474   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_IE));
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 25  

1475   1      
1476   1          /* Enable 100kHz ILO */
1477   1          CyILO_Start100K();
1478   1      
1479   1          /* Iterval could be set only while FTW is disabled */
1480   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_FTW_EN))
1481   1          {
1482   2              /* Disable FTW, set new FTW interval if needed and enable it again */
1483   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1484   2              {
1485   3                  /* Disable the CTW, set new CTW interval and enable it again */
1486   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_EN));
1487   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1488   3                  CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1489   3              }   /* Required interval is already set */
1490   2          }
1491   1          else
1492   1          {
1493   2              /* Set new FTW counter interval if needed. FTW is disabled. */
1494   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1495   2              {
1496   3                  /* Set the new CTW interval. Could be changed if CTW is disabled */
1497   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1498   3              }   /* Required interval is already set */
1499   2      
1500   2              /* Enable the FTW */
1501   2              CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1502   2          }
1503   1      }
1504          
1505          
1506          /*******************************************************************************
1507          * Function Name: CyPmHibSlpSaveSet
1508          ********************************************************************************
1509          *
1510          * Summary:
1511          *  This API is used for preparing device for Sleep and Hibernate low power
1512          *  modes entry:
1513          *  - Saves COMP, VIDAC, DSM and SAR routing connections (PSoC 5)
1514          *  - Saves SC/CT routing connections (PSoC 3/5/5LP)
1515          *  - Disables Serial Wire Viewer (SWV) (PSoC 3)
1516          *  - Save boost reference selection and set it to internal
1517          *
1518          * Parameters:
1519          *  None
1520          *
1521          * Return:
1522          *  None
1523          *
1524          * Reentrant:
1525          *  No
1526          *
1527          *******************************************************************************/
1528          static void CyPmHibSlpSaveSet(void) 
1529          {
1530   1          /* Save SC/CT routing registers */
1531   1          cyPmBackup.scctData[0u]   = CY_GET_REG8(CYREG_SC0_SW0 );
1532   1          cyPmBackup.scctData[1u]   = CY_GET_REG8(CYREG_SC0_SW2 );
1533   1          cyPmBackup.scctData[2u]   = CY_GET_REG8(CYREG_SC0_SW3 );
1534   1          cyPmBackup.scctData[3u]   = CY_GET_REG8(CYREG_SC0_SW4 );
1535   1          cyPmBackup.scctData[4u]   = CY_GET_REG8(CYREG_SC0_SW6 );
1536   1          cyPmBackup.scctData[5u]   = CY_GET_REG8(CYREG_SC0_SW8 );
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 26  

1537   1          cyPmBackup.scctData[6u]   = CY_GET_REG8(CYREG_SC0_SW10);
1538   1      
1539   1          cyPmBackup.scctData[7u]   = CY_GET_REG8(CYREG_SC1_SW0 );
1540   1          cyPmBackup.scctData[8u]   = CY_GET_REG8(CYREG_SC1_SW2 );
1541   1          cyPmBackup.scctData[9u]   = CY_GET_REG8(CYREG_SC1_SW3 );
1542   1          cyPmBackup.scctData[10u]  = CY_GET_REG8(CYREG_SC1_SW4 );
1543   1          cyPmBackup.scctData[11u]  = CY_GET_REG8(CYREG_SC1_SW6 );
1544   1          cyPmBackup.scctData[12u]  = CY_GET_REG8(CYREG_SC1_SW8 );
1545   1          cyPmBackup.scctData[13u]  = CY_GET_REG8(CYREG_SC1_SW10);
1546   1      
1547   1          cyPmBackup.scctData[14u]  = CY_GET_REG8(CYREG_SC2_SW0 );
1548   1          cyPmBackup.scctData[15u]  = CY_GET_REG8(CYREG_SC2_SW2 );
1549   1          cyPmBackup.scctData[16u]  = CY_GET_REG8(CYREG_SC2_SW3 );
1550   1          cyPmBackup.scctData[17u]  = CY_GET_REG8(CYREG_SC2_SW4 );
1551   1          cyPmBackup.scctData[18u]  = CY_GET_REG8(CYREG_SC2_SW6 );
1552   1          cyPmBackup.scctData[19u]  = CY_GET_REG8(CYREG_SC2_SW8 );
1553   1          cyPmBackup.scctData[20u]  = CY_GET_REG8(CYREG_SC2_SW10);
1554   1      
1555   1          cyPmBackup.scctData[21u]  = CY_GET_REG8(CYREG_SC3_SW0 );
1556   1          cyPmBackup.scctData[22u]  = CY_GET_REG8(CYREG_SC3_SW2 );
1557   1          cyPmBackup.scctData[23u]  = CY_GET_REG8(CYREG_SC3_SW3 );
1558   1          cyPmBackup.scctData[24u]  = CY_GET_REG8(CYREG_SC3_SW4 );
1559   1          cyPmBackup.scctData[25u]  = CY_GET_REG8(CYREG_SC3_SW6 );
1560   1          cyPmBackup.scctData[26u]  = CY_GET_REG8(CYREG_SC3_SW8 );
1561   1          cyPmBackup.scctData[27u]  = CY_GET_REG8(CYREG_SC3_SW10);
1562   1      
1563   1          CY_SET_REG8(CYREG_SC0_SW0 , 0u);
1564   1          CY_SET_REG8(CYREG_SC0_SW2 , 0u);
1565   1          CY_SET_REG8(CYREG_SC0_SW3 , 0u);
1566   1          CY_SET_REG8(CYREG_SC0_SW4 , 0u);
1567   1          CY_SET_REG8(CYREG_SC0_SW6 , 0u);
1568   1          CY_SET_REG8(CYREG_SC0_SW8 , 0u);
1569   1          CY_SET_REG8(CYREG_SC0_SW10, 0u);
1570   1      
1571   1          CY_SET_REG8(CYREG_SC1_SW0 , 0u);
1572   1          CY_SET_REG8(CYREG_SC1_SW2 , 0u);
1573   1          CY_SET_REG8(CYREG_SC1_SW3 , 0u);
1574   1          CY_SET_REG8(CYREG_SC1_SW4 , 0u);
1575   1          CY_SET_REG8(CYREG_SC1_SW6 , 0u);
1576   1          CY_SET_REG8(CYREG_SC1_SW8 , 0u);
1577   1          CY_SET_REG8(CYREG_SC1_SW10, 0u);
1578   1      
1579   1          CY_SET_REG8(CYREG_SC2_SW0 , 0u);
1580   1          CY_SET_REG8(CYREG_SC2_SW2 , 0u);
1581   1          CY_SET_REG8(CYREG_SC2_SW3 , 0u);
1582   1          CY_SET_REG8(CYREG_SC2_SW4 , 0u);
1583   1          CY_SET_REG8(CYREG_SC2_SW6 , 0u);
1584   1          CY_SET_REG8(CYREG_SC2_SW8 , 0u);
1585   1          CY_SET_REG8(CYREG_SC2_SW10, 0u);
1586   1      
1587   1          CY_SET_REG8(CYREG_SC3_SW0 , 0u);
1588   1          CY_SET_REG8(CYREG_SC3_SW2 , 0u);
1589   1          CY_SET_REG8(CYREG_SC3_SW3 , 0u);
1590   1          CY_SET_REG8(CYREG_SC3_SW4 , 0u);
1591   1          CY_SET_REG8(CYREG_SC3_SW6 , 0u);
1592   1          CY_SET_REG8(CYREG_SC3_SW8 , 0u);
1593   1          CY_SET_REG8(CYREG_SC3_SW10, 0u);
1594   1      
1595   1      
1596   1          #if(CY_PSOC3)
1597   1      
1598   1              /* Serial Wire Viewer (SWV) workaround */
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 27  

1599   1      
1600   1              /* Disable SWV before entering low power mode */
1601   1              if(0u != (CY_PM_MLOGIC_DBG_REG & CY_PM_MLOGIC_DBG_SWV_CLK_EN))
1602   1              {
1603   2                  /* Save SWV clock enabled state */
1604   2                  cyPmBackup.swvClkEnabled = CY_PM_ENABLED;
1605   2      
1606   2                  /* Save current ports drive mode settings */
1607   2                  cyPmBackup.prt1Dm = CY_PM_PRT1_PC3_REG & ((uint8)(~CY_PM_PRT1_PC3_DM_MASK));
1608   2      
1609   2                  /* Set drive mode to strong output */
1610   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
1611   2                                      CY_PM_PRT1_PC3_DM_STRONG;
1612   2      
1613   2                  /* Disable SWV clocks */
1614   2                  CY_PM_MLOGIC_DBG_REG &= ((uint8)(~CY_PM_MLOGIC_DBG_SWV_CLK_EN));
1615   2              }
1616   1              else
1617   1              {
1618   2                  /* Save SWV clock disabled state */
1619   2                  cyPmBackup.swvClkEnabled = CY_PM_DISABLED;
1620   2              }
1621   1      
1622   1          #endif  /* (CY_PSOC3) */
1623   1      
1624   1      
1625   1          /***************************************************************************
1626   1          * Save boost reference and set it to boost's internal by clearing the bit.
1627   1          * External (chip bandgap) reference is not available in Sleep and Hibernate.
1628   1          ***************************************************************************/
1629   1          if(0u != (CY_PM_BOOST_CR2_REG & CY_PM_BOOST_CR2_EREFSEL_EXT))
1630   1          {
1631   2              cyPmBackup.boostRefExt = CY_PM_ENABLED;
1632   2              CY_PM_BOOST_CR2_REG &= ((uint8)(~CY_PM_BOOST_CR2_EREFSEL_EXT));
1633   2          }
1634   1          else
1635   1          {
1636   2              cyPmBackup.boostRefExt = CY_PM_DISABLED;
1637   2          }
1638   1      }
1639          
1640          
1641          /*******************************************************************************
1642          * Function Name: CyPmHibSlpRestore
1643          ********************************************************************************
1644          *
1645          * Summary:
1646          *  This API is used for restoring device configurations after wakeup from Sleep
1647          *  and Hibernate low power modes:
1648          *  - Restores SC/CT routing connections
1649          *  - Restores enable state of Serial Wire Viewer (SWV) (PSoC 3)
1650          *  - Restore boost reference selection
1651          *
1652          * Parameters:
1653          *  None
1654          *
1655          * Return:
1656          *  None
1657          *
1658          *******************************************************************************/
1659          static void CyPmHibSlpRestore(void) 
1660          {
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 28  

1661   1          /* Restore SC/CT routing registers */
1662   1          CY_SET_REG8(CYREG_SC0_SW0 , cyPmBackup.scctData[0u] );
1663   1          CY_SET_REG8(CYREG_SC0_SW2 , cyPmBackup.scctData[1u] );
1664   1          CY_SET_REG8(CYREG_SC0_SW3 , cyPmBackup.scctData[2u] );
1665   1          CY_SET_REG8(CYREG_SC0_SW4 , cyPmBackup.scctData[3u] );
1666   1          CY_SET_REG8(CYREG_SC0_SW6 , cyPmBackup.scctData[4u] );
1667   1          CY_SET_REG8(CYREG_SC0_SW8 , cyPmBackup.scctData[5u] );
1668   1          CY_SET_REG8(CYREG_SC0_SW10, cyPmBackup.scctData[6u] );
1669   1      
1670   1          CY_SET_REG8(CYREG_SC1_SW0 , cyPmBackup.scctData[7u] );
1671   1          CY_SET_REG8(CYREG_SC1_SW2 , cyPmBackup.scctData[8u] );
1672   1          CY_SET_REG8(CYREG_SC1_SW3 , cyPmBackup.scctData[9u] );
1673   1          CY_SET_REG8(CYREG_SC1_SW4 , cyPmBackup.scctData[10u]);
1674   1          CY_SET_REG8(CYREG_SC1_SW6 , cyPmBackup.scctData[11u]);
1675   1          CY_SET_REG8(CYREG_SC1_SW8 , cyPmBackup.scctData[12u]);
1676   1          CY_SET_REG8(CYREG_SC1_SW10, cyPmBackup.scctData[13u]);
1677   1      
1678   1          CY_SET_REG8(CYREG_SC2_SW0 , cyPmBackup.scctData[14u]);
1679   1          CY_SET_REG8(CYREG_SC2_SW2 , cyPmBackup.scctData[15u]);
1680   1          CY_SET_REG8(CYREG_SC2_SW3 , cyPmBackup.scctData[16u]);
1681   1          CY_SET_REG8(CYREG_SC2_SW4 , cyPmBackup.scctData[17u]);
1682   1          CY_SET_REG8(CYREG_SC2_SW6 , cyPmBackup.scctData[18u]);
1683   1          CY_SET_REG8(CYREG_SC2_SW8 , cyPmBackup.scctData[19u]);
1684   1          CY_SET_REG8(CYREG_SC2_SW10, cyPmBackup.scctData[20u]);
1685   1      
1686   1          CY_SET_REG8(CYREG_SC3_SW0 , cyPmBackup.scctData[21u]);
1687   1          CY_SET_REG8(CYREG_SC3_SW2 , cyPmBackup.scctData[22u]);
1688   1          CY_SET_REG8(CYREG_SC3_SW3 , cyPmBackup.scctData[23u]);
1689   1          CY_SET_REG8(CYREG_SC3_SW4 , cyPmBackup.scctData[24u]);
1690   1          CY_SET_REG8(CYREG_SC3_SW6 , cyPmBackup.scctData[25u]);
1691   1          CY_SET_REG8(CYREG_SC3_SW8 , cyPmBackup.scctData[26u]);
1692   1          CY_SET_REG8(CYREG_SC3_SW10, cyPmBackup.scctData[27u]);
1693   1      
1694   1      
1695   1          #if(CY_PSOC3)
1696   1      
1697   1              /* Serial Wire Viewer (SWV) workaround */
1698   1              if(CY_PM_ENABLED == cyPmBackup.swvClkEnabled)
1699   1              {
1700   2                  /* Restore ports drive mode */
1701   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
1702   2                                          cyPmBackup.prt1Dm;
1703   2      
1704   2                  /* Enable SWV clocks */
1705   2                  CY_PM_MLOGIC_DBG_REG |= CY_PM_MLOGIC_DBG_SWV_CLK_EN;
1706   2              }
1707   1      
1708   1          #endif /* (CY_PSOC3) */
1709   1      
1710   1      
1711   1          /* Restore boost reference */
1712   1          if(CY_PM_ENABLED == cyPmBackup.boostRefExt)
1713   1          {
1714   2              CY_PM_BOOST_CR2_REG |= CY_PM_BOOST_CR2_EREFSEL_EXT;
1715   2          }
1716   1      }
1717          
1718          
1719          /*******************************************************************************
1720          * Function Name: CyPmHviLviSaveDisable
1721          ********************************************************************************
1722          *
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 29  

1723          * Summary:
1724          *  Saves analog and digital LVI and HVI configuration and disables them.
1725          *
1726          * Parameters:
1727          *  None
1728          *
1729          * Return:
1730          *  None
1731          *
1732          * Reentrant:
1733          *  No
1734          *
1735          *******************************************************************************/
1736          static void CyPmHviLviSaveDisable(void) 
1737          {
1738   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVID_EN))
1739   1          {
1740   2              cyPmBackup.lvidEn = CY_PM_ENABLED;
1741   2              cyPmBackup.lvidTrip = CY_VD_LVI_TRIP_REG & CY_VD_LVI_TRIP_LVID_MASK;
1742   2      
1743   2              /* Save state of reset device at a specified Vddd threshold */
1744   2              cyPmBackup.lvidRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESD_EN)) ? \
1745   2                                   CY_PM_DISABLED : CY_PM_ENABLED;
1746   2      
1747   2              CyVdLvDigitDisable();
1748   2          }
1749   1          else
1750   1          {
1751   2              cyPmBackup.lvidEn = CY_PM_DISABLED;
1752   2          }
1753   1      
1754   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVIA_EN))
1755   1          {
1756   2              cyPmBackup.lviaEn = CY_PM_ENABLED;
1757   2              cyPmBackup.lviaTrip = CY_VD_LVI_TRIP_REG >> 4u;
1758   2      
1759   2              /* Save state of reset device at a specified Vdda threshold */
1760   2              cyPmBackup.lviaRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESA_EN)) ? \
1761   2                                   CY_PM_DISABLED : CY_PM_ENABLED;
1762   2      
1763   2              CyVdLvAnalogDisable();
1764   2          }
1765   1          else
1766   1          {
1767   2              cyPmBackup.lviaEn = CY_PM_DISABLED;
1768   2          }
1769   1      
1770   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_HVIA_EN))
1771   1          {
1772   2              cyPmBackup.hviaEn = CY_PM_ENABLED;
1773   2              CyVdHvAnalogDisable();
1774   2          }
1775   1          else
1776   1          {
1777   2              cyPmBackup.hviaEn = CY_PM_DISABLED;
1778   2          }
1779   1      }
1780          
1781          
1782          /*******************************************************************************
1783          * Function Name: CyPmHviLviRestore
1784          ********************************************************************************
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 30  

1785          *
1786          * Summary:
1787          *  Restores analog and digital LVI and HVI configuration.
1788          *
1789          * Parameters:
1790          *  None
1791          *
1792          * Return:
1793          *  None
1794          *
1795          * Reentrant:
1796          *  No
1797          *
1798          *******************************************************************************/
1799          static void CyPmHviLviRestore(void) 
1800          {
1801   1          /* Restore LVI/HVI configuration */
1802   1          if(CY_PM_ENABLED == cyPmBackup.lvidEn)
1803   1          {
1804   2              CyVdLvDigitEnable(cyPmBackup.lvidRst, cyPmBackup.lvidTrip);
1805   2          }
1806   1      
1807   1          if(CY_PM_ENABLED == cyPmBackup.lviaEn)
1808   1          {
1809   2              CyVdLvAnalogEnable(cyPmBackup.lviaRst, cyPmBackup.lviaTrip);
1810   2          }
1811   1      
1812   1          if(CY_PM_ENABLED == cyPmBackup.hviaEn)
1813   1          {
1814   2              CyVdHvAnalogEnable();
1815   2          }
1816   1      }
1817          
1818          
1819          /* [] END OF FILE */
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 31  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyPmSaveClocks (BEGIN)
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 83
0000 9043A1            MOV     DPTR,#043A1H
0003 E0                MOVX    A,@DPTR
0004 540F              ANL     A,#0FH
0006 900000      R     MOV     DPTR,#cyPmClockBackup
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
000A 9043A2            MOV     DPTR,#043A2H
000D E0                MOVX    A,@DPTR
000E 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
0012 9043A1            MOV     DPTR,#043A1H
0015 E0                MOVX    A,@DPTR
0016 54F0              ANL     A,#0F0H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
001D 904800            MOV     DPTR,#04800H
0020 E0                MOVX    A,@DPTR
0021 54C0              ANL     A,#0C0H
0023 900000      R     MOV     DPTR,#cyPmClockBackup+05H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0027 7F2D              MOV     R7,#02DH
0029 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 93
002C 904200            MOV     DPTR,#04200H
002F E0                MOVX    A,@DPTR
0030 5407              ANL     A,#07H
0032 900000      R     MOV     DPTR,#cyPmClockBackup+03H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0036 904200            MOV     DPTR,#04200H
0039 E0                MOVX    A,@DPTR
003A 5440              ANL     A,#040H
003C 900000      R     MOV     DPTR,#cyPmClockBackup+04H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
0040 904200            MOV     DPTR,#04200H
0043 E0                MOVX    A,@DPTR
0044 5410              ANL     A,#010H
0046 6008              JZ      ?C0001
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 100
0048 900000      R     MOV     DPTR,#cyPmClockBackup+09H
004B 7401              MOV     A,#01H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
004E 8005              SJMP    ?C0002
0050         ?C0001:
                                           ; SOURCE LINE # 103
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 32  

                                           ; SOURCE LINE # 105
0050 E4                CLR     A
0051 900000      R     MOV     DPTR,#cyPmClockBackup+09H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0055         ?C0002:
                                           ; SOURCE LINE # 109
0055 7F04              MOV     R7,#04H
0057 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 112
005A 9043A0            MOV     DPTR,#043A0H
005D E0                MOVX    A,@DPTR
005E 5410              ANL     A,#010H
0060 6008              JZ      ?C0003
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 115
0062 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0065 7401              MOV     A,#01H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
0068 8009              SJMP    ?C0004
006A         ?C0003:
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 120
006A E4                CLR     A
006B 900000      R     MOV     DPTR,#cyPmClockBackup+06H
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
006F FF                MOV     R7,A
0070 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 124
0073         ?C0004:
                                           ; SOURCE LINE # 127
0073 904200            MOV     DPTR,#04200H
0076 E0                MOVX    A,@DPTR
0077 5420              ANL     A,#020H
0079 601A              JZ      ?C0005
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 131
007B 904000            MOV     DPTR,#04000H
007E E0                MOVX    A,@DPTR
007F 5440              ANL     A,#040H
0081 7004              JNZ     ?C0006
0083 7F02              MOV     R7,#02H
0085 8002              SJMP    ?C0007
0087         ?C0006:
0087 7F01              MOV     R7,#01H
0089         ?C0007:
0089 900000      R     MOV     DPTR,#cyPmClockBackup+07H
008C EF                MOV     A,R7
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
008E E4                CLR     A
008F FF                MOV     R7,A
0090 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 135
0093 8005              SJMP    ?C0008
0095         ?C0005:
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 139
0095 E4                CLR     A
0096 900000      R     MOV     DPTR,#cyPmClockBackup+07H
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 33  

0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
009A         ?C0008:
                                           ; SOURCE LINE # 143
009A 904000            MOV     DPTR,#04000H
009D E0                MOVX    A,@DPTR
009E 5430              ANL     A,#030H
00A0 900000      R     MOV     DPTR,#cyPmClockBackup+08H
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
00A4 E0                MOVX    A,@DPTR
00A5 6007              JZ      ?C0009
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 149
00A7 904000            MOV     DPTR,#04000H
00AA E0                MOVX    A,@DPTR
00AB 54CF              ANL     A,#0CFH
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
00AE         ?C0009:
                                           ; SOURCE LINE # 154
00AE 904200            MOV     DPTR,#04200H
00B1 E0                MOVX    A,@DPTR
00B2 5410              ANL     A,#010H
00B4 6003              JZ      ?C0010
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
00B6 120000      E     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 157
00B9         ?C0010:
                                           ; SOURCE LINE # 160
00B9 904004            MOV     DPTR,#04004H
00BC E0                MOVX    A,@DPTR
00BD 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
00C1 E0                MOVX    A,@DPTR
00C2 6005              JZ      ?C0011
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
00C4 E4                CLR     A
00C5 FF                MOV     R7,A
00C6 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 164
00C9         ?C0011:
                                           ; SOURCE LINE # 167
00C9 904005            MOV     DPTR,#04005H
00CC E0                MOVX    A,@DPTR
00CD 5403              ANL     A,#03H
00CF 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
00D3 E0                MOVX    A,@DPTR
00D4 6005              JZ      ?C0012
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
00D6 E4                CLR     A
00D7 FF                MOV     R7,A
00D8 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 173
00DB         ?C0012:
                                           ; SOURCE LINE # 176
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 34  

00DB 904007            MOV     DPTR,#04007H
00DE E0                MOVX    A,@DPTR
00DF 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
00E2 F0                MOVX    @DPTR,A
00E3 A3                INC     DPTR
00E4 E4                CLR     A
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
00E6 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
00E9 E0                MOVX    A,@DPTR
00EA FE                MOV     R6,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE 904006            MOV     DPTR,#04006H
00F1 E0                MOVX    A,@DPTR
00F2 FD                MOV     R5,A
00F3 EE                MOV     A,R6
00F4 EF                MOV     A,R7
00F5 4D                ORL     A,R5
00F6 FF                MOV     R7,A
00F7 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
00FA EE                MOV     A,R6
00FB F0                MOVX    @DPTR,A
00FC A3                INC     DPTR
00FD EF                MOV     A,R7
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
00FF 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0102 E0                MOVX    A,@DPTR
0103 FE                MOV     R6,A
0104 A3                INC     DPTR
0105 E0                MOVX    A,@DPTR
0106 4E                ORL     A,R6
0107 6006              JZ      ?C0013
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
0109 E4                CLR     A
010A FF                MOV     R7,A
010B FE                MOV     R6,A
010C 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 181
010F         ?C0013:
                                           ; SOURCE LINE # 184
010F 904005            MOV     DPTR,#04005H
0112 E0                MOVX    A,@DPTR
0113 54F0              ANL     A,#0F0H
0115 FF                MOV     R7,A
0116 E4                CLR     A
0117 C4                SWAP    A
0118 F8                MOV     R0,A
0119 54F0              ANL     A,#0F0H
011B C8                XCH     A,R0
011C 68                XRL     A,R0
011D EF                MOV     A,R7
011E C4                SWAP    A
011F 540F              ANL     A,#0FH
0121 48                ORL     A,R0
0122 04                INC     A
0123 FF                MOV     R7,A
0124 FB                MOV     R3,A
0125 E4                CLR     A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 35  

0126 FA                MOV     R2,A
0127 F9                MOV     R1,A
0128 F8                MOV     R0,A
0129 904200            MOV     DPTR,#04200H
012C E0                MOVX    A,@DPTR
012D 5407              ANL     A,#07H
012F 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0132 93                MOVC    A,@A+DPTR
0133 FF                MOV     R7,A
0134 E4                CLR     A
0135 FC                MOV     R4,A
0136 FD                MOV     R5,A
0137 FE                MOV     R6,A
0138 120000      E     LCALL   ?C?ULDIV
013B 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 187
013E 904220            MOV     DPTR,#04220H
0141 E0                MOVX    A,@DPTR
0142 5401              ANL     A,#01H
0144 600B              JZ      ?C0014
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 190
0146 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0149 7401              MOV     A,#01H
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
014C 120000      E     LCALL   CyPLL_OUT_Stop
                                           ; SOURCE LINE # 192
014F 8005              SJMP    ?C0015
0151         ?C0014:
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 196
0151 E4                CLR     A
0152 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0155 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
0156         ?C0015:
                                           ; SOURCE LINE # 200
0156 904210            MOV     DPTR,#04210H
0159 E0                MOVX    A,@DPTR
015A 5401              ANL     A,#01H
015C 600B              JZ      ?C0016
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 203
015E 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0161 7401              MOV     A,#01H
0163 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0164 120000      E     LCALL   CyXTAL_Stop
                                           ; SOURCE LINE # 205
0167 8005              SJMP    ?C0017
0169         ?C0016:
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 209
0169 E4                CLR     A
016A 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
016E         ?C0017:
                                           ; SOURCE LINE # 218
016E 90400B            MOV     DPTR,#0400BH
0171 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 36  

0172 5404              ANL     A,#04H
0174 6007              JZ      ?C0018
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0176 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
0179 7401              MOV     A,#01H
017B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
017C 22                RET     
017D         ?C0018:
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
017D E4                CLR     A
017E 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
0181 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0182         ?C0020:
0182 22                RET     
             ; FUNCTION CyPmSaveClocks (END)

             ; FUNCTION CyPmRestoreClocks (BEGIN)
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0000 900000      R     MOV     DPTR,#status
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
0006 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
0009 E0                MOVX    A,@DPTR
000A 6401              XRL     A,#01H
000C 703F              JNZ     ?C0021
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 273
000E 904005            MOV     DPTR,#04005H
0011 E0                MOVX    A,@DPTR
0012 54F0              ANL     A,#0F0H
0014 FF                MOV     R7,A
0015 E4                CLR     A
0016 C4                SWAP    A
0017 F8                MOV     R0,A
0018 54F0              ANL     A,#0F0H
001A C8                XCH     A,R0
001B 68                XRL     A,R0
001C EF                MOV     A,R7
001D C4                SWAP    A
001E 540F              ANL     A,#0FH
0020 48                ORL     A,R0
0021 04                INC     A
0022 FF                MOV     R7,A
0023 FB                MOV     R3,A
0024 E4                CLR     A
0025 FA                MOV     R2,A
0026 F9                MOV     R1,A
0027 F8                MOV     R0,A
0028 904200            MOV     DPTR,#04200H
002B E0                MOVX    A,@DPTR
002C 5407              ANL     A,#07H
002E 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0031 93                MOVC    A,@A+DPTR
0032 FF                MOV     R7,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 37  

0033 E4                CLR     A
0034 FC                MOV     R4,A
0035 FD                MOV     R5,A
0036 FE                MOV     R6,A
0037 120000      E     LCALL   ?C?ULDIV
003A E4                CLR     A
003B 7B4B              MOV     R3,#04BH
003D FA                MOV     R2,A
003E F9                MOV     R1,A
003F F8                MOV     R0,A
0040 120000      E     LCALL   ?C?LMUL
0043 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 275
0046 90400B            MOV     DPTR,#0400BH
0049 E0                MOVX    A,@DPTR
004A 4404              ORL     A,#04H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
004D         ?C0021:
                                           ; SOURCE LINE # 279
004D 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0050 E0                MOVX    A,@DPTR
0051 6401              XRL     A,#01H
0053 7077              JNZ     ?C0022
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 289
0055 FF                MOV     R7,A
0056 120000      E     LCALL   _CyXTAL_Start
                                           ; SOURCE LINE # 292
0059 904210            MOV     DPTR,#04210H
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
                                           ; SOURCE LINE # 295
005E 900000      R     MOV     DPTR,#i
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 7405              MOV     A,#05H
0066 F0                MOVX    @DPTR,A
0067         ?C0023:
0067 900000      R     MOV     DPTR,#i
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E D3                SETB    C
006F 9400              SUBB    A,#00H
0071 EE                MOV     A,R6
0072 9400              SUBB    A,#00H
0074 4056              JC      ?C0024
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 298
0076 904005            MOV     DPTR,#04005H
0079 E0                MOVX    A,@DPTR
007A 54F0              ANL     A,#0F0H
007C FF                MOV     R7,A
007D E4                CLR     A
007E C4                SWAP    A
007F F8                MOV     R0,A
0080 54F0              ANL     A,#0F0H
0082 C8                XCH     A,R0
0083 68                XRL     A,R0
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 38  

0084 EF                MOV     A,R7
0085 C4                SWAP    A
0086 540F              ANL     A,#0FH
0088 48                ORL     A,R0
0089 04                INC     A
008A FF                MOV     R7,A
008B FB                MOV     R3,A
008C E4                CLR     A
008D FA                MOV     R2,A
008E F9                MOV     R1,A
008F F8                MOV     R0,A
0090 904200            MOV     DPTR,#04200H
0093 E0                MOVX    A,@DPTR
0094 5407              ANL     A,#07H
0096 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0099 93                MOVC    A,@A+DPTR
009A FF                MOV     R7,A
009B E4                CLR     A
009C FC                MOV     R4,A
009D FD                MOV     R5,A
009E FE                MOV     R6,A
009F 120000      E     LCALL   ?C?ULDIV
00A2 E4                CLR     A
00A3 7BC8              MOV     R3,#0C8H
00A5 FA                MOV     R2,A
00A6 F9                MOV     R1,A
00A7 F8                MOV     R0,A
00A8 120000      E     LCALL   ?C?LMUL
00AB 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 301
00AE 904210            MOV     DPTR,#04210H
00B1 E0                MOVX    A,@DPTR
00B2 5480              ANL     A,#080H
00B4 7006              JNZ     ?C0025
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
00B6 900000      R     MOV     DPTR,#status
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
00BA 8010              SJMP    ?C0024
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
00BC         ?C0025:
00BC 900000      R     MOV     DPTR,#i+01H
00BF E0                MOVX    A,@DPTR
00C0 24FF              ADD     A,#0FFH
00C2 F0                MOVX    @DPTR,A
00C3 900000      R     MOV     DPTR,#i
00C6 E0                MOVX    A,@DPTR
00C7 34FF              ADDC    A,#0FFH
00C9 F0                MOVX    @DPTR,A
00CA 809B              SJMP    ?C0023
00CC         ?C0024:
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
00CC         ?C0022:
                                           ; SOURCE LINE # 322
00CC 7F2D              MOV     R7,#02DH
00CE 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 325
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 39  

00D1 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00D4 E0                MOVX    A,@DPTR
00D5 6402              XRL     A,#02H
00D7 6004              JZ      ?C0029
00D9 E0                MOVX    A,@DPTR
00DA B4031B            CJNE    A,#03H,?C0028
00DD         ?C0029:
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 329
00DD 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
00E0 E0                MOVX    A,@DPTR
00E1 FF                MOV     R7,A
00E2 904004            MOV     DPTR,#04004H
00E5 E0                MOVX    A,@DPTR
00E6 6F                XRL     A,R7
00E7 6007              JZ      ?C0030
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 332
00E9 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
00EC E0                MOVX    A,@DPTR
00ED 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 333
00F0         ?C0030:
                                           ; SOURCE LINE # 336
00F0 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 337
00F8         ?C0028:
                                           ; SOURCE LINE # 340
00F8 900000      R     MOV     DPTR,#cyPmClockBackup+04H
00FB E0                MOVX    A,@DPTR
00FC 5440              ANL     A,#040H
00FE 6012              JZ      ?C0031
0100 900000      R     MOV     DPTR,#cyPmClockBackup+03H
0103 E0                MOVX    A,@DPTR
0104 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0107 93                MOVC    A,@A+DPTR
0108 B40307            CJNE    A,#03H,?C0031
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 344
010B 7F08              MOV     R7,#08H
010D 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 345
0110 8024              SJMP    ?C0032
0112         ?C0031:
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 349
0112 900000      R     MOV     DPTR,#cyPmClockBackup+03H
0115 E0                MOVX    A,@DPTR
0116 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0119 93                MOVC    A,@A+DPTR
011A FF                MOV     R7,A
011B 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 351
011E 900000      R     MOV     DPTR,#cyPmClockBackup+04H
0121 E0                MOVX    A,@DPTR
0122 5440              ANL     A,#040H
0124 6009              JZ      ?C0033
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 40  

0126 904200            MOV     DPTR,#04200H
0129 E0                MOVX    A,@DPTR
012A 4440              ORL     A,#040H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
012D 8007              SJMP    ?C0032
012F         ?C0033:
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
012F 904200            MOV     DPTR,#04200H
0132 E0                MOVX    A,@DPTR
0133 54BF              ANL     A,#0BFH
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
0136         ?C0032:
                                           ; SOURCE LINE # 363
0136 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0139 E0                MOVX    A,@DPTR
013A B4010C            CJNE    A,#01H,?C0035
013D 9043A0            MOV     DPTR,#043A0H
0140 E0                MOVX    A,@DPTR
0141 5410              ANL     A,#010H
0143 7004              JNZ     ?C0035
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 366
0145 FF                MOV     R7,A
0146 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 367
0149         ?C0035:
                                           ; SOURCE LINE # 371
0149 900000      R     MOV     DPTR,#cyPmClockBackup+06H
014C E0                MOVX    A,@DPTR
014D 700B              JNZ     ?C0036
014F 9043A0            MOV     DPTR,#043A0H
0152 E0                MOVX    A,@DPTR
0153 5410              ANL     A,#010H
0155 6003              JZ      ?C0036
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
0157 120000      E     LCALL   CyIMO_Stop
                                           ; SOURCE LINE # 374
015A         ?C0036:
                                           ; SOURCE LINE # 377
015A 900000      R     MOV     DPTR,#cyPmClockBackup+07H
015D E0                MOVX    A,@DPTR
015E FF                MOV     R7,A
015F 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 380
0162 900000      R     MOV     DPTR,#cyPmClockBackup+09H
0165 E0                MOVX    A,@DPTR
0166 B40103            CJNE    A,#01H,?C0037
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
0169 120000      E     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 383
016C         ?C0037:
                                           ; SOURCE LINE # 386
016C 904000            MOV     DPTR,#04000H
016F E0                MOVX    A,@DPTR
0170 5430              ANL     A,#030H
0172 FF                MOV     R7,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 41  

0173 900000      R     MOV     DPTR,#cyPmClockBackup+08H
0176 E0                MOVX    A,@DPTR
0177 6F                XRL     A,R7
0178 7001              JNZ     ?C0124
017A E4                CLR     A
017B         ?C0124:
017B 6010              JZ      ?C0038
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
017D 904000            MOV     DPTR,#04000H
0180 E0                MOVX    A,@DPTR
0181 54CF              ANL     A,#0CFH
0183 FF                MOV     R7,A
0184 900000      R     MOV     DPTR,#cyPmClockBackup+08H
0187 E0                MOVX    A,@DPTR
0188 4F                ORL     A,R7
0189 904000            MOV     DPTR,#04000H
018C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
018D         ?C0038:
                                           ; SOURCE LINE # 393
018D 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0190 E0                MOVX    A,@DPTR
0191 6401              XRL     A,#01H
0193 703C              JNZ     ?C0039
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 403
0195 FF                MOV     R7,A
0196 120000      E     LCALL   _CyPLL_OUT_Start
                                           ; SOURCE LINE # 406
0199 904005            MOV     DPTR,#04005H
019C E0                MOVX    A,@DPTR
019D 54F0              ANL     A,#0F0H
019F FF                MOV     R7,A
01A0 E4                CLR     A
01A1 C4                SWAP    A
01A2 F8                MOV     R0,A
01A3 54F0              ANL     A,#0F0H
01A5 C8                XCH     A,R0
01A6 68                XRL     A,R0
01A7 EF                MOV     A,R7
01A8 C4                SWAP    A
01A9 540F              ANL     A,#0FH
01AB 48                ORL     A,R0
01AC 04                INC     A
01AD FF                MOV     R7,A
01AE FB                MOV     R3,A
01AF E4                CLR     A
01B0 FA                MOV     R2,A
01B1 F9                MOV     R1,A
01B2 F8                MOV     R0,A
01B3 904200            MOV     DPTR,#04200H
01B6 E0                MOVX    A,@DPTR
01B7 5407              ANL     A,#07H
01B9 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
01BC 93                MOVC    A,@A+DPTR
01BD FF                MOV     R7,A
01BE E4                CLR     A
01BF FC                MOV     R4,A
01C0 FD                MOV     R5,A
01C1 FE                MOV     R6,A
01C2 120000      E     LCALL   ?C?ULDIV
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 42  

01C5 E4                CLR     A
01C6 7BFA              MOV     R3,#0FAH
01C8 FA                MOV     R2,A
01C9 F9                MOV     R1,A
01CA F8                MOV     R0,A
01CB 120000      E     LCALL   ?C?LMUL
01CE 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 407
01D1         ?C0039:
                                           ; SOURCE LINE # 411
01D1 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01D4 E0                MOVX    A,@DPTR
01D5 6003              JZ      ?C0041
01D7 B4011B            CJNE    A,#01H,?C0040
01DA         ?C0041:
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 415
01DA 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
01DD E0                MOVX    A,@DPTR
01DE FF                MOV     R7,A
01DF 904004            MOV     DPTR,#04004H
01E2 E0                MOVX    A,@DPTR
01E3 6F                XRL     A,R7
01E4 6007              JZ      ?C0042
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
01E6 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
01E9 E0                MOVX    A,@DPTR
01EA 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 418
01ED         ?C0042:
                                           ; SOURCE LINE # 421
01ED 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01F0 E0                MOVX    A,@DPTR
01F1 FF                MOV     R7,A
01F2 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 422
01F5         ?C0040:
                                           ; SOURCE LINE # 425
01F5 904007            MOV     DPTR,#04007H
01F8 E0                MOVX    A,@DPTR
01F9 900000      R     MOV     DPTR,#clkBusDivTmp
01FC F0                MOVX    @DPTR,A
01FD A3                INC     DPTR
01FE E4                CLR     A
01FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
0200 900000      R     MOV     DPTR,#clkBusDivTmp
0203 E0                MOVX    A,@DPTR
0204 FE                MOV     R6,A
0205 A3                INC     DPTR
0206 E0                MOVX    A,@DPTR
0207 FF                MOV     R7,A
0208 904006            MOV     DPTR,#04006H
020B E0                MOVX    A,@DPTR
020C FD                MOV     R5,A
020D EE                MOV     A,R6
020E EF                MOV     A,R7
020F 4D                ORL     A,R5
0210 FF                MOV     R7,A
0211 900000      R     MOV     DPTR,#clkBusDivTmp
0214 EE                MOV     A,R6
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 43  

0215 F0                MOVX    @DPTR,A
0216 A3                INC     DPTR
0217 EF                MOV     A,R7
0218 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0219 900000      R     MOV     DPTR,#clkBusDivTmp
021C E0                MOVX    A,@DPTR
021D FE                MOV     R6,A
021E A3                INC     DPTR
021F E0                MOVX    A,@DPTR
0220 FF                MOV     R7,A
0221 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0224 E0                MOVX    A,@DPTR
0225 FC                MOV     R4,A
0226 A3                INC     DPTR
0227 E0                MOVX    A,@DPTR
0228 6F                XRL     A,R7
0229 7002              JNZ     ?C0125
022B EC                MOV     A,R4
022C 6E                XRL     A,R6
022D         ?C0125:
022D 600B              JZ      ?C0043
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
022F 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0232 E0                MOVX    A,@DPTR
0233 FE                MOV     R6,A
0234 A3                INC     DPTR
0235 E0                MOVX    A,@DPTR
0236 FF                MOV     R7,A
0237 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 430
023A         ?C0043:
                                           ; SOURCE LINE # 433
023A 904800            MOV     DPTR,#04800H
023D E0                MOVX    A,@DPTR
023E 543F              ANL     A,#03FH
0240 FF                MOV     R7,A
0241 900000      R     MOV     DPTR,#cyPmClockBackup+05H
0244 E0                MOVX    A,@DPTR
0245 4F                ORL     A,R7
0246 904800            MOV     DPTR,#04800H
0249 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
024A 900000      R     MOV     DPTR,#cyPmClockBackup
024D E0                MOVX    A,@DPTR
024E 9043A1            MOV     DPTR,#043A1H
0251 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
0252 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0255 E0                MOVX    A,@DPTR
0256 9043A2            MOV     DPTR,#043A2H
0259 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
025A 22                RET     
             ; FUNCTION CyPmRestoreClocks (END)

             ; FUNCTION _CyPmAltAct (BEGIN)
                                           ; SOURCE LINE # 583
0000 900000      R     MOV     DPTR,#wakeupTime
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 44  

0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 601
000E 900000      R     MOV     DPTR,#wakeupTime
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 C3                CLR     C
0016 940F              SUBB    A,#0FH
0018 EE                MOV     A,R6
0019 9400              SUBB    A,#00H
001B 402C              JC      ?C0045
001D 900000      R     MOV     DPTR,#wakeupTime
0020 E0                MOVX    A,@DPTR
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 D3                SETB    C
0024 940E              SUBB    A,#0EH
0026 EE                MOV     A,R6
0027 9401              SUBB    A,#01H
0029 501E              JNC     ?C0045
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
002B 900000      R     MOV     DPTR,#wakeupTime
002E E0                MOVX    A,@DPTR
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 24F2              ADD     A,#0F2H
0033 FF                MOV     R7,A
0034 120000      R     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 606
0037 900000      R     MOV     DPTR,#wakeupSource
003A E0                MOVX    A,@DPTR
003B FE                MOV     R6,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EE                MOV     A,R6
0040 4404              ORL     A,#04H
0042 900000      R     MOV     DPTR,#wakeupSource
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 607
0049         ?C0045:
                                           ; SOURCE LINE # 610
0049 900000      R     MOV     DPTR,#wakeupTime
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 C3                CLR     C
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 45  

0051 9402              SUBB    A,#02H
0053 EE                MOV     A,R6
0054 9400              SUBB    A,#00H
0056 402B              JC      ?C0046
0058 900000      R     MOV     DPTR,#wakeupTime
005B E0                MOVX    A,@DPTR
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E D3                SETB    C
005F 940D              SUBB    A,#0DH
0061 EE                MOV     A,R6
0062 9400              SUBB    A,#00H
0064 501D              JNC     ?C0046
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 613
0066 900000      R     MOV     DPTR,#wakeupTime
0069 E0                MOVX    A,@DPTR
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C 14                DEC     A
006D FF                MOV     R7,A
006E 120000      R     LCALL   _CyPmCtwSetInterval
                                           ; SOURCE LINE # 616
0071 900000      R     MOV     DPTR,#wakeupSource
0074 E0                MOVX    A,@DPTR
0075 FE                MOV     R6,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 EE                MOV     A,R6
007A 4408              ORL     A,#08H
007C 900000      R     MOV     DPTR,#wakeupSource
007F F0                MOVX    @DPTR,A
0080 A3                INC     DPTR
0081 EF                MOV     A,R7
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
0083         ?C0046:
                                           ; SOURCE LINE # 620
0083 900000      R     MOV     DPTR,#wakeupTime
0086 E0                MOVX    A,@DPTR
0087 FE                MOV     R6,A
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A 6401              XRL     A,#01H
008C 4E                ORL     A,R6
008D 7015              JNZ     ?C0047
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 623
008F 120000      R     LCALL   CyPmOppsSet
                                           ; SOURCE LINE # 626
0092 900000      R     MOV     DPTR,#wakeupSource
0095 E0                MOVX    A,@DPTR
0096 FE                MOV     R6,A
0097 A3                INC     DPTR
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A EE                MOV     A,R6
009B 4408              ORL     A,#08H
009D 900000      R     MOV     DPTR,#wakeupSource
00A0 F0                MOVX    @DPTR,A
00A1 A3                INC     DPTR
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 46  

00A2 EF                MOV     A,R7
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 627
00A4         ?C0047:
                                           ; SOURCE LINE # 635
00A4 904398            MOV     DPTR,#04398H
00A7 E0                MOVX    A,@DPTR
00A8 900000      R     MOV     DPTR,#cyPmBackup+07H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 636
00AC 900000      R     MOV     DPTR,#wakeupSource
00AF E0                MOVX    A,@DPTR
00B0 FE                MOV     R6,A
00B1 A3                INC     DPTR
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 EE                MOV     A,R6
00B5 C4                SWAP    A
00B6 F8                MOV     R0,A
00B7 54F0              ANL     A,#0F0H
00B9 C8                XCH     A,R0
00BA 68                XRL     A,R0
00BB EF                MOV     A,R7
00BC C4                SWAP    A
00BD 540F              ANL     A,#0FH
00BF 48                ORL     A,R0
00C0 904398            MOV     DPTR,#04398H
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
00C4 A3                INC     DPTR
00C5 E0                MOVX    A,@DPTR
00C6 900000      R     MOV     DPTR,#cyPmBackup+08H
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
00CA 900000      R     MOV     DPTR,#wakeupSource
00CD E0                MOVX    A,@DPTR
00CE A3                INC     DPTR
00CF E0                MOVX    A,@DPTR
00D0 540F              ANL     A,#0FH
00D2 904399            MOV     DPTR,#04399H
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
00D6 A3                INC     DPTR
00D7 E0                MOVX    A,@DPTR
00D8 900000      R     MOV     DPTR,#cyPmBackup+09H
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
00DC 900000      R     MOV     DPTR,#wakeupSource
00DF E0                MOVX    A,@DPTR
00E0 FE                MOV     R6,A
00E1 A3                INC     DPTR
00E2 E0                MOVX    A,@DPTR
00E3 EE                MOV     A,R6
00E4 C4                SWAP    A
00E5 540F              ANL     A,#0FH
00E7 5401              ANL     A,#01H
00E9 90439A            MOV     DPTR,#0439AH
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
00ED 904393            MOV     DPTR,#04393H
00F0 E0                MOVX    A,@DPTR
00F1 54F8              ANL     A,#0F8H
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 47  

00F3 4401              ORL     A,#01H
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 651
00F6 E0                MOVX    A,@DPTR
00F7 FF                MOV     R7,A
                                           ; SOURCE LINE # 654
00F8 00                NOP     
                                           ; SOURCE LINE # 655
00F9 00                NOP     
                                           ; SOURCE LINE # 658
00FA 00                NOP     
                                           ; SOURCE LINE # 663
00FB 900000      R     MOV     DPTR,#cyPmBackup+07H
00FE E0                MOVX    A,@DPTR
00FF 904398            MOV     DPTR,#04398H
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 664
0103 900000      R     MOV     DPTR,#cyPmBackup+08H
0106 E0                MOVX    A,@DPTR
0107 904399            MOV     DPTR,#04399H
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
010B 900000      R     MOV     DPTR,#cyPmBackup+09H
010E E0                MOVX    A,@DPTR
010F 90439A            MOV     DPTR,#0439AH
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 666
0113 22                RET     
             ; FUNCTION _CyPmAltAct (END)

             ; FUNCTION _CyPmSleep (BEGIN)
                                           ; SOURCE LINE # 787
0000 900000      R     MOV     DPTR,#wakeupTime
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 792
000B 120000      E     LCALL   CyEnterCriticalSection
000E 900000      R     MOV     DPTR,#interruptState
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 801
0013 904393            MOV     DPTR,#04393H
0016 E0                MOVX    A,@DPTR
0017 5408              ANL     A,#08H
0019 7009              JNZ     ?C0049
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 804
001B 904683            MOV     DPTR,#04683H
001E E0                MOVX    A,@DPTR
001F 541F              ANL     A,#01FH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
0022 8009              SJMP    ?C0050
0024         ?C0049:
                                           ; SOURCE LINE # 807
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 48  

                                           ; SOURCE LINE # 811
0024 900000      R     MOV     DPTR,#interruptState
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 120000      E     LCALL   _CyExitCriticalSection
002C 22                RET     
                                           ; SOURCE LINE # 814
002D         ?C0050:
                                           ; SOURCE LINE # 830
002D 9046EC            MOV     DPTR,#046ECH
0030 E0                MOVX    A,@DPTR
0031 C3                CLR     C
0032 9405              SUBB    A,#05H
0034 5012              JNC     ?C0052
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 833
0036 904689            MOV     DPTR,#04689H
0039 E0                MOVX    A,@DPTR
003A 5401              ANL     A,#01H
003C 7002              JNZ     ?C0054
003E 8001              SJMP    ?C0055
0040         ?C0054:
0040 C3                CLR     C
0041         ?C0055:
0041 4005              JC      ?C0052
0043 7F00              MOV     R7,#00H
0045 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 834
0048         ?C0052:
                                           ; SOURCE LINE # 837
0048 9046F5            MOV     DPTR,#046F5H
004B E0                MOVX    A,@DPTR
004C 5407              ANL     A,#07H
004E 602B              JZ      ?C0056
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
0050 9046EC            MOV     DPTR,#046ECH
0053 E0                MOVX    A,@DPTR
0054 C3                CLR     C
0055 9405              SUBB    A,#05H
0057 5007              JNC     ?C0057
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 843
0059 7F00              MOV     R7,#00H
005B 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 844
005E 801B              SJMP    ?C0056
0060         ?C0057:
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
0060 904689            MOV     DPTR,#04689H
0063 E0                MOVX    A,@DPTR
0064 5401              ANL     A,#01H
0066 700D              JNZ     ?C0060
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
0068 900000      R     MOV     DPTR,#cyPmBackup+06H
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
006C 904689            MOV     DPTR,#04689H
006F E0                MOVX    A,@DPTR
0070 4401              ORL     A,#01H
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 49  

0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 851
0073 8006              SJMP    ?C0056
0075         ?C0060:
                                           ; SOURCE LINE # 853
                                           ; SOURCE LINE # 854
0075 900000      R     MOV     DPTR,#cyPmBackup+06H
0078 7401              MOV     A,#01H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
007B         ?C0056:
                                           ; SOURCE LINE # 882
007B 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 888
007E 900000      R     MOV     DPTR,#wakeupTime
0081 E0                MOVX    A,@DPTR
0082 C3                CLR     C
0083 9402              SUBB    A,#02H
0085 401E              JC      ?C0062
0087 E0                MOVX    A,@DPTR
0088 D3                SETB    C
0089 940D              SUBB    A,#0DH
008B 5018              JNC     ?C0062
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 891
008D E0                MOVX    A,@DPTR
008E 14                DEC     A
008F FF                MOV     R7,A
0090 120000      R     LCALL   _CyPmCtwSetInterval
                                           ; SOURCE LINE # 894
0093 900000      R     MOV     DPTR,#wakeupSource
0096 E0                MOVX    A,@DPTR
0097 FE                MOV     R6,A
0098 A3                INC     DPTR
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B EE                MOV     A,R6
009C 4408              ORL     A,#08H
009E 900000      R     MOV     DPTR,#wakeupSource
00A1 F0                MOVX    @DPTR,A
00A2 A3                INC     DPTR
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 895
00A5         ?C0062:
                                           ; SOURCE LINE # 898
00A5 900000      R     MOV     DPTR,#wakeupTime
00A8 E0                MOVX    A,@DPTR
00A9 B40115            CJNE    A,#01H,?C0063
                                           ; SOURCE LINE # 899
                                           ; SOURCE LINE # 901
00AC 120000      R     LCALL   CyPmOppsSet
                                           ; SOURCE LINE # 904
00AF 900000      R     MOV     DPTR,#wakeupSource
00B2 E0                MOVX    A,@DPTR
00B3 FE                MOV     R6,A
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 EE                MOV     A,R6
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 50  

00B8 4408              ORL     A,#08H
00BA 900000      R     MOV     DPTR,#wakeupSource
00BD F0                MOVX    @DPTR,A
00BE A3                INC     DPTR
00BF EF                MOV     A,R7
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 905
00C1         ?C0063:
                                           ; SOURCE LINE # 913
00C1 904398            MOV     DPTR,#04398H
00C4 E0                MOVX    A,@DPTR
00C5 900000      R     MOV     DPTR,#cyPmBackup+07H
00C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 914
00C9 900000      R     MOV     DPTR,#wakeupSource
00CC E0                MOVX    A,@DPTR
00CD FE                MOV     R6,A
00CE A3                INC     DPTR
00CF E0                MOVX    A,@DPTR
00D0 FF                MOV     R7,A
00D1 EE                MOV     A,R6
00D2 C4                SWAP    A
00D3 F8                MOV     R0,A
00D4 54F0              ANL     A,#0F0H
00D6 C8                XCH     A,R0
00D7 68                XRL     A,R0
00D8 EF                MOV     A,R7
00D9 C4                SWAP    A
00DA 540F              ANL     A,#0FH
00DC 48                ORL     A,R0
00DD 904398            MOV     DPTR,#04398H
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 917
00E1 A3                INC     DPTR
00E2 E0                MOVX    A,@DPTR
00E3 900000      R     MOV     DPTR,#cyPmBackup+08H
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 918
00E7 900000      R     MOV     DPTR,#wakeupSource
00EA E0                MOVX    A,@DPTR
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED 540F              ANL     A,#0FH
00EF 904399            MOV     DPTR,#04399H
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 921
00F3 A3                INC     DPTR
00F4 E0                MOVX    A,@DPTR
00F5 900000      R     MOV     DPTR,#cyPmBackup+09H
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 922
00F9 900000      R     MOV     DPTR,#wakeupSource
00FC E0                MOVX    A,@DPTR
00FD FE                MOV     R6,A
00FE A3                INC     DPTR
00FF E0                MOVX    A,@DPTR
0100 EE                MOV     A,R6
0101 C4                SWAP    A
0102 540F              ANL     A,#0FH
0104 5401              ANL     A,#01H
0106 90439A            MOV     DPTR,#0439AH
0109 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 51  

                                           ; SOURCE LINE # 935
010A 904200            MOV     DPTR,#04200H
010D E0                MOVX    A,@DPTR
010E 5407              ANL     A,#07H
0110 7007              JNZ     ?C0064
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 938
0112 900000      R     MOV     DPTR,#cyPmBackup+030H
0115 04                INC     A
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 939
0117 8016              SJMP    ?C0065
0119         ?C0064:
                                           ; SOURCE LINE # 941
                                           ; SOURCE LINE # 943
0119 E4                CLR     A
011A 900000      R     MOV     DPTR,#cyPmBackup+030H
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 946
011E 904200            MOV     DPTR,#04200H
0121 E0                MOVX    A,@DPTR
0122 5407              ANL     A,#07H
0124 900000      R     MOV     DPTR,#cyPmBackup+02FH
0127 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
0128 904200            MOV     DPTR,#04200H
012B E0                MOVX    A,@DPTR
012C 54F8              ANL     A,#0F8H
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 950
012F         ?C0065:
                                           ; SOURCE LINE # 953
012F 904393            MOV     DPTR,#04393H
0132 E0                MOVX    A,@DPTR
0133 54F8              ANL     A,#0F8H
0135 4403              ORL     A,#03H
0137 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 956
0138 E0                MOVX    A,@DPTR
0139 FF                MOV     R7,A
                                           ; SOURCE LINE # 959
013A 00                NOP     
                                           ; SOURCE LINE # 960
013B 00                NOP     
                                           ; SOURCE LINE # 963
013C 00                NOP     
                                           ; SOURCE LINE # 968
013D 900000      R     MOV     DPTR,#cyPmBackup+030H
0140 E0                MOVX    A,@DPTR
0141 6401              XRL     A,#01H
0143 6010              JZ      ?C0066
                                           ; SOURCE LINE # 969
                                           ; SOURCE LINE # 970
0145 904200            MOV     DPTR,#04200H
0148 E0                MOVX    A,@DPTR
0149 54F8              ANL     A,#0F8H
014B FF                MOV     R7,A
014C 900000      R     MOV     DPTR,#cyPmBackup+02FH
014F E0                MOVX    A,@DPTR
0150 4F                ORL     A,R7
0151 904200            MOV     DPTR,#04200H
0154 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 52  

                                           ; SOURCE LINE # 972
0155         ?C0066:
                                           ; SOURCE LINE # 985
0155 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 991
0158 9046F5            MOV     DPTR,#046F5H
015B E0                MOVX    A,@DPTR
015C 5407              ANL     A,#07H
015E 6016              JZ      ?C0067
                                           ; SOURCE LINE # 993
                                           ; SOURCE LINE # 994
0160 9046EC            MOV     DPTR,#046ECH
0163 E0                MOVX    A,@DPTR
0164 C3                CLR     C
0165 9405              SUBB    A,#05H
0167 400D              JC      ?C0067
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 996
0169 900000      R     MOV     DPTR,#cyPmBackup+06H
016C E0                MOVX    A,@DPTR
016D 7007              JNZ     ?C0067
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 998
016F 904689            MOV     DPTR,#04689H
0172 E0                MOVX    A,@DPTR
0173 54FE              ANL     A,#0FEH
0175 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
                                           ; SOURCE LINE # 1001
0176         ?C0067:
                                           ; SOURCE LINE # 1007
0176 900000      R     MOV     DPTR,#cyPmBackup+07H
0179 E0                MOVX    A,@DPTR
017A 904398            MOV     DPTR,#04398H
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1008
017E 900000      R     MOV     DPTR,#cyPmBackup+08H
0181 E0                MOVX    A,@DPTR
0182 904399            MOV     DPTR,#04399H
0185 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1009
0186 900000      R     MOV     DPTR,#cyPmBackup+09H
0189 E0                MOVX    A,@DPTR
018A 90439A            MOV     DPTR,#0439AH
018D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1012
018E 900000      R     MOV     DPTR,#interruptState
0191 E0                MOVX    A,@DPTR
0192 FF                MOV     R7,A
0193 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1013
0196         ?C0051:
0196 22                RET     
             ; FUNCTION _CyPmSleep (END)

             ; FUNCTION CyPmHibernate (BEGIN)
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1064
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 53  

0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1072
0008 904393            MOV     DPTR,#04393H
000B E0                MOVX    A,@DPTR
000C 5408              ANL     A,#08H
000E 7009              JNZ     ?C0070
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1075
0010 904683            MOV     DPTR,#04683H
0013 E0                MOVX    A,@DPTR
0014 541F              ANL     A,#01FH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1076
0017 8009              SJMP    ?C0071
0019         ?C0070:
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1082
0019 900000      R     MOV     DPTR,#interruptState
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      E     LCALL   _CyExitCriticalSection
0021 22                RET     
                                           ; SOURCE LINE # 1085
0022         ?C0071:
                                           ; SOURCE LINE # 1087
0022 120000      R     LCALL   CyPmHibSaveSet
                                           ; SOURCE LINE # 1091
0025 904398            MOV     DPTR,#04398H
0028 E0                MOVX    A,@DPTR
0029 900000      R     MOV     DPTR,#cyPmBackup+07H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1092
002D 904398            MOV     DPTR,#04398H
0030 7404              MOV     A,#04H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1094
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 900000      R     MOV     DPTR,#cyPmBackup+08H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1095
0039 904399            MOV     DPTR,#04399H
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1097
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 900000      R     MOV     DPTR,#cyPmBackup+09H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1098
0044 90439A            MOV     DPTR,#0439AH
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1102
0049 904200            MOV     DPTR,#04200H
004C E0                MOVX    A,@DPTR
004D 5407              ANL     A,#07H
004F 7007              JNZ     ?C0073
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1105
0051 900000      R     MOV     DPTR,#cyPmBackup+030H
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 54  

0054 04                INC     A
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1106
0056 8016              SJMP    ?C0074
0058         ?C0073:
                                           ; SOURCE LINE # 1108
                                           ; SOURCE LINE # 1110
0058 E4                CLR     A
0059 900000      R     MOV     DPTR,#cyPmBackup+030H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1113
005D 904200            MOV     DPTR,#04200H
0060 E0                MOVX    A,@DPTR
0061 5407              ANL     A,#07H
0063 900000      R     MOV     DPTR,#cyPmBackup+02FH
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1116
0067 904200            MOV     DPTR,#04200H
006A E0                MOVX    A,@DPTR
006B 54F8              ANL     A,#0F8H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1117
006E         ?C0074:
                                           ; SOURCE LINE # 1121
006E 904393            MOV     DPTR,#04393H
0071 E0                MOVX    A,@DPTR
0072 54F8              ANL     A,#0F8H
0074 4404              ORL     A,#04H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1124
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
                                           ; SOURCE LINE # 1127
0079 00                NOP     
                                           ; SOURCE LINE # 1128
007A 00                NOP     
                                           ; SOURCE LINE # 1131
007B 00                NOP     
                                           ; SOURCE LINE # 1138
007C 900000      R     MOV     DPTR,#cyPmBackup+030H
007F E0                MOVX    A,@DPTR
0080 6401              XRL     A,#01H
0082 6010              JZ      ?C0075
                                           ; SOURCE LINE # 1139
                                           ; SOURCE LINE # 1140
0084 904200            MOV     DPTR,#04200H
0087 E0                MOVX    A,@DPTR
0088 54F8              ANL     A,#0F8H
008A FF                MOV     R7,A
008B 900000      R     MOV     DPTR,#cyPmBackup+02FH
008E E0                MOVX    A,@DPTR
008F 4F                ORL     A,R7
0090 904200            MOV     DPTR,#04200H
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1142
0094         ?C0075:
                                           ; SOURCE LINE # 1146
0094 120000      R     LCALL   CyPmHibRestore
                                           ; SOURCE LINE # 1149
0097 900000      R     MOV     DPTR,#cyPmBackup+07H
009A E0                MOVX    A,@DPTR
009B 904398            MOV     DPTR,#04398H
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 55  

009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1150
009F 900000      R     MOV     DPTR,#cyPmBackup+08H
00A2 E0                MOVX    A,@DPTR
00A3 904399            MOV     DPTR,#04399H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1151
00A7 900000      R     MOV     DPTR,#cyPmBackup+09H
00AA E0                MOVX    A,@DPTR
00AB 90439A            MOV     DPTR,#0439AH
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1154
00AF 900000      R     MOV     DPTR,#interruptState
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1155
00B7         ?C0072:
00B7 22                RET     
             ; FUNCTION CyPmHibernate (END)

             ; FUNCTION _CyPmReadStatus (BEGIN)
                                           ; SOURCE LINE # 1187
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1194
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#interruptState
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1197
000D 900000      R     MOV     DPTR,#interruptStatus
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 904390            MOV     DPTR,#04390H
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 EF                MOV     A,R7
0018 4E                ORL     A,R6
0019 900000      R     MOV     DPTR,#interruptStatus
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1198
001D E0                MOVX    A,@DPTR
001E 900000      R     MOV     DPTR,#tmpStatus
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1199
0022 900000      R     MOV     DPTR,#interruptStatus
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#mask
0029 E0                MOVX    A,@DPTR
002A F4                CPL     A
002B FE                MOV     R6,A
002C EF                MOV     A,R7
002D 5E                ANL     A,R6
002E 900000      R     MOV     DPTR,#interruptStatus
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1202
0032 900000      R     MOV     DPTR,#interruptState
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 56  

0037 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1204
003A 900000      R     MOV     DPTR,#tmpStatus
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
                                           ; SOURCE LINE # 1205
003F         ?C0076:
003F 22                RET     
             ; FUNCTION _CyPmReadStatus (END)

             ; FUNCTION CyPmHibSaveSet (BEGIN)
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1232
                                           ; SOURCE LINE # 1234
0000 904331            MOV     DPTR,#04331H
0003 E0                MOVX    A,@DPTR
0004 5404              ANL     A,#04H
0006 6004              JZ      ?C0077
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1248
0008 E0                MOVX    A,@DPTR
0009 54FB              ANL     A,#0FBH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1249
000C         ?C0077:
                                           ; SOURCE LINE # 1253
000C 7F01              MOV     R7,#01H
000E 120000      E     LCALL   _CyILO_SetPowerMode
0011 900000      R     MOV     DPTR,#cyPmBackup
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1256
0016 904300            MOV     DPTR,#04300H
0019 E0                MOVX    A,@DPTR
001A 5402              ANL     A,#02H
001C 7003              JNZ     ?C0078
001E FF                MOV     R7,A
001F 8002              SJMP    ?C0079
0021         ?C0078:
0021 7F01              MOV     R7,#01H
0023         ?C0079:
0023 900000      R     MOV     DPTR,#cyPmBackup+01H
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1260
0028 904300            MOV     DPTR,#04300H
002B E0                MOVX    A,@DPTR
002C 5404              ANL     A,#04H
002E 7003              JNZ     ?C0080
0030 FF                MOV     R7,A
0031 8002              SJMP    ?C0081
0033         ?C0080:
0033 7F01              MOV     R7,#01H
0035         ?C0081:
0035 900000      R     MOV     DPTR,#cyPmBackup+02H
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1265
003A 904683            MOV     DPTR,#04683H
003D E0                MOVX    A,@DPTR
003E 5410              ANL     A,#010H
0040 700D              JNZ     ?C0082
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 57  

                                           ; SOURCE LINE # 1266
                                           ; SOURCE LINE # 1268
0042 900000      R     MOV     DPTR,#cyPmBackup+03H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1269
0046 904683            MOV     DPTR,#04683H
0049 E0                MOVX    A,@DPTR
004A 4410              ORL     A,#010H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1270
004D 8006              SJMP    ?C0083
004F         ?C0082:
                                           ; SOURCE LINE # 1272
                                           ; SOURCE LINE # 1273
004F 900000      R     MOV     DPTR,#cyPmBackup+03H
0052 7401              MOV     A,#01H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1274
0055         ?C0083:
                                           ; SOURCE LINE # 1284
0055 120000      R     LCALL   CyPmHviLviSaveDisable
                                           ; SOURCE LINE # 1288
0058 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 1294
005B 904685            MOV     DPTR,#04685H
005E E0                MOVX    A,@DPTR
005F 900000      R     MOV     DPTR,#cyPmBackup+0AH
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1295
0063 904686            MOV     DPTR,#04686H
0066 E0                MOVX    A,@DPTR
0067 900000      R     MOV     DPTR,#cyPmBackup+0BH
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1297
006B 904685            MOV     DPTR,#04685H
006E 74FF              MOV     A,#0FFH
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1298
0071 A3                INC     DPTR
0072 7490              MOV     A,#090H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1299
0075 22                RET     
             ; FUNCTION CyPmHibSaveSet (END)

             ; FUNCTION CyPmHibRestore (BEGIN)
                                           ; SOURCE LINE # 1321
                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1324
0000 120000      R     LCALL   CyPmHviLviRestore
                                           ; SOURCE LINE # 1327
0003 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 1330
0006 900000      R     MOV     DPTR,#cyPmBackup+01H
0009 E0                MOVX    A,@DPTR
000A B40103            CJNE    A,#01H,?C0085
                                           ; SOURCE LINE # 1331
                                           ; SOURCE LINE # 1333
000D 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1334
0010         ?C0085:
                                           ; SOURCE LINE # 1337
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 58  

0010 900000      R     MOV     DPTR,#cyPmBackup+02H
0013 E0                MOVX    A,@DPTR
0014 B40103            CJNE    A,#01H,?C0086
                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1340
0017 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1341
001A         ?C0086:
                                           ; SOURCE LINE # 1344
001A 900000      R     MOV     DPTR,#cyPmBackup
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 120000      E     LCALL   _CyILO_SetPowerMode
                                           ; SOURCE LINE # 1347
0022 900000      R     MOV     DPTR,#cyPmBackup+03H
0025 E0                MOVX    A,@DPTR
0026 7007              JNZ     ?C0087
                                           ; SOURCE LINE # 1348
                                           ; SOURCE LINE # 1350
0028 904683            MOV     DPTR,#04683H
002B E0                MOVX    A,@DPTR
002C 54EF              ANL     A,#0EFH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
002F         ?C0087:
                                           ; SOURCE LINE # 1357
002F 900000      R     MOV     DPTR,#cyPmBackup+0AH
0032 E0                MOVX    A,@DPTR
0033 904685            MOV     DPTR,#04685H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1358
0037 900000      R     MOV     DPTR,#cyPmBackup+0BH
003A E0                MOVX    A,@DPTR
003B 904686            MOV     DPTR,#04686H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1359
003F 22                RET     
             ; FUNCTION CyPmHibRestore (END)

             ; FUNCTION _CyPmCtwSetInterval (BEGIN)
                                           ; SOURCE LINE # 1382
0000 900000      R     MOV     DPTR,#ctwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1383
                                           ; SOURCE LINE # 1385
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 54F7              ANL     A,#0F7H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1388
000C 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1391
000F 904382            MOV     DPTR,#04382H
0012 E0                MOVX    A,@DPTR
0013 5404              ANL     A,#04H
0015 601F              JZ      ?C0089
                                           ; SOURCE LINE # 1392
                                           ; SOURCE LINE # 1394
0017 900000      R     MOV     DPTR,#ctwInterval
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 59  

001C 904381            MOV     DPTR,#04381H
001F E0                MOVX    A,@DPTR
0020 6F                XRL     A,R7
0021 602E              JZ      ?C0093
                                           ; SOURCE LINE # 1395
                                           ; SOURCE LINE # 1397
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 54FB              ANL     A,#0FBH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1398
0028 900000      R     MOV     DPTR,#ctwInterval
002B E0                MOVX    A,@DPTR
002C 904381            MOV     DPTR,#04381H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1399
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 4404              ORL     A,#04H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1400
                                           ; SOURCE LINE # 1401
0035 22                RET     
0036         ?C0089:
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1405
0036 900000      R     MOV     DPTR,#ctwInterval
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 904381            MOV     DPTR,#04381H
003E E0                MOVX    A,@DPTR
003F 6F                XRL     A,R7
0040 6008              JZ      ?C0092
                                           ; SOURCE LINE # 1406
                                           ; SOURCE LINE # 1408
0042 900000      R     MOV     DPTR,#ctwInterval
0045 E0                MOVX    A,@DPTR
0046 904381            MOV     DPTR,#04381H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1409
004A         ?C0092:
                                           ; SOURCE LINE # 1412
004A 904382            MOV     DPTR,#04382H
004D E0                MOVX    A,@DPTR
004E 4404              ORL     A,#04H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1413
                                           ; SOURCE LINE # 1414
0051         ?C0093:
0051 22                RET     
             ; FUNCTION _CyPmCtwSetInterval (END)

             ; FUNCTION CyPmOppsSet (BEGIN)
                                           ; SOURCE LINE # 1434
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1437
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 7003              JNZ     ?C0094
                                           ; SOURCE LINE # 1438
                                           ; SOURCE LINE # 1440
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 60  

0008 120000      E     LCALL   CyXTAL_32KHZ_Start
                                           ; SOURCE LINE # 1441
000B         ?C0094:
                                           ; SOURCE LINE # 1444
000B 904382            MOV     DPTR,#04382H
000E E0                MOVX    A,@DPTR
000F 54DF              ANL     A,#0DFH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1447
0012 E0                MOVX    A,@DPTR
0013 4410              ORL     A,#010H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1448
0016 22                RET     
             ; FUNCTION CyPmOppsSet (END)

             ; FUNCTION _CyPmFtwSetInterval (BEGIN)
                                           ; SOURCE LINE # 1471
0000 900000      R     MOV     DPTR,#ftwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1472
                                           ; SOURCE LINE # 1474
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 54FD              ANL     A,#0FDH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1477
000C 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1480
000F 904382            MOV     DPTR,#04382H
0012 E0                MOVX    A,@DPTR
0013 5401              ANL     A,#01H
0015 6023              JZ      ?C0096
                                           ; SOURCE LINE # 1481
                                           ; SOURCE LINE # 1483
0017 900000      R     MOV     DPTR,#ftwInterval
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 904380            MOV     DPTR,#04380H
001F E0                MOVX    A,@DPTR
0020 6F                XRL     A,R7
0021 6032              JZ      ?C0100
                                           ; SOURCE LINE # 1484
                                           ; SOURCE LINE # 1486
0023 904382            MOV     DPTR,#04382H
0026 E0                MOVX    A,@DPTR
0027 54FE              ANL     A,#0FEH
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1487
002A 900000      R     MOV     DPTR,#ftwInterval
002D E0                MOVX    A,@DPTR
002E 904380            MOV     DPTR,#04380H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1488
0032 904382            MOV     DPTR,#04382H
0035 E0                MOVX    A,@DPTR
0036 4401              ORL     A,#01H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1489
                                           ; SOURCE LINE # 1490
0039 22                RET     
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 61  

003A         ?C0096:
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1494
003A 900000      R     MOV     DPTR,#ftwInterval
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 904380            MOV     DPTR,#04380H
0042 E0                MOVX    A,@DPTR
0043 6F                XRL     A,R7
0044 6008              JZ      ?C0099
                                           ; SOURCE LINE # 1495
                                           ; SOURCE LINE # 1497
0046 900000      R     MOV     DPTR,#ftwInterval
0049 E0                MOVX    A,@DPTR
004A 904380            MOV     DPTR,#04380H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1498
004E         ?C0099:
                                           ; SOURCE LINE # 1501
004E 904382            MOV     DPTR,#04382H
0051 E0                MOVX    A,@DPTR
0052 4401              ORL     A,#01H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1502
                                           ; SOURCE LINE # 1503
0055         ?C0100:
0055 22                RET     
             ; FUNCTION _CyPmFtwSetInterval (END)

             ; FUNCTION CyPmHibSlpSaveSet (BEGIN)
                                           ; SOURCE LINE # 1528
                                           ; SOURCE LINE # 1529
                                           ; SOURCE LINE # 1531
0000 905A00            MOV     DPTR,#05A00H
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#cyPmBackup+0CH
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1532
0008 905A02            MOV     DPTR,#05A02H
000B E0                MOVX    A,@DPTR
000C 900000      R     MOV     DPTR,#cyPmBackup+0DH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1533
0010 905A03            MOV     DPTR,#05A03H
0013 E0                MOVX    A,@DPTR
0014 900000      R     MOV     DPTR,#cyPmBackup+0EH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1534
0018 905A04            MOV     DPTR,#05A04H
001B E0                MOVX    A,@DPTR
001C 900000      R     MOV     DPTR,#cyPmBackup+0FH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1535
0020 905A06            MOV     DPTR,#05A06H
0023 E0                MOVX    A,@DPTR
0024 900000      R     MOV     DPTR,#cyPmBackup+010H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1536
0028 905A08            MOV     DPTR,#05A08H
002B E0                MOVX    A,@DPTR
002C 900000      R     MOV     DPTR,#cyPmBackup+011H
002F F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 62  

                                           ; SOURCE LINE # 1537
0030 905A0A            MOV     DPTR,#05A0AH
0033 E0                MOVX    A,@DPTR
0034 900000      R     MOV     DPTR,#cyPmBackup+012H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1539
0038 905A10            MOV     DPTR,#05A10H
003B E0                MOVX    A,@DPTR
003C 900000      R     MOV     DPTR,#cyPmBackup+013H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1540
0040 905A12            MOV     DPTR,#05A12H
0043 E0                MOVX    A,@DPTR
0044 900000      R     MOV     DPTR,#cyPmBackup+014H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1541
0048 905A13            MOV     DPTR,#05A13H
004B E0                MOVX    A,@DPTR
004C 900000      R     MOV     DPTR,#cyPmBackup+015H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1542
0050 905A14            MOV     DPTR,#05A14H
0053 E0                MOVX    A,@DPTR
0054 900000      R     MOV     DPTR,#cyPmBackup+016H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1543
0058 905A16            MOV     DPTR,#05A16H
005B E0                MOVX    A,@DPTR
005C 900000      R     MOV     DPTR,#cyPmBackup+017H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1544
0060 905A18            MOV     DPTR,#05A18H
0063 E0                MOVX    A,@DPTR
0064 900000      R     MOV     DPTR,#cyPmBackup+018H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1545
0068 905A1A            MOV     DPTR,#05A1AH
006B E0                MOVX    A,@DPTR
006C 900000      R     MOV     DPTR,#cyPmBackup+019H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1547
0070 905A20            MOV     DPTR,#05A20H
0073 E0                MOVX    A,@DPTR
0074 900000      R     MOV     DPTR,#cyPmBackup+01AH
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1548
0078 905A22            MOV     DPTR,#05A22H
007B E0                MOVX    A,@DPTR
007C 900000      R     MOV     DPTR,#cyPmBackup+01BH
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1549
0080 905A23            MOV     DPTR,#05A23H
0083 E0                MOVX    A,@DPTR
0084 900000      R     MOV     DPTR,#cyPmBackup+01CH
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1550
0088 905A24            MOV     DPTR,#05A24H
008B E0                MOVX    A,@DPTR
008C 900000      R     MOV     DPTR,#cyPmBackup+01DH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1551
0090 905A26            MOV     DPTR,#05A26H
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 63  

0093 E0                MOVX    A,@DPTR
0094 900000      R     MOV     DPTR,#cyPmBackup+01EH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1552
0098 905A28            MOV     DPTR,#05A28H
009B E0                MOVX    A,@DPTR
009C 900000      R     MOV     DPTR,#cyPmBackup+01FH
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1553
00A0 905A2A            MOV     DPTR,#05A2AH
00A3 E0                MOVX    A,@DPTR
00A4 900000      R     MOV     DPTR,#cyPmBackup+020H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1555
00A8 905A30            MOV     DPTR,#05A30H
00AB E0                MOVX    A,@DPTR
00AC 900000      R     MOV     DPTR,#cyPmBackup+021H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1556
00B0 905A32            MOV     DPTR,#05A32H
00B3 E0                MOVX    A,@DPTR
00B4 900000      R     MOV     DPTR,#cyPmBackup+022H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1557
00B8 905A33            MOV     DPTR,#05A33H
00BB E0                MOVX    A,@DPTR
00BC 900000      R     MOV     DPTR,#cyPmBackup+023H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1558
00C0 905A34            MOV     DPTR,#05A34H
00C3 E0                MOVX    A,@DPTR
00C4 900000      R     MOV     DPTR,#cyPmBackup+024H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1559
00C8 905A36            MOV     DPTR,#05A36H
00CB E0                MOVX    A,@DPTR
00CC 900000      R     MOV     DPTR,#cyPmBackup+025H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1560
00D0 905A38            MOV     DPTR,#05A38H
00D3 E0                MOVX    A,@DPTR
00D4 900000      R     MOV     DPTR,#cyPmBackup+026H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1561
00D8 905A3A            MOV     DPTR,#05A3AH
00DB E0                MOVX    A,@DPTR
00DC 900000      R     MOV     DPTR,#cyPmBackup+027H
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1563
00E0 905A00            MOV     DPTR,#05A00H
00E3 E4                CLR     A
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1564
00E5 905A02            MOV     DPTR,#05A02H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1565
00E9 A3                INC     DPTR
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1566
00EB A3                INC     DPTR
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1567
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 64  

00ED 905A06            MOV     DPTR,#05A06H
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1568
00F1 905A08            MOV     DPTR,#05A08H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1569
00F5 905A0A            MOV     DPTR,#05A0AH
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1571
00F9 905A10            MOV     DPTR,#05A10H
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1572
00FD 905A12            MOV     DPTR,#05A12H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1573
0101 A3                INC     DPTR
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1574
0103 A3                INC     DPTR
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1575
0105 905A16            MOV     DPTR,#05A16H
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1576
0109 905A18            MOV     DPTR,#05A18H
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1577
010D 905A1A            MOV     DPTR,#05A1AH
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1579
0111 905A20            MOV     DPTR,#05A20H
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1580
0115 905A22            MOV     DPTR,#05A22H
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1581
0119 A3                INC     DPTR
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1582
011B A3                INC     DPTR
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1583
011D 905A26            MOV     DPTR,#05A26H
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1584
0121 905A28            MOV     DPTR,#05A28H
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1585
0125 905A2A            MOV     DPTR,#05A2AH
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1587
0129 905A30            MOV     DPTR,#05A30H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1588
012D 905A32            MOV     DPTR,#05A32H
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1589
0131 A3                INC     DPTR
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1590
0133 A3                INC     DPTR
0134 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 65  

                                           ; SOURCE LINE # 1591
0135 905A36            MOV     DPTR,#05A36H
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1592
0139 905A38            MOV     DPTR,#05A38H
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1593
013D 905A3A            MOV     DPTR,#05A3AH
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1601
0141 9046E8            MOV     DPTR,#046E8H
0144 E0                MOVX    A,@DPTR
0145 5404              ANL     A,#04H
0147 6022              JZ      ?C0101
                                           ; SOURCE LINE # 1602
                                           ; SOURCE LINE # 1604
0149 900000      R     MOV     DPTR,#cyPmBackup+04H
014C 7401              MOV     A,#01H
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1607
014F 90500B            MOV     DPTR,#0500BH
0152 E0                MOVX    A,@DPTR
0153 540E              ANL     A,#0EH
0155 900000      R     MOV     DPTR,#cyPmBackup+05H
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1610
0159 90500B            MOV     DPTR,#0500BH
015C E0                MOVX    A,@DPTR
015D 54F1              ANL     A,#0F1H
015F 440C              ORL     A,#0CH
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1614
0162 9046E8            MOV     DPTR,#046E8H
0165 E0                MOVX    A,@DPTR
0166 54FB              ANL     A,#0FBH
0168 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1615
0169 8005              SJMP    ?C0102
016B         ?C0101:
                                           ; SOURCE LINE # 1617
                                           ; SOURCE LINE # 1619
016B E4                CLR     A
016C 900000      R     MOV     DPTR,#cyPmBackup+04H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1620
0170         ?C0102:
                                           ; SOURCE LINE # 1629
0170 904322            MOV     DPTR,#04322H
0173 E0                MOVX    A,@DPTR
0174 5408              ANL     A,#08H
0176 600E              JZ      ?C0103
                                           ; SOURCE LINE # 1630
                                           ; SOURCE LINE # 1631
0178 900000      R     MOV     DPTR,#cyPmBackup+031H
017B 7401              MOV     A,#01H
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1632
017E 904322            MOV     DPTR,#04322H
0181 E0                MOVX    A,@DPTR
0182 54F7              ANL     A,#0F7H
0184 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1633
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 66  

0185 22                RET     
0186         ?C0103:
                                           ; SOURCE LINE # 1635
                                           ; SOURCE LINE # 1636
0186 E4                CLR     A
0187 900000      R     MOV     DPTR,#cyPmBackup+031H
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1638
018B         ?C0105:
018B 22                RET     
             ; FUNCTION CyPmHibSlpSaveSet (END)

             ; FUNCTION CyPmHibSlpRestore (BEGIN)
                                           ; SOURCE LINE # 1659
                                           ; SOURCE LINE # 1660
                                           ; SOURCE LINE # 1662
0000 900000      R     MOV     DPTR,#cyPmBackup+0CH
0003 E0                MOVX    A,@DPTR
0004 905A00            MOV     DPTR,#05A00H
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1663
0008 900000      R     MOV     DPTR,#cyPmBackup+0DH
000B E0                MOVX    A,@DPTR
000C 905A02            MOV     DPTR,#05A02H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1664
0010 900000      R     MOV     DPTR,#cyPmBackup+0EH
0013 E0                MOVX    A,@DPTR
0014 905A03            MOV     DPTR,#05A03H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1665
0018 900000      R     MOV     DPTR,#cyPmBackup+0FH
001B E0                MOVX    A,@DPTR
001C 905A04            MOV     DPTR,#05A04H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1666
0020 900000      R     MOV     DPTR,#cyPmBackup+010H
0023 E0                MOVX    A,@DPTR
0024 905A06            MOV     DPTR,#05A06H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1667
0028 900000      R     MOV     DPTR,#cyPmBackup+011H
002B E0                MOVX    A,@DPTR
002C 905A08            MOV     DPTR,#05A08H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1668
0030 900000      R     MOV     DPTR,#cyPmBackup+012H
0033 E0                MOVX    A,@DPTR
0034 905A0A            MOV     DPTR,#05A0AH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1670
0038 900000      R     MOV     DPTR,#cyPmBackup+013H
003B E0                MOVX    A,@DPTR
003C 905A10            MOV     DPTR,#05A10H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1671
0040 900000      R     MOV     DPTR,#cyPmBackup+014H
0043 E0                MOVX    A,@DPTR
0044 905A12            MOV     DPTR,#05A12H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1672
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 67  

0048 900000      R     MOV     DPTR,#cyPmBackup+015H
004B E0                MOVX    A,@DPTR
004C 905A13            MOV     DPTR,#05A13H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1673
0050 900000      R     MOV     DPTR,#cyPmBackup+016H
0053 E0                MOVX    A,@DPTR
0054 905A14            MOV     DPTR,#05A14H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1674
0058 900000      R     MOV     DPTR,#cyPmBackup+017H
005B E0                MOVX    A,@DPTR
005C 905A16            MOV     DPTR,#05A16H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1675
0060 900000      R     MOV     DPTR,#cyPmBackup+018H
0063 E0                MOVX    A,@DPTR
0064 905A18            MOV     DPTR,#05A18H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1676
0068 900000      R     MOV     DPTR,#cyPmBackup+019H
006B E0                MOVX    A,@DPTR
006C 905A1A            MOV     DPTR,#05A1AH
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1678
0070 900000      R     MOV     DPTR,#cyPmBackup+01AH
0073 E0                MOVX    A,@DPTR
0074 905A20            MOV     DPTR,#05A20H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1679
0078 900000      R     MOV     DPTR,#cyPmBackup+01BH
007B E0                MOVX    A,@DPTR
007C 905A22            MOV     DPTR,#05A22H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1680
0080 900000      R     MOV     DPTR,#cyPmBackup+01CH
0083 E0                MOVX    A,@DPTR
0084 905A23            MOV     DPTR,#05A23H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1681
0088 900000      R     MOV     DPTR,#cyPmBackup+01DH
008B E0                MOVX    A,@DPTR
008C 905A24            MOV     DPTR,#05A24H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1682
0090 900000      R     MOV     DPTR,#cyPmBackup+01EH
0093 E0                MOVX    A,@DPTR
0094 905A26            MOV     DPTR,#05A26H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1683
0098 900000      R     MOV     DPTR,#cyPmBackup+01FH
009B E0                MOVX    A,@DPTR
009C 905A28            MOV     DPTR,#05A28H
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1684
00A0 900000      R     MOV     DPTR,#cyPmBackup+020H
00A3 E0                MOVX    A,@DPTR
00A4 905A2A            MOV     DPTR,#05A2AH
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1686
00A8 900000      R     MOV     DPTR,#cyPmBackup+021H
00AB E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 68  

00AC 905A30            MOV     DPTR,#05A30H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1687
00B0 900000      R     MOV     DPTR,#cyPmBackup+022H
00B3 E0                MOVX    A,@DPTR
00B4 905A32            MOV     DPTR,#05A32H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1688
00B8 900000      R     MOV     DPTR,#cyPmBackup+023H
00BB E0                MOVX    A,@DPTR
00BC 905A33            MOV     DPTR,#05A33H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1689
00C0 900000      R     MOV     DPTR,#cyPmBackup+024H
00C3 E0                MOVX    A,@DPTR
00C4 905A34            MOV     DPTR,#05A34H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1690
00C8 900000      R     MOV     DPTR,#cyPmBackup+025H
00CB E0                MOVX    A,@DPTR
00CC 905A36            MOV     DPTR,#05A36H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1691
00D0 900000      R     MOV     DPTR,#cyPmBackup+026H
00D3 E0                MOVX    A,@DPTR
00D4 905A38            MOV     DPTR,#05A38H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1692
00D8 900000      R     MOV     DPTR,#cyPmBackup+027H
00DB E0                MOVX    A,@DPTR
00DC 905A3A            MOV     DPTR,#05A3AH
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1698
00E0 900000      R     MOV     DPTR,#cyPmBackup+04H
00E3 E0                MOVX    A,@DPTR
00E4 B40117            CJNE    A,#01H,?C0106
                                           ; SOURCE LINE # 1699
                                           ; SOURCE LINE # 1701
00E7 90500B            MOV     DPTR,#0500BH
00EA E0                MOVX    A,@DPTR
00EB 54F1              ANL     A,#0F1H
00ED FF                MOV     R7,A
00EE 900000      R     MOV     DPTR,#cyPmBackup+05H
00F1 E0                MOVX    A,@DPTR
00F2 4F                ORL     A,R7
00F3 90500B            MOV     DPTR,#0500BH
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1705
00F7 9046E8            MOV     DPTR,#046E8H
00FA E0                MOVX    A,@DPTR
00FB 4404              ORL     A,#04H
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1706
00FE         ?C0106:
                                           ; SOURCE LINE # 1712
00FE 900000      R     MOV     DPTR,#cyPmBackup+031H
0101 E0                MOVX    A,@DPTR
0102 B40107            CJNE    A,#01H,?C0108
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1714
0105 904322            MOV     DPTR,#04322H
0108 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 69  

0109 4408              ORL     A,#08H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1715
                                           ; SOURCE LINE # 1716
010C         ?C0108:
010C 22                RET     
             ; FUNCTION CyPmHibSlpRestore (END)

             ; FUNCTION CyPmHviLviSaveDisable (BEGIN)
                                           ; SOURCE LINE # 1736
                                           ; SOURCE LINE # 1737
                                           ; SOURCE LINE # 1738
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 6027              JZ      ?C0109
                                           ; SOURCE LINE # 1739
                                           ; SOURCE LINE # 1740
0008 900000      R     MOV     DPTR,#cyPmBackup+028H
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1741
000E 9046F4            MOV     DPTR,#046F4H
0011 E0                MOVX    A,@DPTR
0012 540F              ANL     A,#0FH
0014 900000      R     MOV     DPTR,#cyPmBackup+029H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1744
0018 9046F7            MOV     DPTR,#046F7H
001B E0                MOVX    A,@DPTR
001C 5440              ANL     A,#040H
001E 7003              JNZ     ?C0110
0020 FF                MOV     R7,A
0021 8002              SJMP    ?C0111
0023         ?C0110:
0023 7F01              MOV     R7,#01H
0025         ?C0111:
0025 900000      R     MOV     DPTR,#cyPmBackup+02DH
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1747
002A 120000      E     LCALL   CyVdLvDigitDisable
                                           ; SOURCE LINE # 1748
002D 8005              SJMP    ?C0112
002F         ?C0109:
                                           ; SOURCE LINE # 1750
                                           ; SOURCE LINE # 1751
002F E4                CLR     A
0030 900000      R     MOV     DPTR,#cyPmBackup+028H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1752
0034         ?C0112:
                                           ; SOURCE LINE # 1754
0034 9046F5            MOV     DPTR,#046F5H
0037 E0                MOVX    A,@DPTR
0038 5402              ANL     A,#02H
003A 6029              JZ      ?C0113
                                           ; SOURCE LINE # 1755
                                           ; SOURCE LINE # 1756
003C 900000      R     MOV     DPTR,#cyPmBackup+02AH
003F 7401              MOV     A,#01H
0041 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 70  

                                           ; SOURCE LINE # 1757
0042 9046F4            MOV     DPTR,#046F4H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 C4                SWAP    A
0048 540F              ANL     A,#0FH
004A 900000      R     MOV     DPTR,#cyPmBackup+02BH
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1760
004E 9046F7            MOV     DPTR,#046F7H
0051 E0                MOVX    A,@DPTR
0052 5480              ANL     A,#080H
0054 7003              JNZ     ?C0114
0056 FF                MOV     R7,A
0057 8002              SJMP    ?C0115
0059         ?C0114:
0059 7F01              MOV     R7,#01H
005B         ?C0115:
005B 900000      R     MOV     DPTR,#cyPmBackup+02EH
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1763
0060 120000      E     LCALL   CyVdLvAnalogDisable
                                           ; SOURCE LINE # 1764
0063 8005              SJMP    ?C0116
0065         ?C0113:
                                           ; SOURCE LINE # 1766
                                           ; SOURCE LINE # 1767
0065 E4                CLR     A
0066 900000      R     MOV     DPTR,#cyPmBackup+02AH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1768
006A         ?C0116:
                                           ; SOURCE LINE # 1770
006A 9046F5            MOV     DPTR,#046F5H
006D E0                MOVX    A,@DPTR
006E 5404              ANL     A,#04H
0070 600A              JZ      ?C0117
                                           ; SOURCE LINE # 1771
                                           ; SOURCE LINE # 1772
0072 900000      R     MOV     DPTR,#cyPmBackup+02CH
0075 7401              MOV     A,#01H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1773
0078 120000      E     LCALL   CyVdHvAnalogDisable
                                           ; SOURCE LINE # 1774
007B 22                RET     
007C         ?C0117:
                                           ; SOURCE LINE # 1776
                                           ; SOURCE LINE # 1777
007C E4                CLR     A
007D 900000      R     MOV     DPTR,#cyPmBackup+02CH
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1778
                                           ; SOURCE LINE # 1779
0081         ?C0119:
0081 22                RET     
             ; FUNCTION CyPmHviLviSaveDisable (END)

             ; FUNCTION CyPmHviLviRestore (BEGIN)
                                           ; SOURCE LINE # 1799
                                           ; SOURCE LINE # 1800
C51 COMPILER V9.51   CYPM                                                                  02/27/2014 19:08:31 PAGE 71  

                                           ; SOURCE LINE # 1802
0000 900000      R     MOV     DPTR,#cyPmBackup+028H
0003 E0                MOVX    A,@DPTR
0004 B4010D            CJNE    A,#01H,?C0120
                                           ; SOURCE LINE # 1803
                                           ; SOURCE LINE # 1804
0007 900000      R     MOV     DPTR,#cyPmBackup+02DH
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
000C 900000      R     MOV     DPTR,#cyPmBackup+029H
000F E0                MOVX    A,@DPTR
0010 FD                MOV     R5,A
0011 120000      E     LCALL   _CyVdLvDigitEnable
                                           ; SOURCE LINE # 1805
0014         ?C0120:
                                           ; SOURCE LINE # 1807
0014 900000      R     MOV     DPTR,#cyPmBackup+02AH
0017 E0                MOVX    A,@DPTR
0018 B4010D            CJNE    A,#01H,?C0121
                                           ; SOURCE LINE # 1808
                                           ; SOURCE LINE # 1809
001B 900000      R     MOV     DPTR,#cyPmBackup+02EH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#cyPmBackup+02BH
0023 E0                MOVX    A,@DPTR
0024 FD                MOV     R5,A
0025 120000      E     LCALL   _CyVdLvAnalogEnable
                                           ; SOURCE LINE # 1810
0028         ?C0121:
                                           ; SOURCE LINE # 1812
0028 900000      R     MOV     DPTR,#cyPmBackup+02CH
002B E0                MOVX    A,@DPTR
002C B40103            CJNE    A,#01H,?C0123
                                           ; SOURCE LINE # 1813
                                           ; SOURCE LINE # 1814
002F 120000      E     LCALL   CyVdHvAnalogEnable
                                           ; SOURCE LINE # 1815
                                           ; SOURCE LINE # 1816
0032         ?C0123:
0032 22                RET     
             ; FUNCTION CyPmHviLviRestore (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3140    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     67      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
