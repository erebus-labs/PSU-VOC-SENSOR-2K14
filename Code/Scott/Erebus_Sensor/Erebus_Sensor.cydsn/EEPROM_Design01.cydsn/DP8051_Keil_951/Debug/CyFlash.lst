C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\CyFlash.lst) CD DB NOIP OT(3,
                    -SPEED) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\CyFlash.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyFlash.c
   3          * Version 4.0
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note:
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          ********************************************************************************
  16          * Copyright 2008-2013, Cypress Semiconductor Corporation. All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions,
  18          * disclaimers, and limitations in the end user license agreement accompanying
  19          * the software package with which this file was provided.
  20          *******************************************************************************/
  21          
  22          #include "CyFlash.h"
  23          
  24          
  25          /*******************************************************************************
  26          * Holds die temperature, updated by CySetTemp(). Used for flash writting.
  27          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  28          * The second byte is the magnitude.
  29          *******************************************************************************/
  30          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  31          
  32          #if(CYDEV_ECC_ENABLE == 0)
  33              static uint8 * rowBuffer = 0;
  34          #endif  /* (CYDEV_ECC_ENABLE == 0) */
  35          
  36          
  37          static cystatus CySetTempInt(void);
  38          
  39          
  40          /*******************************************************************************
  41          * Function Name: CyFlash_Start
  42          ********************************************************************************
  43          *
  44          * Summary:
  45          *  Enable the Flash.
  46          *
  47          * Parameters:
  48          *  None
  49          *
  50          * Return:
  51          *  None
  52          *
  53          *******************************************************************************/
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 2   

  54          void CyFlash_Start(void) 
  55          {
  56   1          /* Active Power Mode */
  57   1          *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_MASK;
  58   1      
  59   1          /* Standby Power Mode */
  60   1          *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_MASK;
  61   1      
  62   1          CyDelayUs(CY_FLASH_EE_STARTUP_DELAY);
  63   1      }
  64          
  65          
  66          /*******************************************************************************
  67          * Function Name: CyFlash_Stop
  68          ********************************************************************************
  69          *
  70          * Summary:
  71          *  Disable the Flash.
  72          *
  73          * Parameters:
  74          *  None
  75          *
  76          * Return:
  77          *  None
  78          *
  79          * Side Effects:
  80          *  This setting is ignored as long as the CPU is currently running.  This will
  81          *  only take effect when the CPU is later disabled.
  82          *
  83          *******************************************************************************/
  84          void CyFlash_Stop(void) 
  85          {
  86   1          /* Active Power Mode */
  87   1          *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_MASK));
  88   1      
  89   1          /* Standby Power Mode */
  90   1          *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_MASK));
  91   1      }
  92          
  93          
  94          /*******************************************************************************
  95          * Function Name: CySetTempInt
  96          ********************************************************************************
  97          *
  98          * Summary:
  99          *  Sends a command to the SPC to read the die temperature. Sets a global value
 100          *  used by the Write functions. This function must be called once before
 101          *  executing a series of Flash writing functions.
 102          *
 103          * Parameters:
 104          *  None
 105          *
 106          * Return:
 107          *  status:
 108          *   CYRET_SUCCESS - if successful
 109          *   CYRET_LOCKED  - if Flash writing already in use
 110          *   CYRET_UNKNOWN - if there was an SPC error
 111          *
 112          *******************************************************************************/
 113          static cystatus CySetTempInt(void) 
 114          {
 115   1          cystatus status;
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 3   

 116   1      
 117   1          /* Make sure SPC is powered */
 118   1          CySpcStart();
 119   1      
 120   1          /* Plan for failure. */
 121   1          status = CYRET_UNKNOWN;
 122   1      
 123   1          if(CySpcLock() == CYRET_SUCCESS)
 124   1          {
 125   2              /* Write the command. */
 126   2              if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 127   2              {
 128   3                  do
 129   3                  {
 130   4                      if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DATA_SI
             -ZE)
 131   4                      {
 132   5                          status = CYRET_SUCCESS;
 133   5      
 134   5                          while(CY_SPC_BUSY)
 135   5                          {
 136   6                              /* Spin until idle. */
 137   6                              CyDelayUs(1u);
 138   6                          }
 139   5                          break;
 140   5                      }
 141   4      
 142   4                  } while(CY_SPC_BUSY);
 143   3              }
 144   2      
 145   2              CySpcUnlock();
 146   2          }
 147   1          else
 148   1          {
 149   2              status = CYRET_LOCKED;
 150   2          }
 151   1      
 152   1          return (status);
 153   1      }
 154          
 155          
 156          /*******************************************************************************
 157          * Function Name: CySetTemp
 158          ********************************************************************************
 159          *
 160          * Summary:
 161          *  This is a wraparound for CySetTempInt(). It is used to return second
 162          *  successful read of temperature value.
 163          *
 164          * Parameters:
 165          *  None
 166          *
 167          * Return:
 168          *  status:
 169          *   CYRET_SUCCESS if successful.
 170          *   CYRET_LOCKED  if Flash writing already in use
 171          *   CYRET_UNKNOWN if there was an SPC error.
 172          *
 173          *  uint8 dieTemperature[2]:
 174          *   Holds die temperature for the flash writting algorithm. The first byte is
 175          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 176          *   the magnitude.
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 4   

 177          *
 178          *******************************************************************************/
 179          cystatus CySetTemp(void) 
 180          {
 181   1          cystatus status = CySetTempInt();
 182   1      
 183   1          if(status == CYRET_SUCCESS)
 184   1          {
 185   2              status = CySetTempInt();
 186   2          }
 187   1      
 188   1          return (status);
 189   1      }
 190          
 191          
 192          /*******************************************************************************
 193          * Function Name: CySetFlashEEBuffer
 194          ********************************************************************************
 195          *
 196          * Summary:
 197          *  Sets the user supplied temporary buffer to store SPC data while performing
 198          *  flash and EEPROM commands. This buffer is only necessary when Flash ECC is
 199          *  disabled.
 200          *
 201          * Parameters:
 202          *  buffer:
 203          *   Address of block of memory to store temporary memory. The size of the block
 204          *   of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 205          *
 206          * Return:
 207          *  status:
 208          *   CYRET_SUCCESS if successful.
 209          *   CYRET_BAD_PARAM if the buffer is NULL
 210          *
 211          *******************************************************************************/
 212          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 213          {
 214   1          cystatus status = CYRET_SUCCESS;
 215   1      
 216   1          CySpcStart();
 217   1      
 218   1          #if(CYDEV_ECC_ENABLE == 0)
 219   1      
 220   1              if(NULL == buffer)
 221   1              {
 222   2                  status = CYRET_BAD_PARAM;
 223   2              }
 224   1              else if(CySpcLock() != CYRET_SUCCESS)
 225   1              {
 226   2                  status = CYRET_LOCKED;
 227   2              }
 228   1              else
 229   1              {
 230   2                  rowBuffer = buffer;
 231   2                  CySpcUnlock();
 232   2              }
 233   1      
 234   1          #else
              
                      /* To supress the warning */
                      buffer = buffer;
              
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 5   

                  #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 240   1      
 241   1          return(status);
 242   1      }
 243          
 244          
 245          #if(CYDEV_ECC_ENABLE == 1)
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowData
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sends a command to the SPC to load and program a row of data in
                  *  Flash or EEPROM.
                  *
                  * Parameters:
                  *  arrayID:    ID of the array to write.
                  *   The type of write, Flash or EEPROM, is determined from the array ID.
                  *   The arrays in the part are sequential starting at the first ID for the
                  *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
                  *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
                  *  rowAddress: rowAddress of flash row to program.
                  *  rowData:    Array of bytes to write.
                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
                  {
                      uint16 rowSize;
                      cystatus status;
              
                      rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
                      status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
              
                      return(status);
                  }
              
              #else
 284          
 285              /*******************************************************************************
 286              * Function Name: CyWriteRowData
 287              ********************************************************************************
 288              *
 289              * Summary:
 290              *   Sends a command to the SPC to load and program a row of data in
 291              *   Flash or EEPROM.
 292              *
 293              * Parameters:
 294              *  arrayID      : ID of the array to write.
 295              *   The type of write, Flash or EEPROM, is determined from the array ID.
 296              *   The arrays in the part are sequential starting at the first ID for the
 297              *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
 298              *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
 299              *  rowAddress   : rowAddress of flash row to program.
 300              *  rowData      : Array of bytes to write.
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 6   

 301              *
 302              * Return:
 303              *  status:
 304              *   CYRET_SUCCESS if successful.
 305              *   CYRET_LOCKED if the SPC is already in use.
 306              *   CYRET_CANCELED if command not accepted
 307              *   CYRET_UNKNOWN if there was an SPC error.
 308              *
 309              *******************************************************************************/
 310              cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 311              {
 312   1              uint8 i;
 313   1              uint32 offset;
 314   1              uint16 rowSize;
 315   1              cystatus status;
 316   1      
 317   1              /* Check whether rowBuffer pointer has been initialized by CySetFlashEEBuffer() */
 318   1              if(NULL != rowBuffer)
 319   1              {
 320   2                  if(arrayId > CY_SPC_LAST_FLASH_ARRAYID)
 321   2                  {
 322   3                      rowSize = CYDEV_EEPROM_ROW_SIZE;
 323   3                  }
 324   2                  else
 325   2                  {
 326   3                      rowSize = CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE;
 327   3      
 328   3                      /* Save the ECC area. */
 329   3                      offset = CYDEV_ECC_BASE +
 330   3                              ((uint32)arrayId * CYDEV_ECC_SECTOR_SIZE) +
 331   3                              ((uint32)rowAddress * CYDEV_ECC_ROW_SIZE);
 332   3      
 333   3                      for(i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
 334   3                      {
 335   4                          *(rowBuffer + CYDEV_FLS_ROW_SIZE + i) = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 336   4                      }
 337   3                  }
 338   2      
 339   2                  /* Copy the rowdata to the temporary buffer. */
 340   2              #if(CY_PSOC3)
 341   2                  (void) memcpy((void *) rowBuffer, (void *)((uint32) rowData), (int16) CYDEV_FLS_ROW_SIZE);
 342   2              #else
                          (void) memcpy((void *) rowBuffer, (const void *) rowData, CYDEV_FLS_ROW_SIZE);
                      #endif  /* (CY_PSOC3) */
 345   2      
 346   2                  status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, rowSize);
 347   2              }
 348   1              else
 349   1              {
 350   2                  status = CYRET_UNKNOWN;
 351   2              }
 352   1      
 353   1              return(status);
 354   1          }
 355          
 356          #endif /* (CYDEV_ECC_ENABLE == 0u) */
 357          
 358          
 359          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowConfig
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 7   

                  ********************************************************************************
                  *
                  * Summary:
                  *  Sends a command to the SPC to load and program a row of config data in flash.
                  *  This function is only valid for Flash array IDs (not for EEPROM).
                  *
                  * Parameters:
                  *  arrayId:      ID of the array to write
                  *   The arrays in the part are sequential starting at the first ID for the
                  *   specific memory type. The array ID for the Flash memory lasts
                  *   from 0x00 to 0x3F.
                  *  rowAddress:   Address of the sector to erase.
                  *  rowECC:       Array of bytes to write.
                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC)\
                  
                  {
                      uint32 offset;
                      uint16 i;
                      cystatus status;
              
                      /* Check whether rowBuffer pointer has been initialized by CySetFlashEEBuffer() */
                      if(NULL != rowBuffer)
                      {
                          /* Read the existing flash data. */
                          offset = ((uint32)arrayId * CYDEV_FLS_SECTOR_SIZE) +
                                   ((uint32)rowAddress * CYDEV_FLS_ROW_SIZE);
              
                          #if (CYDEV_FLS_BASE != 0u)
                              offset += CYDEV_FLS_BASE;
                          #endif  /* (CYDEV_FLS_BASE != 0u) */
              
                          for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
                          {
                              rowBuffer[i] = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
                          }
              
                          #if(CY_PSOC3)
                              (void) memcpy((void *)&rowBuffer[CYDEV_FLS_ROW_SIZE],
                                            (void *)(uint32)rowECC,
                                            (int16)CYDEV_ECC_ROW_SIZE);
                          #else
                              (void) memcpy((void *)&rowBuffer[CYDEV_FLS_ROW_SIZE],
                                            (const void *)rowECC,
                                            CYDEV_ECC_ROW_SIZE);
                          #endif  /* (CY_PSOC3) */
              
                          status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZ
             -E);
                      }
                      else
                      {
                          status = CYRET_UNKNOWN;
                      }
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 8   

              
                      return (status);
                  }
              
              #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 429          
 430          
 431          
 432          /*******************************************************************************
 433          * Function Name: CyWriteRowFull
 434          ********************************************************************************
 435          * Summary:
 436          *  Sends a command to the SPC to load and program a row of data in flash.
 437          *  rowData array is expected to contain Flash and ECC data if needed.
 438          *
 439          * Parameters:
 440          *  arrayId:    FLASH or EEPROM array id.
 441          *  rowData:    Pointer to a row of data to write.
 442          *  rowNumber:  Zero based number of the row.
 443          *  rowSize:    Size of the row.
 444          *
 445          * Return:
 446          *  CYRET_SUCCESS if successful.
 447          *  CYRET_LOCKED if the SPC is already in use.
 448          *  CYRET_CANCELED if command not accepted
 449          *  CYRET_UNKNOWN if there was an SPC error.
 450          *
 451          *******************************************************************************/
 452          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 453                  
 454          {
 455   1          cystatus status;
 456   1      
 457   1          if(CySpcLock() == CYRET_SUCCESS)
 458   1          {
 459   2              /* Load row data into SPC internal latch */
 460   2              status = CySpcLoadRow(arrayId, rowData, rowSize);
 461   2      
 462   2              if(CYRET_STARTED == status)
 463   2              {
 464   3                  while(CY_SPC_BUSY)
 465   3                  {
 466   4                      /* Wait for SPC to finish and get SPC status */
 467   4                      CyDelayUs(1u);
 468   4                  }
 469   3      
 470   3                  /* Hide SPC status */
 471   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 472   3                  {
 473   4                      status = CYRET_SUCCESS;
 474   4                  }
 475   3                  else
 476   3                  {
 477   4                      status = CYRET_UNKNOWN;
 478   4                  }
 479   3      
 480   3                  if(CYRET_SUCCESS == status)
 481   3                  {
 482   4                      /* Erase and program flash with the data from SPC interval latch */
 483   4                      status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 484   4      
 485   4                      if(CYRET_STARTED == status)
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 9   

 486   4                      {
 487   5                          while(CY_SPC_BUSY)
 488   5                          {
 489   6                              /* Wait for SPC to finish and get SPC status */
 490   6                              CyDelayUs(1u);
 491   6                          }
 492   5      
 493   5                          /* Hide SPC status */
 494   5                          if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 495   5                          {
 496   6                              status = CYRET_SUCCESS;
 497   6                          }
 498   5                          else
 499   5                          {
 500   6                              status = CYRET_UNKNOWN;
 501   6                          }
 502   5                      }
 503   4                  }
 504   3      
 505   3              }
 506   2      
 507   2              CySpcUnlock();
 508   2          }
 509   1          else
 510   1          {
 511   2              status = CYRET_LOCKED;
 512   2          }
 513   1      
 514   1          return(status);
 515   1      }
 516          
 517          
 518          /*******************************************************************************
 519          * Function Name: CyFlash_SetWaitCycles
 520          ********************************************************************************
 521          *
 522          * Summary:
 523          *  Sets the number of clock cycles the cache will wait before it samples data
 524          *  coming back from Flash. This function must be called before increasing CPU
 525          *  clock frequency. It can optionally be called after lowering CPU clock
 526          *  frequency in order to improve CPU performance.
 527          *
 528          * Parameters:
 529          *  uint8 freq:
 530          *   Frequency of operation in Megahertz.
 531          *
 532          * Return:
 533          *  None
 534          *
 535          *******************************************************************************/
 536          void CyFlash_SetWaitCycles(uint8 freq) 
 537          {
 538   1          uint8 interruptState;
 539   1      
 540   1          /* Save current global interrupt enable and disable it */
 541   1          interruptState = CyEnterCriticalSection();
 542   1      
 543   1          /***************************************************************************
 544   1          * The number of clock cycles the cache will wait before it samples data
 545   1          * coming back from Flash must be equal or greater to to the CPU frequency
 546   1          * outlined in clock cycles.
 547   1          ***************************************************************************/
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 10  

 548   1      
 549   1          #if (CY_PSOC3)
 550   1      
 551   1              if (freq <= 22u)
 552   1              {
 553   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 554   2                      ((uint8)(CY_FLASH_LESSER_OR_EQUAL_22MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 555   2              }
 556   1              else if (freq <= 44u)
 557   1              {
 558   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 559   2                      ((uint8)(CY_FLASH_LESSER_OR_EQUAL_44MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 560   2              }
 561   1              else
 562   1              {
 563   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 564   2                      ((uint8)(CY_FLASH_GREATER_44MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 565   2              }
 566   1      
 567   1          #endif  /* (CY_PSOC3) */
 568   1      
 569   1      
 570   1          #if (CY_PSOC5)
              
                      if (freq <= 16u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_16MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 33u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_33MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 50u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_50MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_GREATER_51MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
              
                  #endif  /* (CY_PSOC5) */
 594   1      
 595   1          /* Restore global interrupt enable state */
 596   1          CyExitCriticalSection(interruptState);
 597   1      }
 598          
 599          
 600          /*******************************************************************************
 601          * Function Name: CyEEPROM_Start
 602          ********************************************************************************
 603          *
 604          * Summary:
 605          *  Enable the EEPROM.
 606          *
 607          * Parameters:
 608          *  None
 609          *
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 11  

 610          * Return:
 611          *  None
 612          *
 613          *******************************************************************************/
 614          void CyEEPROM_Start(void) 
 615          {
 616   1          /* Active Power Mode */
 617   1          *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_EE_MASK;
 618   1      
 619   1          /* Standby Power Mode */
 620   1          *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_EE_MASK;
 621   1      }
 622          
 623          
 624          /*******************************************************************************
 625          * Function Name: CyEEPROM_Stop
 626          ********************************************************************************
 627          *
 628          * Summary:
 629          *  Disable the EEPROM.
 630          *
 631          * Parameters:
 632          *  None
 633          *
 634          * Return:
 635          *  None
 636          *
 637          *******************************************************************************/
 638          void CyEEPROM_Stop (void) 
 639          {
 640   1          /* Active Power Mode */
 641   1          *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_EE_MASK));
 642   1      
 643   1          /* Standby Power Mode */
 644   1          *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_EE_MASK));
 645   1      }
 646          
 647          
 648          /*******************************************************************************
 649          * Function Name: CyEEPROM_ReadReserve
 650          ********************************************************************************
 651          *
 652          * Summary:
 653          *  Request access to the EEPROM for reading and wait until access is available.
 654          *
 655          * Parameters:
 656          *  None
 657          *
 658          * Return:
 659          *  None
 660          *
 661          *******************************************************************************/
 662          void CyEEPROM_ReadReserve(void) 
 663          {
 664   1          /* Make a request for PHUB to have access */
 665   1          *CY_FLASH_EE_SCR_PTR |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 666   1      
 667   1          while (0u == (*CY_FLASH_EE_SCR_PTR & CY_FLASH_EE_SCR_AHB_EE_ACK))
 668   1          {
 669   2              /* Wait for acknowledgement from PHUB */
 670   2          }
 671   1      }
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 12  

 672          
 673          
 674          /*******************************************************************************
 675          * Function Name: CyEEPROM_ReadRelease
 676          ********************************************************************************
 677          *
 678          * Summary:
 679          *  Release the read reservation of the EEPROM.
 680          *
 681          * Parameters:
 682          *  None
 683          *
 684          * Return:
 685          *  None
 686          *
 687          *******************************************************************************/
 688          void CyEEPROM_ReadRelease(void) 
 689          {
 690   1          *CY_FLASH_EE_SCR_PTR |= 0x00u;
 691   1      }
 692          
 693          
 694          /* [] END OF FILE */
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyFlash_Start (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
0007 9043BC            MOV     DPTR,#043BCH
000A E0                MOVX    A,@DPTR
000B 4401              ORL     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
000E 7F05              MOV     R7,#05H
0010 7E00              MOV     R6,#00H
0012 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 63
0015 22                RET     
             ; FUNCTION CyFlash_Start (END)

             ; FUNCTION CyFlash_Stop (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 87
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0007 9043BC            MOV     DPTR,#043BCH
000A E0                MOVX    A,@DPTR
000B 54FE              ANL     A,#0FEH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
000E 22                RET     
             ; FUNCTION CyFlash_Stop (END)

             ; FUNCTION CySetTempInt (BEGIN)
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 118
0000 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 121
0003 900000      R     MOV     DPTR,#status
0006 74FF              MOV     A,#0FFH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0009 120000      E     LCALL   CySpcLock
000C EF                MOV     A,R7
000D 703B              JNZ     ?C0003
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _CySpcGetTemp
0014 EF                MOV     A,R7
0015 6407              XRL     A,#07H
0017 702C              JNZ     ?C0004
                                           ; SOURCE LINE # 127
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 14  

0019         ?C0007:
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0019 7B01              MOV     R3,#01H
001B 7A00        R     MOV     R2,#HIGH dieTemperature
001D 7900        R     MOV     R1,#LOW dieTemperature
001F 7D02              MOV     R5,#02H
0021 120000      E     LCALL   _CySpcReadData
0024 EF                MOV     A,R7
0025 B40215            CJNE    A,#02H,?C0005
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0028 E4                CLR     A
0029 900000      R     MOV     DPTR,#status
002C F0                MOVX    @DPTR,A
002D         ?C0009:
                                           ; SOURCE LINE # 134
002D 904722            MOV     DPTR,#04722H
0030 E0                MOVX    A,@DPTR
0031 5402              ANL     A,#02H
0033 7010              JNZ     ?C0004
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
0035 7F01              MOV     R7,#01H
0037 FE                MOV     R6,A
0038 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 138
003B 80F0              SJMP    ?C0009
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 142
003D         ?C0005:
003D 904722            MOV     DPTR,#04722H
0040 E0                MOVX    A,@DPTR
0041 5402              ANL     A,#02H
0043 60D4              JZ      ?C0007
                                           ; SOURCE LINE # 143
0045         ?C0004:
                                           ; SOURCE LINE # 145
0045 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 146
0048 8006              SJMP    ?C0011
004A         ?C0003:
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
004A 900000      R     MOV     DPTR,#status
004D 7404              MOV     A,#04H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0050         ?C0011:
                                           ; SOURCE LINE # 152
0050 900000      R     MOV     DPTR,#status
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
                                           ; SOURCE LINE # 153
0055         ?C0012:
0055 22                RET     
             ; FUNCTION CySetTempInt (END)

             ; FUNCTION CySetTemp (BEGIN)
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 15  

                                           ; SOURCE LINE # 181
0000 120000      R     LCALL   CySetTempInt
0003 900000      R     MOV     DPTR,#status
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0008 E0                MOVX    A,@DPTR
0009 7008              JNZ     ?C0013
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
000B 120000      R     LCALL   CySetTempInt
000E 900000      R     MOV     DPTR,#status
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0013         ?C0013:
                                           ; SOURCE LINE # 188
0013 900000      R     MOV     DPTR,#status
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
                                           ; SOURCE LINE # 189
0018         ?C0014:
0018 22                RET     
             ; FUNCTION CySetTemp (END)

             ; FUNCTION _CySetFlashEEBuffer (BEGIN)
                                           ; SOURCE LINE # 212
0000 900000      R     MOV     DPTR,#buffer
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
000B E4                CLR     A
000C A3                INC     DPTR
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
000E 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 220
0011 7B00              MOV     R3,#00H
0013 7A00              MOV     R2,#00H
0015 7900              MOV     R1,#00H
0017 C003              PUSH    AR3
0019 C002              PUSH    AR2
001B C001              PUSH    AR1
001D 900000      R     MOV     DPTR,#buffer
0020 E0                MOVX    A,@DPTR
0021 FB                MOV     R3,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FA                MOV     R2,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 F9                MOV     R1,A
0028 D082              POP     DPL
002A D083              POP     DPH
002C D0E0              POP     ACC
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 16  

002E 6B                XRL     A,R3
002F 7008              JNZ     ?C0057
0031 E9                MOV     A,R1
0032 6582              XRL     A,DPL
0034 7003              JNZ     ?C0057
0036 EA                MOV     A,R2
0037 6583              XRL     A,DPH
0039         ?C0057:
0039 7007              JNZ     ?C0015
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
003B 900000      R     MOV     DPTR,#status
003E 04                INC     A
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
0040 8027              SJMP    ?C0016
0042         ?C0015:
                                           ; SOURCE LINE # 224
0042 120000      E     LCALL   CySpcLock
0045 EF                MOV     A,R7
0046 6008              JZ      ?C0017
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0048 900000      R     MOV     DPTR,#status
004B 7404              MOV     A,#04H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
004E 8019              SJMP    ?C0016
0050         ?C0017:
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0050 900000      R     MOV     DPTR,#buffer
0053 E0                MOVX    A,@DPTR
0054 FB                MOV     R3,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 FA                MOV     R2,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A F9                MOV     R1,A
005B 900000      R     MOV     DPTR,#rowBuffer
005E EB                MOV     A,R3
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 EA                MOV     A,R2
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 E9                MOV     A,R1
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
0066 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 232
0069         ?C0016:
                                           ; SOURCE LINE # 241
0069 900000      R     MOV     DPTR,#status
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
                                           ; SOURCE LINE # 242
006E         ?C0019:
006E 22                RET     
             ; FUNCTION _CySetFlashEEBuffer (END)

C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 17  

             ; FUNCTION _CyWriteRowData (BEGIN)
                                           ; SOURCE LINE # 310
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 318
0014 7B00              MOV     R3,#00H
0016 7A00              MOV     R2,#00H
0018 7900              MOV     R1,#00H
001A C003              PUSH    AR3
001C C002              PUSH    AR2
001E C001              PUSH    AR1
0020 900000      R     MOV     DPTR,#rowBuffer
0023 E0                MOVX    A,@DPTR
0024 FB                MOV     R3,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FA                MOV     R2,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A F9                MOV     R1,A
002B D082              POP     DPL
002D D083              POP     DPH
002F D0E0              POP     ACC
0031 6B                XRL     A,R3
0032 7008              JNZ     ?C0058
0034 E9                MOV     A,R1
0035 6582              XRL     A,DPL
0037 7003              JNZ     ?C0058
0039 EA                MOV     A,R2
003A 6583              XRL     A,DPH
003C         ?C0058:
003C 7003              JNZ     $ + 5H
003E 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0041 900000      R     MOV     DPTR,#arrayId
0044 E0                MOVX    A,@DPTR
0045 D3                SETB    C
0046 943F              SUBB    A,#03FH
0048 400C              JC      ?C0021
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
004A 900000      R     MOV     DPTR,#rowSize
004D E4                CLR     A
004E F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 18  

004F A3                INC     DPTR
0050 7410              MOV     A,#010H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0053 020000      R     LJMP    ?C0022
0056         ?C0021:
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
0056 900000      R     MOV     DPTR,#rowSize
0059 7401              MOV     A,#01H
005B F0                MOVX    @DPTR,A
005C A3                INC     DPTR
005D 7420              MOV     A,#020H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 331
0060 900000      R     MOV     DPTR,#arrayId
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 7E00              MOV     R6,#00H
0067 7C20              MOV     R4,#020H
0069 7D00              MOV     R5,#00H
006B 120000      E     LCALL   ?C?LIMUL
006E E4                CLR     A
006F 2F                ADD     A,R7
0070 FF                MOV     R7,A
0071 E4                CLR     A
0072 3E                ADDC    A,R6
0073 FE                MOV     R6,A
0074 ED                MOV     A,R5
0075 3408              ADDC    A,#08H
0077 FD                MOV     R5,A
0078 E4                CLR     A
0079 3C                ADDC    A,R4
007A FC                MOV     R4,A
007B C004              PUSH    AR4
007D C005              PUSH    AR5
007F C006              PUSH    AR6
0081 C007              PUSH    AR7
0083 A3                INC     DPTR
0084 E0                MOVX    A,@DPTR
0085 FE                MOV     R6,A
0086 A3                INC     DPTR
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 7C00              MOV     R4,#00H
008B 7D20              MOV     R5,#020H
008D 120000      E     LCALL   ?C?LIMUL
0090 A804              MOV     R0,AR4
0092 A905              MOV     R1,AR5
0094 AA06              MOV     R2,AR6
0096 AB07              MOV     R3,AR7
0098 D007              POP     AR7
009A D006              POP     AR6
009C D005              POP     AR5
009E D004              POP     AR4
00A0 EB                MOV     A,R3
00A1 2F                ADD     A,R7
00A2 FF                MOV     R7,A
00A3 EA                MOV     A,R2
00A4 3E                ADDC    A,R6
00A5 FE                MOV     R6,A
00A6 E9                MOV     A,R1
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 19  

00A7 3D                ADDC    A,R5
00A8 FD                MOV     R5,A
00A9 E8                MOV     A,R0
00AA 3C                ADDC    A,R4
00AB FC                MOV     R4,A
00AC 900000      R     MOV     DPTR,#offset
00AF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 333
00B2 E4                CLR     A
00B3 900000      R     MOV     DPTR,#i
00B6 F0                MOVX    @DPTR,A
00B7         ?C0023:
00B7 900000      R     MOV     DPTR,#i
00BA E0                MOVX    A,@DPTR
00BB C3                CLR     C
00BC 9420              SUBB    A,#020H
00BE 504B              JNC     ?C0022
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 E4                CLR     A
00C3 A3                INC     DPTR
00C4 E0                MOVX    A,@DPTR
00C5 F8                MOV     R0,A
00C6 A3                INC     DPTR
00C7 E0                MOVX    A,@DPTR
00C8 F9                MOV     R1,A
00C9 A3                INC     DPTR
00CA E0                MOVX    A,@DPTR
00CB FA                MOV     R2,A
00CC A3                INC     DPTR
00CD E0                MOVX    A,@DPTR
00CE FB                MOV     R3,A
00CF EF                MOV     A,R7
00D0 2B                ADD     A,R3
00D1 FF                MOV     R7,A
00D2 E4                CLR     A
00D3 3A                ADDC    A,R2
00D4 FE                MOV     R6,A
00D5 E4                CLR     A
00D6 39                ADDC    A,R1
00D7 FD                MOV     R5,A
00D8 E4                CLR     A
00D9 38                ADDC    A,R0
00DA A907              MOV     R1,AR7
00DC AA06              MOV     R2,AR6
00DE AB05              MOV     R3,AR5
00E0 120000      E     LCALL   _cyread8
00E3 900000      R     MOV     DPTR,#rowBuffer
00E6 E0                MOVX    A,@DPTR
00E7 FB                MOV     R3,A
00E8 A3                INC     DPTR
00E9 E0                MOVX    A,@DPTR
00EA FA                MOV     R2,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED 2400              ADD     A,#00H
00EF F9                MOV     R1,A
00F0 EA                MOV     A,R2
00F1 3401              ADDC    A,#01H
00F3 FA                MOV     R2,A
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 20  

00F4 900000      R     MOV     DPTR,#i
00F7 E0                MOVX    A,@DPTR
00F8 7C00              MOV     R4,#00H
00FA 29                ADD     A,R1
00FB F9                MOV     R1,A
00FC EC                MOV     A,R4
00FD 3A                ADDC    A,R2
00FE FA                MOV     R2,A
00FF EF                MOV     A,R7
0100 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 336
0103 900000      R     MOV     DPTR,#i
0106 E0                MOVX    A,@DPTR
0107 04                INC     A
0108 F0                MOVX    @DPTR,A
0109 80AC              SJMP    ?C0023
                                           ; SOURCE LINE # 337
010B         ?C0022:
                                           ; SOURCE LINE # 341
010B 900000      R     MOV     DPTR,#rowData
010E E0                MOVX    A,@DPTR
010F FB                MOV     R3,A
0110 A3                INC     DPTR
0111 E0                MOVX    A,@DPTR
0112 FA                MOV     R2,A
0113 A3                INC     DPTR
0114 E0                MOVX    A,@DPTR
0115 F9                MOV     R1,A
0116 C003              PUSH    AR3
0118 C002              PUSH    AR2
011A 900000      R     MOV     DPTR,#rowBuffer
011D E0                MOVX    A,@DPTR
011E FB                MOV     R3,A
011F A3                INC     DPTR
0120 E0                MOVX    A,@DPTR
0121 FA                MOV     R2,A
0122 A3                INC     DPTR
0123 E0                MOVX    A,@DPTR
0124 F8                MOV     R0,A
0125 AC02              MOV     R4,AR2
0127 AD03              MOV     R5,AR3
0129 D002              POP     AR2
012B D003              POP     AR3
012D 7E01              MOV     R6,#01H
012F 7F00              MOV     R7,#00H
0131 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 346
0134 900000      R     MOV     DPTR,#arrayId
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 C007              PUSH    AR7
013B A3                INC     DPTR
013C E0                MOVX    A,@DPTR
013D FC                MOV     R4,A
013E A3                INC     DPTR
013F E0                MOVX    A,@DPTR
0140 FD                MOV     R5,A
0141 900000      R     MOV     DPTR,#rowBuffer
0144 E0                MOVX    A,@DPTR
0145 FB                MOV     R3,A
0146 A3                INC     DPTR
0147 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 21  

0148 FA                MOV     R2,A
0149 A3                INC     DPTR
014A E0                MOVX    A,@DPTR
014B F9                MOV     R1,A
014C 900000      R     MOV     DPTR,#rowSize
014F E0                MOVX    A,@DPTR
0150 FE                MOV     R6,A
0151 A3                INC     DPTR
0152 E0                MOVX    A,@DPTR
0153 FF                MOV     R7,A
0154 900000      R     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
0157 EE                MOV     A,R6
0158 F0                MOVX    @DPTR,A
0159 A3                INC     DPTR
015A EF                MOV     A,R7
015B F0                MOVX    @DPTR,A
015C D007              POP     AR7
015E 120000      R     LCALL   _CyWriteRowFull
0161 900000      R     MOV     DPTR,#status
0164 EF                MOV     A,R7
0165 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
0166 8006              SJMP    ?C0026
0168         ?C0020:
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
0168 900000      R     MOV     DPTR,#status
016B 74FF              MOV     A,#0FFH
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
016E         ?C0026:
                                           ; SOURCE LINE # 353
016E 900000      R     MOV     DPTR,#status
0171 E0                MOVX    A,@DPTR
0172 FF                MOV     R7,A
                                           ; SOURCE LINE # 354
0173         ?C0027:
0173 22                RET     
             ; FUNCTION _CyWriteRowData (END)

             ; FUNCTION _CyWriteRowFull (BEGIN)
                                           ; SOURCE LINE # 452
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 457
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 22  

0014 120000      E     LCALL   CySpcLock
0017 EF                MOV     A,R7
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0028
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 460
001D 900000      R     MOV     DPTR,#arrayId
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 900000      R     MOV     DPTR,#rowData
0025 E0                MOVX    A,@DPTR
0026 FB                MOV     R3,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 FA                MOV     R2,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C F9                MOV     R1,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FC                MOV     R4,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FD                MOV     R5,A
0033 900000      E     MOV     DPTR,#?_CySpcLoadRow?BYTE+04H
0036 EC                MOV     A,R4
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 ED                MOV     A,R5
003A F0                MOVX    @DPTR,A
003B 120000      E     LCALL   _CySpcLoadRow
003E 900000      R     MOV     DPTR,#status
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
0043 E0                MOVX    A,@DPTR
0044 6407              XRL     A,#07H
0046 6003              JZ      $ + 5H
0048 020000      R     LJMP    ?C0029
                                           ; SOURCE LINE # 463
004B         ?C0030:
                                           ; SOURCE LINE # 464
004B 904722            MOV     DPTR,#04722H
004E E0                MOVX    A,@DPTR
004F 5402              ANL     A,#02H
0051 7008              JNZ     ?C0031
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 467
0053 7F01              MOV     R7,#01H
0055 FE                MOV     R6,A
0056 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 468
0059 80F0              SJMP    ?C0030
005B         ?C0031:
                                           ; SOURCE LINE # 471
005B 904722            MOV     DPTR,#04722H
005E E0                MOVX    A,@DPTR
005F 5402              ANL     A,#02H
0061 6009              JZ      ?C0033
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 13                RRC     A
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 23  

0066 13                RRC     A
0067 543F              ANL     A,#03FH
0069 FF                MOV     R7,A
006A 8002              SJMP    ?C0034
006C         ?C0033:
006C 7FFF              MOV     R7,#0FFH
006E         ?C0034:
006E EF                MOV     A,R7
006F 7006              JNZ     ?C0032
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
0071 900000      R     MOV     DPTR,#status
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0075 8006              SJMP    ?C0035
0077         ?C0032:
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
0077 900000      R     MOV     DPTR,#status
007A 74FF              MOV     A,#0FFH
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
007D         ?C0035:
                                           ; SOURCE LINE # 480
007D 900000      R     MOV     DPTR,#status
0080 E0                MOVX    A,@DPTR
0081 7055              JNZ     ?C0029
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 483
0083 900000      R     MOV     DPTR,#arrayId
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A FC                MOV     R4,A
008B A3                INC     DPTR
008C E0                MOVX    A,@DPTR
008D FD                MOV     R5,A
008E 900000      R     MOV     DPTR,#dieTemperature
0091 E0                MOVX    A,@DPTR
0092 FB                MOV     R3,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
0098 F0                MOVX    @DPTR,A
0099 120000      E     LCALL   _CySpcWriteRow
009C 900000      R     MOV     DPTR,#status
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
00A1 E0                MOVX    A,@DPTR
00A2 6407              XRL     A,#07H
00A4 7032              JNZ     ?C0029
                                           ; SOURCE LINE # 486
00A6         ?C0038:
                                           ; SOURCE LINE # 487
00A6 904722            MOV     DPTR,#04722H
00A9 E0                MOVX    A,@DPTR
00AA 5402              ANL     A,#02H
00AC 7008              JNZ     ?C0039
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 490
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 24  

00AE 7F01              MOV     R7,#01H
00B0 FE                MOV     R6,A
00B1 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 491
00B4 80F0              SJMP    ?C0038
00B6         ?C0039:
                                           ; SOURCE LINE # 494
00B6 904722            MOV     DPTR,#04722H
00B9 E0                MOVX    A,@DPTR
00BA 5402              ANL     A,#02H
00BC 6009              JZ      ?C0041
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 13                RRC     A
00C1 13                RRC     A
00C2 543F              ANL     A,#03FH
00C4 FF                MOV     R7,A
00C5 8002              SJMP    ?C0042
00C7         ?C0041:
00C7 7FFF              MOV     R7,#0FFH
00C9         ?C0042:
00C9 EF                MOV     A,R7
00CA 7006              JNZ     ?C0040
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
00CC 900000      R     MOV     DPTR,#status
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
00D0 8006              SJMP    ?C0029
00D2         ?C0040:
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
00D2 900000      R     MOV     DPTR,#status
00D5 74FF              MOV     A,#0FFH
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 505
00D8         ?C0029:
                                           ; SOURCE LINE # 507
00D8 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 508
00DB 8006              SJMP    ?C0044
00DD         ?C0028:
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
00DD 900000      R     MOV     DPTR,#status
00E0 7404              MOV     A,#04H
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
00E3         ?C0044:
                                           ; SOURCE LINE # 514
00E3 900000      R     MOV     DPTR,#status
00E6 E0                MOVX    A,@DPTR
00E7 FF                MOV     R7,A
                                           ; SOURCE LINE # 515
00E8         ?C0045:
00E8 22                RET     
             ; FUNCTION _CyWriteRowFull (END)

             ; FUNCTION _CyFlash_SetWaitCycles (BEGIN)
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 25  

                                           ; SOURCE LINE # 536
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 541
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#interruptState
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
000D 900000      R     MOV     DPTR,#freq
0010 E0                MOVX    A,@DPTR
0011 D3                SETB    C
0012 9416              SUBB    A,#016H
0014 500B              JNC     ?C0046
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 554
0016 904800            MOV     DPTR,#04800H
0019 E0                MOVX    A,@DPTR
001A 543F              ANL     A,#03FH
001C 4440              ORL     A,#040H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
001F 801D              SJMP    ?C0047
0021         ?C0046:
                                           ; SOURCE LINE # 556
0021 900000      R     MOV     DPTR,#freq
0024 E0                MOVX    A,@DPTR
0025 D3                SETB    C
0026 942C              SUBB    A,#02CH
0028 500B              JNC     ?C0048
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 559
002A 904800            MOV     DPTR,#04800H
002D E0                MOVX    A,@DPTR
002E 543F              ANL     A,#03FH
0030 4480              ORL     A,#080H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0033 8009              SJMP    ?C0047
0035         ?C0048:
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 564
0035 904800            MOV     DPTR,#04800H
0038 E0                MOVX    A,@DPTR
0039 543F              ANL     A,#03FH
003B 44C0              ORL     A,#0C0H
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
003E         ?C0047:
                                           ; SOURCE LINE # 596
003E 900000      R     MOV     DPTR,#interruptState
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 597
0046 22                RET     
             ; FUNCTION _CyFlash_SetWaitCycles (END)

             ; FUNCTION CyEEPROM_Start (BEGIN)
                                           ; SOURCE LINE # 614
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 26  

                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 617
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 4410              ORL     A,#010H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
0007 9043BC            MOV     DPTR,#043BCH
000A E0                MOVX    A,@DPTR
000B 4410              ORL     A,#010H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
000E 22                RET     
             ; FUNCTION CyEEPROM_Start (END)

             ; FUNCTION CyEEPROM_Stop (BEGIN)
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 641
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
0007 9043BC            MOV     DPTR,#043BCH
000A E0                MOVX    A,@DPTR
000B 54EF              ANL     A,#0EFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 645
000E 22                RET     
             ; FUNCTION CyEEPROM_Stop (END)

             ; FUNCTION CyEEPROM_ReadReserve (BEGIN)
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 665
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
0007         ?C0053:
                                           ; SOURCE LINE # 667
0007 904702            MOV     DPTR,#04702H
000A E0                MOVX    A,@DPTR
000B 5402              ANL     A,#02H
000D 60F8              JZ      ?C0053
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 670
000F         ?C0054:
                                           ; SOURCE LINE # 671
000F         ?C0055:
000F 22                RET     
             ; FUNCTION CyEEPROM_ReadReserve (END)

             ; FUNCTION CyEEPROM_ReadRelease (BEGIN)
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 690
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
C51 COMPILER V9.51   CYFLASH                                                               02/27/2014 19:08:30 PAGE 27  

0005 22                RET     
             ; FUNCTION CyEEPROM_ReadRelease (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    987    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
