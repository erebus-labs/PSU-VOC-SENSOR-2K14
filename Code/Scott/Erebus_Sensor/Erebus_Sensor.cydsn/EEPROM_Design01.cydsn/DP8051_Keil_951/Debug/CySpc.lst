C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYSPC
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CySpc.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CySpc.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\CySpc.lst) CD DB NOIP OT(3,SPEE
                    -D) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\CySpc.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CySpc.c
   3          * Version 4.0
   4          *
   5          *  Description:
   6          *   Provides an API for the System Performance Component.
   7          *   The SPC functions are not meant to be called directly by the user
   8          *   application.
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CySpc.h"
  18          
  19          #define CY_SPC_KEY_ONE                      (0xB6u)
  20          #define CY_SPC_KEY_TWO(x)                   ((uint8) (((uint16) 0xD3u) + ((uint16) (x))))
  21          
  22          /* Command Codes */
  23          #define CY_SPC_CMD_LD_BYTE                  (0x00u)
  24          #define CY_SPC_CMD_LD_MULTI_BYTE            (0x01u)
  25          #define CY_SPC_CMD_LD_ROW                   (0x02u)
  26          #define CY_SPC_CMD_RD_BYTE                  (0x03u)
  27          #define CY_SPC_CMD_RD_MULTI_BYTE            (0x04u)
  28          #define CY_SPC_CMD_WR_ROW                   (0x05u)
  29          #define CY_SPC_CMD_WR_USER_NVL              (0x06u)
  30          #define CY_SPC_CMD_PRG_ROW                  (0x07u)
  31          #define CY_SPC_CMD_ER_SECTOR                (0x08u)
  32          #define CY_SPC_CMD_ER_ALL                   (0x09u)
  33          #define CY_SPC_CMD_RD_HIDDEN                (0x0Au)
  34          #define CY_SPC_CMD_PRG_PROTECT              (0x0Bu)
  35          #define CY_SPC_CMD_CHECKSUM                 (0x0Cu)
  36          #define CY_SPC_CMD_DWNLD_ALGORITHM          (0x0Du)
  37          #define CY_SPC_CMD_GET_TEMP                 (0x0Eu)
  38          #define CY_SPC_CMD_GET_ADC                  (0x0Fu)
  39          #define CY_SPC_CMD_RD_NVL_VOLATILE          (0x10u)
  40          #define CY_SPC_CMD_SETUP_TS                 (0x11u)
  41          #define CY_SPC_CMD_DISABLE_TS               (0x12u)
  42          #define CY_SPC_CMD_ER_ROW                   (0x13u)
  43          
  44          /* Enable bit in Active and Alternate Active mode templates */
  45          #define PM_SPC_PM_EN                        (0x08u)
  46          
  47          /* Gate calls to the SPC. */
  48          uint8 SpcLockState = CY_SPC_UNLOCKED;
  49          
  50          
  51          #if(CY_PSOC5)
              
                  /***************************************************************************
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 2   

                  * The wait-state pipeline must be enabled prior to accessing the SPC
                  * register interface regardless of CPU frequency. The CySpcLock() saves
                  * current wait-state pipeline state and enables it. The CySpcUnlock()
                  * function, which must be called after SPC transaction, restores original
                  * state.
                  ***************************************************************************/
                  static uint32 spcWaitPipeBypass = 0u;
              
              #endif  /* (CY_PSOC5) */
  63          
  64          
  65          /*******************************************************************************
  66          * Function Name: CySpcStart
  67          ********************************************************************************
  68          * Summary:
  69          *  Starts the SPC.
  70          *
  71          * Parameters:
  72          *  None
  73          *
  74          * Return:
  75          *  None
  76          *
  77          *******************************************************************************/
  78          void CySpcStart(void) 
  79          {
  80   1          /* Save current global interrupt enable and disable it */
  81   1          uint8 interruptState = CyEnterCriticalSection();
  82   1      
  83   1          CY_SPC_PM_ACT_REG  |= PM_SPC_PM_EN;
  84   1          CY_SPC_PM_STBY_REG |= PM_SPC_PM_EN;
  85   1      
  86   1          /* Restore global interrupt enable state */
  87   1          CyExitCriticalSection(interruptState);
  88   1      }
  89          
  90          
  91          /*******************************************************************************
  92          * Function Name: CySpcStop
  93          ********************************************************************************
  94          * Summary:
  95          *  Stops the SPC.
  96          *
  97          * Parameters:
  98          *  None
  99          *
 100          * Return:
 101          *  None
 102          *
 103          *******************************************************************************/
 104          void CySpcStop(void) 
 105          {
 106   1          /* Save current global interrupt enable and disable it */
 107   1          uint8 interruptState = CyEnterCriticalSection();
 108   1      
 109   1          CY_SPC_PM_ACT_REG  &= ((uint8)(~PM_SPC_PM_EN));
 110   1          CY_SPC_PM_STBY_REG &= ((uint8)(~PM_SPC_PM_EN));
 111   1      
 112   1          /* Restore global interrupt enable state */
 113   1          CyExitCriticalSection(interruptState);
 114   1      }
 115          
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 3   

 116          
 117          /*******************************************************************************
 118          * Function Name: CySpcReadData
 119          ********************************************************************************
 120          * Summary:
 121          *  Reads data from the SPC.
 122          *
 123          * Parameters:
 124          *  uint8 buffer:
 125          *   Address to store data read.
 126          *
 127          *  uint8 size:
 128          *   Number of bytes to read from the SPC.
 129          *
 130          * Return:
 131          *  uint8:
 132          *   The number of bytes read from the SPC.
 133          *
 134          *******************************************************************************/
 135          uint8 CySpcReadData(uint8 buffer[], uint8 size) 
 136          {
 137   1          uint8 i;
 138   1      
 139   1          for(i = 0u; i < size; i++)
 140   1          {
 141   2              while(!CY_SPC_DATA_READY)
 142   2              {
 143   3                  CyDelayUs(1u);
 144   3              }
 145   2              buffer[i] = CY_SPC_CPU_DATA_REG;
 146   2          }
 147   1      
 148   1          return(i);
 149   1      }
 150          
 151          
 152          /*******************************************************************************
 153          * Function Name: CySpcLoadMultiByte
 154          ********************************************************************************
 155          * Summary:
 156          *  Loads 1 to 32 bytes of data into the row latch of a Flash/EEPROM array.
 157          *
 158          * Parameters:
 159          *  uint8 array:
 160          *   Id of the array.
 161          *
 162          *  uint16 address:
 163          *   Flash/eeprom addrress
 164          *
 165          *  uint8* buffer:
 166          *   Data to load to the row latch
 167          *
 168          *  uint16 number:
 169          *   Number bytes to load.
 170          *
 171          * Return:
 172          *  CYRET_STARTED
 173          *  CYRET_CANCELED
 174          *  CYRET_LOCKED
 175          *  CYRET_BAD_PARAM
 176          *
 177          *******************************************************************************/
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 4   

 178          cystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size)\
 179          
 180          {
 181   1          cystatus status = CYRET_STARTED;
 182   1          uint8 i;
 183   1      
 184   1          /***************************************************************************
 185   1          * Check if number is correct for array. Number must be less than
 186   1          * 32 for Flash or less than 16 for EEPROM.
 187   1          ***************************************************************************/
 188   1          if(((array < CY_SPC_LAST_FLASH_ARRAYID) && (size < 32u)) ||
 189   1             ((array > CY_SPC_LAST_FLASH_ARRAYID) && (size < 16u)))
 190   1          {
 191   2              if(CY_SPC_IDLE)
 192   2              {
 193   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 194   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_MULTI_BYTE);
 195   3                  CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_MULTI_BYTE;
 196   3      
 197   3                  if(CY_SPC_BUSY)
 198   3                  {
 199   4                      CY_SPC_CPU_DATA_REG = array;
 200   4                      CY_SPC_CPU_DATA_REG = 1u & HI8(address);
 201   4                      CY_SPC_CPU_DATA_REG = LO8(address);
 202   4                      CY_SPC_CPU_DATA_REG = ((uint8)(size - 1u));
 203   4      
 204   4                      for(i = 0u; i < size; i++)
 205   4                      {
 206   5                          CY_SPC_CPU_DATA_REG = buffer[i];
 207   5                      }
 208   4                  }
 209   3                  else
 210   3                  {
 211   4                      status = CYRET_CANCELED;
 212   4                  }
 213   3              }
 214   2              else
 215   2              {
 216   3                  status = CYRET_LOCKED;
 217   3              }
 218   2          }
 219   1          else
 220   1          {
 221   2              status = CYRET_BAD_PARAM;
 222   2          }
 223   1      
 224   1          return(status);
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name: CySpcLoadRow
 230          ********************************************************************************
 231          * Summary:
 232          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 233          *
 234          * Parameters:
 235          *  uint8 array:
 236          *   Id of the array.
 237          *
 238          *  uint8* buffer:
 239          *   Data to be loaded to the row latch
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 5   

 240          *
 241          *  uint8 size:
 242          *   The number of data bytes that the SPC expects to be written. Depends on the
 243          *   type of the array and, if the array is Flash, whether ECC is being enabled
 244          *   or not. There are following values: flash row latch size with ECC enabled,
 245          *   flash row latch size with ECC disabled and EEPROM row latch size.
 246          *
 247          * Return:
 248          *  CYRET_STARTED
 249          *  CYRET_CANCELED
 250          *  CYRET_LOCKED
 251          *
 252          *******************************************************************************/
 253          cystatus CySpcLoadRow(uint8 array, const uint8 buffer[], uint16 size)
 254          {
 255   1          cystatus status = CYRET_STARTED;
 256   1          uint16 i;
 257   1      
 258   1          /* Make sure the SPC is ready to accept command */
 259   1          if(CY_SPC_IDLE)
 260   1          {
 261   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 262   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 263   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 264   2      
 265   2              /* Make sure the command was accepted */
 266   2              if(CY_SPC_BUSY)
 267   2              {
 268   3                  CY_SPC_CPU_DATA_REG = array;
 269   3      
 270   3                  for(i = 0u; i < size; i++)
 271   3                  {
 272   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 273   4                  }
 274   3              }
 275   2              else
 276   2              {
 277   3                  status = CYRET_CANCELED;
 278   3              }
 279   2          }
 280   1          else
 281   1          {
 282   2              status = CYRET_LOCKED;
 283   2          }
 284   1      
 285   1          return(status);
 286   1      }
 287          
 288          
 289          /*******************************************************************************
 290          * Function Name: CySpcWriteRow
 291          ********************************************************************************
 292          * Summary:
 293          *  Erases then programs a row in Flash/EEPROM with data in row latch.
 294          *
 295          * Parameters:
 296          *  uint8 array:
 297          *   Id of the array.
 298          *
 299          *  uint16 address:
 300          *   flash/eeprom addrress
 301          *
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 6   

 302          *  uint8 tempPolarity:
 303          *   temperature polarity.
 304          *   1: the Temp Magnitude is interpreted as a positive value
 305          *   0: the Temp Magnitude is interpreted as a negative value
 306          *
 307          *  uint8 tempMagnitude:
 308          *   temperature magnitude.
 309          *
 310          * Return:
 311          *  CYRET_STARTED
 312          *  CYRET_CANCELED
 313          *  CYRET_LOCKED
 314          *
 315          *******************************************************************************/
 316          cystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
 317          
 318          {
 319   1          cystatus status = CYRET_STARTED;
 320   1      
 321   1          /* Make sure the SPC is ready to accept command */
 322   1          if(CY_SPC_IDLE)
 323   1          {
 324   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 325   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_WR_ROW);
 326   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_WR_ROW;
 327   2      
 328   2              /* Make sure the command was accepted */
 329   2              if(CY_SPC_BUSY)
 330   2              {
 331   3                  CY_SPC_CPU_DATA_REG = array;
 332   3                  CY_SPC_CPU_DATA_REG = HI8(address);
 333   3                  CY_SPC_CPU_DATA_REG = LO8(address);
 334   3                  CY_SPC_CPU_DATA_REG = tempPolarity;
 335   3                  CY_SPC_CPU_DATA_REG = tempMagnitude;
 336   3              }
 337   2              else
 338   2              {
 339   3                  status = CYRET_CANCELED;
 340   3              }
 341   2          }
 342   1          else
 343   1          {
 344   2              status = CYRET_LOCKED;
 345   2          }
 346   1      
 347   1          return(status);
 348   1      }
 349          
 350          
 351          /*******************************************************************************
 352          * Function Name: CySpcEraseSector
 353          ********************************************************************************
 354          * Summary:
 355          *  Erases all data in the addressed sector (block of 64 rows).
 356          *
 357          * Parameters:
 358          *  uint8 array:
 359          *   Id of the array.
 360          *
 361          *  uint8 sectorNumber:
 362          *   Zero based sector number within Flash/EEPROM array
 363          *
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 7   

 364          * Return:
 365          *  CYRET_STARTED
 366          *  CYRET_CANCELED
 367          *  CYRET_LOCKED
 368          *
 369          *******************************************************************************/
 370          cystatus CySpcEraseSector(uint8 array, uint8 sectorNumber)
 371          {
 372   1          cystatus status = CYRET_STARTED;
 373   1      
 374   1          /* Make sure the SPC is ready to accept command */
 375   1          if(CY_SPC_IDLE)
 376   1          {
 377   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 378   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_ER_SECTOR);
 379   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_ER_SECTOR;
 380   2      
 381   2              /* Make sure the command was accepted */
 382   2              if(CY_SPC_BUSY)
 383   2              {
 384   3                  CY_SPC_CPU_DATA_REG = array;
 385   3                  CY_SPC_CPU_DATA_REG = sectorNumber;
 386   3              }
 387   2              else
 388   2              {
 389   3                  status = CYRET_CANCELED;
 390   3              }
 391   2          }
 392   1          else
 393   1          {
 394   2              status = CYRET_LOCKED;
 395   2          }
 396   1      
 397   1          return(status);
 398   1      }
 399          
 400          
 401          /*******************************************************************************
 402          * Function Name: CySpcGetTemp
 403          ********************************************************************************
 404          * Summary:
 405          *  Returns the internal die temperature
 406          *
 407          * Parameters:
 408          *  uint8 numSamples:
 409          *   Number of samples. Valid values are 1-5, resulting in 2 - 32 samples
 410          *   respectively.
 411          *
 412          * uint16 timerPeriod:
 413          *   Number of ADC ACLK cycles. A valid 14 bit value is accepted, higher 2 bits
 414          *   of 16 bit values are ignored.
 415          *
 416          * uint8 clkDivSelect:
 417          *   ADC ACLK clock divide value. Valid values are 2 - 225.
 418          *
 419          * Return:
 420          *  CYRET_STARTED
 421          *  CYRET_CANCELED
 422          *  CYRET_LOCKED
 423          *
 424          *******************************************************************************/
 425          cystatus CySpcGetTemp(uint8 numSamples)
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 8   

 426          {
 427   1          cystatus status = CYRET_STARTED;
 428   1      
 429   1          /* Make sure the SPC is ready to accept command */
 430   1          if(CY_SPC_IDLE)
 431   1          {
 432   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 433   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_GET_TEMP);
 434   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_GET_TEMP;
 435   2      
 436   2              /* Make sure the command was accepted */
 437   2              if(CY_SPC_BUSY)
 438   2              {
 439   3                  CY_SPC_CPU_DATA_REG = numSamples;
 440   3              }
 441   2              else
 442   2              {
 443   3                  status = CYRET_CANCELED;
 444   3              }
 445   2          }
 446   1          else
 447   1          {
 448   2              status = CYRET_LOCKED;
 449   2          }
 450   1      
 451   1          return(status);
 452   1      }
 453          
 454          
 455          /*******************************************************************************
 456          * Function Name: CySpcLock
 457          ********************************************************************************
 458          * Summary:
 459          *  Locks the SPC so it can not be used by someone else:
 460          *   - Saves wait-pipeline enable state and enable pipeline (PSoC5)
 461          *
 462          * Parameters:
 463          *  Note
 464          *
 465          * Return:
 466          *  CYRET_SUCCESS - if the resource was free.
 467          *  CYRET_LOCKED  - if the SPC is in use.
 468          *
 469          *******************************************************************************/
 470          cystatus CySpcLock(void)
 471          {
 472   1          cystatus status = CYRET_LOCKED;
 473   1          uint8 interruptState;
 474   1      
 475   1          /* Enter critical section */
 476   1          interruptState = CyEnterCriticalSection();
 477   1      
 478   1          if(CY_SPC_UNLOCKED == SpcLockState)
 479   1          {
 480   2              SpcLockState = CY_SPC_LOCKED;
 481   2              status = CYRET_SUCCESS;
 482   2      
 483   2              #if(CY_PSOC5)
              
                          if(0u != (CY_SPC_CPU_WAITPIPE_REG & CY_SPC_CPU_WAITPIPE_BYPASS))
                          {
                              /* Enable pipeline registers */
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 9   

                              CY_SPC_CPU_WAITPIPE_REG &= ((uint32)(~CY_SPC_CPU_WAITPIPE_BYPASS));
              
                              /* At least 2 NOP instructions are recommended */
                              CY_NOP;
                              CY_NOP;
                              CY_NOP;
              
                              spcWaitPipeBypass = CY_SPC_CPU_WAITPIPE_BYPASS;
                          }
              
                      #endif  /* (CY_PSOC5) */
 499   2          }
 500   1      
 501   1          /* Exit critical section */
 502   1          CyExitCriticalSection(interruptState);
 503   1      
 504   1          return(status);
 505   1      }
 506          
 507          
 508          /*******************************************************************************
 509          * Function Name: CySpcUnlock
 510          ********************************************************************************
 511          * Summary:
 512          *  Unlocks the SPC so it can be used by someone else:
 513          *   - Restores wait-pipeline enable state (PSoC5)
 514          *
 515          * Parameters:
 516          *  None
 517          *
 518          * Return:
 519          *  None
 520          *
 521          *******************************************************************************/
 522          void CySpcUnlock(void)
 523          {
 524   1          uint8 interruptState;
 525   1      
 526   1          /* Enter critical section */
 527   1          interruptState = CyEnterCriticalSection();
 528   1      
 529   1          /* Release the SPC object */
 530   1          SpcLockState = CY_SPC_UNLOCKED;
 531   1      
 532   1          #if(CY_PSOC5)
              
                      if(CY_SPC_CPU_WAITPIPE_BYPASS == spcWaitPipeBypass)
                      {
                          /* Force to bypass pipeline registers */
                          CY_SPC_CPU_WAITPIPE_REG |= CY_SPC_CPU_WAITPIPE_BYPASS;
              
                          /* At least 2 NOP instructions are recommended */
                          CY_NOP;
                          CY_NOP;
                          CY_NOP;
              
                          spcWaitPipeBypass = 0u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 548   1      
 549   1          /* Exit critical section */
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 10  

 550   1          CyExitCriticalSection(interruptState);
 551   1      }
 552          
 553          
 554          /* [] END OF FILE */
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CySpcStart (BEGIN)
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C 4408              ORL     A,#08H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
000F 9043B0            MOV     DPTR,#043B0H
0012 E0                MOVX    A,@DPTR
0013 4408              ORL     A,#08H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
0016 900000      R     MOV     DPTR,#interruptState
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 88
001E 22                RET     
             ; FUNCTION CySpcStart (END)

             ; FUNCTION CySpcStop (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C 54F7              ANL     A,#0F7H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
000F 9043B0            MOV     DPTR,#043B0H
0012 E0                MOVX    A,@DPTR
0013 54F7              ANL     A,#0F7H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0016 900000      R     MOV     DPTR,#interruptState
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 114
001E 22                RET     
             ; FUNCTION CySpcStop (END)

             ; FUNCTION _CySpcReadData (BEGIN)
                                           ; SOURCE LINE # 135
0000 900000      R     MOV     DPTR,#buffer
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 12  

0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 139
000E E4                CLR     A
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
0011         ?C0003:
0011 900000      R     MOV     DPTR,#size
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 C3                CLR     C
0019 9F                SUBB    A,R7
001A 503E              JNC     ?C0004
                                           ; SOURCE LINE # 140
001C         ?C0006:
                                           ; SOURCE LINE # 141
001C 904722            MOV     DPTR,#04722H
001F E0                MOVX    A,@DPTR
0020 5401              ANL     A,#01H
0022 6003              JZ      ?C0008
0024 D3                SETB    C
0025 8001              SJMP    ?C0009
0027         ?C0008:
0027 C3                CLR     C
0028         ?C0009:
0028 4009              JC      ?C0007
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
002A 7F01              MOV     R7,#01H
002C 7E00              MOV     R6,#00H
002E 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 144
0031 80E9              SJMP    ?C0006
0033         ?C0007:
                                           ; SOURCE LINE # 145
0033 904720            MOV     DPTR,#04720H
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#buffer
003B E0                MOVX    A,@DPTR
003C FB                MOV     R3,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FA                MOV     R2,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 F9                MOV     R1,A
0043 900000      R     MOV     DPTR,#i
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 E9                MOV     A,R1
0049 2E                ADD     A,R6
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 13  

004A F9                MOV     R1,A
004B E4                CLR     A
004C 3A                ADDC    A,R2
004D FA                MOV     R2,A
004E EF                MOV     A,R7
004F 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 146
0052 900000      R     MOV     DPTR,#i
0055 E0                MOVX    A,@DPTR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
0058 80B7              SJMP    ?C0003
005A         ?C0004:
                                           ; SOURCE LINE # 148
005A 900000      R     MOV     DPTR,#i
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
                                           ; SOURCE LINE # 149
005F         ?C0010:
005F 22                RET     
             ; FUNCTION _CySpcReadData (END)

             ; FUNCTION _CySpcLoadMultiByte (BEGIN)
                                           ; SOURCE LINE # 178
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0014 900000      R     MOV     DPTR,#status
0017 7407              MOV     A,#07H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
001A 900000      R     MOV     DPTR,#array
001D E0                MOVX    A,@DPTR
001E C3                CLR     C
001F 943F              SUBB    A,#03FH
0021 5009              JNC     ?C0013
0023 900000      R     MOV     DPTR,#size
0026 E0                MOVX    A,@DPTR
0027 C3                CLR     C
0028 9420              SUBB    A,#020H
002A 4017              JC      ?C0012
002C         ?C0013:
002C 900000      R     MOV     DPTR,#array
002F E0                MOVX    A,@DPTR
0030 D3                SETB    C
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 14  

0031 943F              SUBB    A,#03FH
0033 5003              JNC     $ + 5H
0035 020000      R     LJMP    ?C0011
0038 900000      R     MOV     DPTR,#size
003B E0                MOVX    A,@DPTR
003C 9410              SUBB    A,#010H
003E 4003              JC      $ + 5H
0040 020000      R     LJMP    ?C0011
0043         ?C0012:
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0043 904722            MOV     DPTR,#04722H
0046 E0                MOVX    A,@DPTR
0047 5402              ANL     A,#02H
0049 607C              JZ      ?C0014
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
004B 904720            MOV     DPTR,#04720H
004E 74B6              MOV     A,#0B6H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
0051 74D4              MOV     A,#0D4H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0054 7401              MOV     A,#01H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
0057 904722            MOV     DPTR,#04722H
005A E0                MOVX    A,@DPTR
005B 5402              ANL     A,#02H
005D 7060              JNZ     ?C0015
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
005F 900000      R     MOV     DPTR,#array
0062 E0                MOVX    A,@DPTR
0063 904720            MOV     DPTR,#04720H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0067 900000      R     MOV     DPTR,#address
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E EE                MOV     A,R6
006F 5401              ANL     A,#01H
0071 904720            MOV     DPTR,#04720H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0075 900000      R     MOV     DPTR,#address
0078 E0                MOVX    A,@DPTR
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B 904720            MOV     DPTR,#04720H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
007F 900000      R     MOV     DPTR,#size
0082 E0                MOVX    A,@DPTR
0083 14                DEC     A
0084 904720            MOV     DPTR,#04720H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0088 E4                CLR     A
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 15  

0089 900000      R     MOV     DPTR,#i
008C F0                MOVX    @DPTR,A
008D         ?C0016:
008D 900000      R     MOV     DPTR,#size
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 900000      R     MOV     DPTR,#i
0095 E0                MOVX    A,@DPTR
0096 C3                CLR     C
0097 9F                SUBB    A,R7
0098 503B              JNC     ?C0021
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
009A 900000      R     MOV     DPTR,#buffer
009D E0                MOVX    A,@DPTR
009E FB                MOV     R3,A
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 FA                MOV     R2,A
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 F9                MOV     R1,A
00A5 900000      R     MOV     DPTR,#i
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA E9                MOV     A,R1
00AB 2F                ADD     A,R7
00AC F9                MOV     R1,A
00AD E4                CLR     A
00AE 3A                ADDC    A,R2
00AF FA                MOV     R2,A
00B0 120000      E     LCALL   ?C?CLDPTR
00B3 904720            MOV     DPTR,#04720H
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
00B7 900000      R     MOV     DPTR,#i
00BA E0                MOVX    A,@DPTR
00BB 04                INC     A
00BC F0                MOVX    @DPTR,A
00BD 80CE              SJMP    ?C0016
                                           ; SOURCE LINE # 208
00BF         ?C0015:
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
00BF 900000      R     MOV     DPTR,#status
00C2 7409              MOV     A,#09H
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
00C5 800E              SJMP    ?C0021
00C7         ?C0014:
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
00C7 900000      R     MOV     DPTR,#status
00CA 7404              MOV     A,#04H
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
00CD 8006              SJMP    ?C0021
00CF         ?C0011:
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 16  

00CF 900000      R     MOV     DPTR,#status
00D2 7401              MOV     A,#01H
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
00D5         ?C0021:
                                           ; SOURCE LINE # 224
00D5 900000      R     MOV     DPTR,#status
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
                                           ; SOURCE LINE # 225
00DA         ?C0022:
00DA 22                RET     
             ; FUNCTION _CySpcLoadMultiByte (END)

             ; FUNCTION _CySpcLoadRow (BEGIN)
                                           ; SOURCE LINE # 253
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E9                MOV     A,R1
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
000E 900000      R     MOV     DPTR,#status
0011 7407              MOV     A,#07H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0014 904722            MOV     DPTR,#04722H
0017 E0                MOVX    A,@DPTR
0018 5402              ANL     A,#02H
001A 6070              JZ      ?C0023
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
001C 904720            MOV     DPTR,#04720H
001F 74B6              MOV     A,#0B6H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0022 74D5              MOV     A,#0D5H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
0025 7402              MOV     A,#02H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0028 904722            MOV     DPTR,#04722H
002B E0                MOVX    A,@DPTR
002C 5402              ANL     A,#02H
002E 7054              JNZ     ?C0024
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
0030 900000      R     MOV     DPTR,#array
0033 E0                MOVX    A,@DPTR
0034 904720            MOV     DPTR,#04720H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0038 E4                CLR     A
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 17  

0039 900000      R     MOV     DPTR,#i
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E F0                MOVX    @DPTR,A
003F         ?C0025:
003F 900000      R     MOV     DPTR,#size
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 900000      R     MOV     DPTR,#i
004A E0                MOVX    A,@DPTR
004B FC                MOV     R4,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E C3                CLR     C
004F 9F                SUBB    A,R7
0050 EC                MOV     A,R4
0051 9E                SUBB    A,R6
0052 503E              JNC     ?C0029
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
0054 900000      R     MOV     DPTR,#buffer
0057 E0                MOVX    A,@DPTR
0058 FB                MOV     R3,A
0059 A3                INC     DPTR
005A E0                MOVX    A,@DPTR
005B FA                MOV     R2,A
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E F9                MOV     R1,A
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 FE                MOV     R6,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 E9                MOV     A,R1
0068 2F                ADD     A,R7
0069 F9                MOV     R1,A
006A EA                MOV     A,R2
006B 3E                ADDC    A,R6
006C FA                MOV     R2,A
006D 120000      E     LCALL   ?C?CLDPTR
0070 904720            MOV     DPTR,#04720H
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
0074 900000      R     MOV     DPTR,#i+01H
0077 E0                MOVX    A,@DPTR
0078 04                INC     A
0079 F0                MOVX    @DPTR,A
007A 7006              JNZ     ?C0049
007C 900000      R     MOV     DPTR,#i
007F E0                MOVX    A,@DPTR
0080 04                INC     A
0081 F0                MOVX    @DPTR,A
0082         ?C0049:
0082 80BB              SJMP    ?C0025
                                           ; SOURCE LINE # 274
0084         ?C0024:
                                           ; SOURCE LINE # 276
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 18  

                                           ; SOURCE LINE # 277
0084 900000      R     MOV     DPTR,#status
0087 7409              MOV     A,#09H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
008A 8006              SJMP    ?C0029
008C         ?C0023:
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
008C 900000      R     MOV     DPTR,#status
008F 7404              MOV     A,#04H
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
0092         ?C0029:
                                           ; SOURCE LINE # 285
0092 900000      R     MOV     DPTR,#status
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
                                           ; SOURCE LINE # 286
0097         ?C0030:
0097 22                RET     
             ; FUNCTION _CySpcLoadRow (END)

             ; FUNCTION _CySpcWriteRow (BEGIN)
                                           ; SOURCE LINE # 316
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
000E 900000      R     MOV     DPTR,#status
0011 7407              MOV     A,#07H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
0014 904722            MOV     DPTR,#04722H
0017 E0                MOVX    A,@DPTR
0018 5402              ANL     A,#02H
001A 604C              JZ      ?C0031
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
001C 904720            MOV     DPTR,#04720H
001F 74B6              MOV     A,#0B6H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
0022 74D8              MOV     A,#0D8H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
0028 904722            MOV     DPTR,#04722H
002B E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 19  

002C 5402              ANL     A,#02H
002E 7030              JNZ     ?C0032
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
0030 900000      R     MOV     DPTR,#array
0033 E0                MOVX    A,@DPTR
0034 904720            MOV     DPTR,#04720H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
0038 900000      R     MOV     DPTR,#address
003B E0                MOVX    A,@DPTR
003C FE                MOV     R6,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F EE                MOV     A,R6
0040 904720            MOV     DPTR,#04720H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
0044 900000      R     MOV     DPTR,#address
0047 E0                MOVX    A,@DPTR
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A 904720            MOV     DPTR,#04720H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
004E 900000      R     MOV     DPTR,#tempPolarity
0051 E0                MOVX    A,@DPTR
0052 904720            MOV     DPTR,#04720H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0056 900000      R     MOV     DPTR,#tempMagnitude
0059 E0                MOVX    A,@DPTR
005A 904720            MOV     DPTR,#04720H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 336
005E 800E              SJMP    ?C0034
0060         ?C0032:
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
0060 900000      R     MOV     DPTR,#status
0063 7409              MOV     A,#09H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
0066 8006              SJMP    ?C0034
0068         ?C0031:
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
0068 900000      R     MOV     DPTR,#status
006B 7404              MOV     A,#04H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
006E         ?C0034:
                                           ; SOURCE LINE # 347
006E 900000      R     MOV     DPTR,#status
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
                                           ; SOURCE LINE # 348
0073         ?C0035:
0073 22                RET     
             ; FUNCTION _CySpcWriteRow (END)

C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 20  

             ; FUNCTION _CySpcEraseSector (BEGIN)
                                           ; SOURCE LINE # 370
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
0008 A3                INC     DPTR
0009 7407              MOV     A,#07H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
000C 904722            MOV     DPTR,#04722H
000F E0                MOVX    A,@DPTR
0010 5402              ANL     A,#02H
0012 602E              JZ      ?C0036
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
0014 904720            MOV     DPTR,#04720H
0017 74B6              MOV     A,#0B6H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
001A 74DB              MOV     A,#0DBH
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
001D 7408              MOV     A,#08H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
0020 904722            MOV     DPTR,#04722H
0023 E0                MOVX    A,@DPTR
0024 5402              ANL     A,#02H
0026 7012              JNZ     ?C0037
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
0028 900000      R     MOV     DPTR,#array
002B E0                MOVX    A,@DPTR
002C 904720            MOV     DPTR,#04720H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
0030 900000      R     MOV     DPTR,#sectorNumber
0033 E0                MOVX    A,@DPTR
0034 904720            MOV     DPTR,#04720H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0038 800E              SJMP    ?C0039
003A         ?C0037:
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
003A 900000      R     MOV     DPTR,#status
003D 7409              MOV     A,#09H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
0040 8006              SJMP    ?C0039
0042         ?C0036:
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
0042 900000      R     MOV     DPTR,#status
0045 7404              MOV     A,#04H
0047 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 21  

                                           ; SOURCE LINE # 395
0048         ?C0039:
                                           ; SOURCE LINE # 397
0048 900000      R     MOV     DPTR,#status
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
                                           ; SOURCE LINE # 398
004D         ?C0040:
004D 22                RET     
             ; FUNCTION _CySpcEraseSector (END)

             ; FUNCTION _CySpcGetTemp (BEGIN)
                                           ; SOURCE LINE # 425
0000 900000      R     MOV     DPTR,#numSamples
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0005 A3                INC     DPTR
0006 7407              MOV     A,#07H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0009 904722            MOV     DPTR,#04722H
000C E0                MOVX    A,@DPTR
000D 5402              ANL     A,#02H
000F 6026              JZ      ?C0041
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
0011 904720            MOV     DPTR,#04720H
0014 74B6              MOV     A,#0B6H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0017 74E1              MOV     A,#0E1H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
001A 740E              MOV     A,#0EH
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
001D 904722            MOV     DPTR,#04722H
0020 E0                MOVX    A,@DPTR
0021 5402              ANL     A,#02H
0023 700A              JNZ     ?C0042
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
0025 900000      R     MOV     DPTR,#numSamples
0028 E0                MOVX    A,@DPTR
0029 904720            MOV     DPTR,#04720H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
002D 800E              SJMP    ?C0044
002F         ?C0042:
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
002F 900000      R     MOV     DPTR,#status
0032 7409              MOV     A,#09H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0035 8006              SJMP    ?C0044
0037         ?C0041:
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 22  

0037 900000      R     MOV     DPTR,#status
003A 7404              MOV     A,#04H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
003D         ?C0044:
                                           ; SOURCE LINE # 451
003D 900000      R     MOV     DPTR,#status
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
                                           ; SOURCE LINE # 452
0042         ?C0045:
0042 22                RET     
             ; FUNCTION _CySpcGetTemp (END)

             ; FUNCTION CySpcLock (BEGIN)
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
0000 900000      R     MOV     DPTR,#status
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
000E 900000      R     MOV     DPTR,#SpcLockState
0011 E0                MOVX    A,@DPTR
0012 7007              JNZ     ?C0046
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
0014 04                INC     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0016 E4                CLR     A
0017 900000      R     MOV     DPTR,#status
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
001B         ?C0046:
                                           ; SOURCE LINE # 502
001B 900000      R     MOV     DPTR,#interruptState
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 504
0023 900000      R     MOV     DPTR,#status
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 505
0028         ?C0047:
0028 22                RET     
             ; FUNCTION CySpcLock (END)

             ; FUNCTION CySpcUnlock (BEGIN)
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 527
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 02/27/2014 19:08:31 PAGE 23  

                                           ; SOURCE LINE # 530
0008 E4                CLR     A
0009 900000      R     MOV     DPTR,#SpcLockState
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
000D 900000      R     MOV     DPTR,#interruptState
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 551
0015 22                RET     
             ; FUNCTION CySpcUnlock (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    853    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      39
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
