C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYLIB
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CyLib.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyLib.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\CyLib.lst) CD DB NOIP OT(3,SPEE
                    -D) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\CyLib.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyLib.c
   3          * Version 4.0
   4          *
   5          *  Description:
   6          *   Provides system API for the clocking, interrupts and watchdog timer.
   7          *
   8          *  Note:
   9          *   Documentation of the API's in this file is located in the
  10          *   System Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "CyLib.h"
  20          
  21          
  22          /*******************************************************************************
  23          * The CyResetStatus variable is used to obtain value of RESET_SR0 register after
  24          * a device reset. It is set from initialize_psoc() at the early initialization
  25          * stage. In case of IAR EW IDE, initialize_psoc() is executed before the data
  26          * sections are initialized. To avoid zeroing, CyResetStatus should be placed
  27          * to the .noinit section.
  28          *******************************************************************************/
  29          CY_NOINIT uint8 CYXDATA CyResetStatus;
  30          
  31          
  32          /* Variable Vdda */
  33          #if(CYDEV_VARIABLE_VDDA == 1)
              
                  uint8 CyScPumpEnabled = (uint8)(CYDEV_VDDA_MV < 2700);
              
              #endif  /* (CYDEV_VARIABLE_VDDA == 1) */
  38          
  39          
  40          /* Do not use these definitions directly in your application */
  41          uint32 cydelay_freq_hz  = BCLK__BUS_CLK__HZ;
  42          uint32 cydelay_freq_khz = (BCLK__BUS_CLK__HZ + 999u) / 1000u;
  43          uint8  cydelay_freq_mhz = (uint8)((BCLK__BUS_CLK__HZ + 999999u) / 1000000u);
  44          uint32 cydelay_32k_ms   = 32768u * ((BCLK__BUS_CLK__HZ + 999u) / 1000u);
  45          
  46          
  47          /* Function Prototypes */
  48          static uint8 CyUSB_PowerOnCheck(void)  ;
  49          static void CyIMO_SetTrimValue(uint8 freq) ;
  50          static void CyBusClk_Internal_SetDivider(uint16 divider);
  51          
  52          
  53          /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 2   

  54          * Function Name: CyPLL_OUT_Start
  55          ********************************************************************************
  56          *
  57          * Summary:
  58          *   Enables the PLL.  Optionally waits for it to become stable.
  59          *   Waits at least 250 us or until it is detected that the PLL is stable.
  60          *
  61          * Parameters:
  62          *   wait:
  63          *    0: Return immediately after configuration
  64          *    1: Wait for PLL lock or timeout.
  65          *
  66          * Return:
  67          *   Status
  68          *    CYRET_SUCCESS - Completed successfully
  69          *    CYRET_TIMEOUT - Timeout occurred without detecting a stable clock.
  70          *     If the input source of the clock is jittery, then the lock indication
  71          *     may not occur.  However, after the timeout has expired the generated PLL
  72          *     clock can still be used.
  73          *
  74          * Side Effects:
  75          *  If wait is enabled: This function wses the Fast Time Wheel to time the wait.
  76          *  Any other use of the Fast Time Wheel will be stopped during the period of
  77          *  this function and then restored. This function also uses the 100 KHz ILO.
  78          *  If not enabled, this function will enable the 100 KHz ILO for the period of
  79          *  this function.
  80          *
  81          *  No changes to the setup of the ILO, Fast Time Wheel, Central Time Wheel or
  82          *  Once Per Second interrupt may be made by interrupt routines during the period
  83          *  of this function execution. The current operation of the ILO, Central Time
  84          *  Wheel and Once Per Second interrupt are maintained during the operation of
  85          *  this function provided the reading of the Power Manager Interrupt Status
  86          *  Register is only done using the CyPmReadStatus() function.
  87          *
  88          *******************************************************************************/
  89          cystatus CyPLL_OUT_Start(uint8 wait) 
  90          {
  91   1          cystatus status = CYRET_SUCCESS;
  92   1      
  93   1          uint8 iloEnableState;
  94   1          uint8 pmTwCfg0State;
  95   1          uint8 pmTwCfg2State;
  96   1      
  97   1      
  98   1          /* Enables the PLL circuit  */
  99   1          CY_CLK_PLL_CFG0_REG |= CY_CLK_PLL_ENABLE;
 100   1      
 101   1          if(wait != 0u)
 102   1          {
 103   2              /* Save 100 KHz ILO, FTW interval, enable and interrupt enable */
 104   2              iloEnableState = CY_LIB_SLOWCLK_ILO_CR0_REG & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
 105   2              pmTwCfg0State = CY_LIB_PM_TW_CFG0_REG;
 106   2              pmTwCfg2State = CY_LIB_PM_TW_CFG2_REG;
 107   2      
 108   2              CyPmFtwSetInterval(CY_CLK_PLL_FTW_INTERVAL);
 109   2      
 110   2              status = CYRET_TIMEOUT;
 111   2      
 112   2              while(0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
 113   2              {
 114   3                  /* Wait for the interrupt status */
 115   3                  if(0u != (CY_CLK_PLL_SR_REG & CY_CLK_PLL_LOCK_STATUS))
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 3   

 116   3                  {
 117   4                      if(0u != (CY_CLK_PLL_SR_REG & CY_CLK_PLL_LOCK_STATUS))
 118   4                      {
 119   5                          status = CYRET_SUCCESS;
 120   5                          break;
 121   5                      }
 122   4                  }
 123   3              }
 124   2      
 125   2              /* Restore 100 KHz ILO, FTW interval, enable and interrupt enable */
 126   2              if(0u == iloEnableState)
 127   2              {
 128   3                  CyILO_Stop100K();
 129   3              }
 130   2      
 131   2              CY_LIB_PM_TW_CFG0_REG = pmTwCfg0State;
 132   2              CY_LIB_PM_TW_CFG2_REG = pmTwCfg2State;
 133   2          }
 134   1      
 135   1          return(status);
 136   1      }
 137          
 138          
 139          /*******************************************************************************
 140          * Function Name: CyPLL_OUT_Stop
 141          ********************************************************************************
 142          *
 143          * Summary:
 144          *  Disables the PLL.
 145          *
 146          * Parameters:
 147          *  None
 148          *
 149          * Return:
 150          *  None
 151          *
 152          *******************************************************************************/
 153          void CyPLL_OUT_Stop(void) 
 154          {
 155   1          CY_CLK_PLL_CFG0_REG &= ((uint8)(~CY_CLK_PLL_ENABLE));
 156   1      }
 157          
 158          
 159          /*******************************************************************************
 160          * Function Name: CyPLL_OUT_SetPQ
 161          ********************************************************************************
 162          *
 163          * Summary:
 164          *  Sets the P and Q dividers and the charge pump current.
 165          *  The Frequency Out will be P/Q * Frequency In.
 166          *  The PLL must be disabled before calling this function.
 167          *
 168          * Parameters:
 169          *  uint8 pDiv:
 170          *   Valid range [8 - 255].
 171          *
 172          *  uint8 qDiv:
 173          *   Valid range [1 - 16]. Input Frequency / Q must be in range of 1 to 3 MHz.
 174          
 175          *  uint8 current:
 176          *   Valid range [1 - 7]. Charge pump current in uA. Refer to the device TRM and
 177          *   datasheet for more information.
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 4   

 178          *
 179          * Return:
 180          *  None
 181          *
 182          * Side Effects:
 183          *  If as result of this function execution the CPU clock frequency is increased
 184          *  then the number of clock cycles the cache will wait before it samples data
 185          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 186          *  with appropriate parameter. It can be optionally called if CPU clock
 187          *  frequency is lowered in order to improve CPU performance.
 188          *  See CyFlash_SetWaitCycles() description for more information.
 189          *
 190          *******************************************************************************/
 191          void CyPLL_OUT_SetPQ(uint8 pDiv, uint8 qDiv, uint8 current) 
 192          {
 193   1          /* Halt CPU in debug mode if PLL is enabled */
 194   1          CYASSERT(0u == (CY_CLK_PLL_CFG0_REG & CY_CLK_PLL_ENABLE));
 195   1      
 196   1          if((pDiv    >= CY_CLK_PLL_MIN_P_VALUE  ) &&
 197   1             (qDiv    <= CY_CLK_PLL_MAX_Q_VALUE  ) && (qDiv    >= CY_CLK_PLL_MIN_Q_VALUE  ) &&
 198   1             (current >= CY_CLK_PLL_MIN_CUR_VALUE) && (current <= CY_CLK_PLL_MAX_CUR_VALUE))
 199   1          {
 200   2              /* Set new values */
 201   2              CY_CLK_PLL_P_REG = pDiv;
 202   2              CY_CLK_PLL_Q_REG = ((uint8)(qDiv - 1u));
 203   2              CY_CLK_PLL_CFG1_REG = (CY_CLK_PLL_CFG1_REG & CY_CLK_PLL_CURRENT_MASK) |
 204   2                                      ((uint8)(((uint8)(current - 1u)) << CY_CLK_PLL_CURRENT_POSITION));
 205   2          }
 206   1          else
 207   1          {
 208   2              /***********************************************************************
 209   2              * Halt CPU in debug mode if:
 210   2              * - P divider is less than required
 211   2              * - Q divider is out of range
 212   2              * - pump current is out of range
 213   2              ***********************************************************************/
 214   2              CYASSERT(0u != 0u);
 215   2          }
 216   1      
 217   1      }
 218          
 219          
 220          /*******************************************************************************
 221          * Function Name: CyPLL_OUT_SetSource
 222          ********************************************************************************
 223          *
 224          * Summary:
 225          *  Sets the input clock source to the PLL. The PLL must be disabled before
 226          *  calling this function.
 227          *
 228          * Parameters:
 229          *   source: One of the three available PLL clock sources
 230          *    CY_PLL_SOURCE_IMO  :   IMO
 231          *    CY_PLL_SOURCE_XTAL :   MHz Crystal
 232          *    CY_PLL_SOURCE_DSI  :   DSI
 233          *
 234          * Return:
 235          *  None
 236          *
 237          * Side Effects:
 238          *  If as result of this function execution the CPU clock frequency is increased
 239          *  then the number of clock cycles the cache will wait before it samples data
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 5   

 240          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 241          *  with appropriate parameter. It can be optionally called if CPU clock
 242          *  frequency is lowered in order to improve CPU performance.
 243          *  See CyFlash_SetWaitCycles() description for more information.
 244          *
 245          *******************************************************************************/
 246          void CyPLL_OUT_SetSource(uint8 source) 
 247          {
 248   1          /* Halt CPU in debug mode if PLL is enabled */
 249   1          CYASSERT(0u == (CY_CLK_PLL_CFG0_REG & CY_CLK_PLL_ENABLE));
 250   1      
 251   1          switch(source)
 252   1          {
 253   2              case CY_PLL_SOURCE_IMO:
 254   2              case CY_PLL_SOURCE_XTAL:
 255   2              case CY_PLL_SOURCE_DSI:
 256   2                  CY_LIB_CLKDIST_CR_REG = ((CY_LIB_CLKDIST_CR_REG & CY_LIB_CLKDIST_CR_PLL_SCR_MASK) | source);
 257   2              break;
 258   2      
 259   2              default:
 260   2                  CYASSERT(0u != 0u);
 261   2              break;
 262   2          }
 263   1      }
 264          
 265          
 266          /*******************************************************************************
 267          * Function Name: CyIMO_Start
 268          ********************************************************************************
 269          *
 270          * Summary:
 271          *  Enables the IMO. Optionally waits at least 6 us for it to settle.
 272          *
 273          * Parameters:
 274          *  uint8 wait:
 275          *   0: Return immediately after configuration
 276          *   1: Wait for at least 6 us for the IMO to settle.
 277          *
 278          * Return:
 279          *  None
 280          *
 281          * Side Effects:
 282          *  If wait is enabled: This function wses the Fast Time Wheel to time the wait.
 283          *  Any other use of the Fast Time Wheel will be stopped during the period of
 284          *  this function and then restored. This function also uses the 100 KHz ILO.
 285          *  If not enabled, this function will enable the 100 KHz ILO for the period of
 286          *  this function.
 287          *
 288          *  No changes to the setup of the ILO, Fast Time Wheel, Central Time Wheel or
 289          *  Once Per Second interrupt may be made by interrupt routines during the period
 290          *  of this function execution. The current operation of the ILO, Central Time
 291          *  Wheel and Once Per Second interrupt are maintained during the operation of
 292          *  this function provided the reading of the Power Manager Interrupt Status
 293          *  Register is only done using the CyPmReadStatus() function.
 294          *
 295          *******************************************************************************/
 296          void CyIMO_Start(uint8 wait) 
 297          {
 298   1          uint8 pmFtwCfg2Reg;
 299   1          uint8 pmFtwCfg0Reg;
 300   1          uint8 ilo100KhzEnable;
 301   1      
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 6   

 302   1      
 303   1          CY_LIB_PM_ACT_CFG0_REG  |= CY_LIB_PM_ACT_CFG0_IMO_EN;
 304   1          CY_LIB_PM_STBY_CFG0_REG |= CY_LIB_PM_STBY_CFG0_IMO_EN;
 305   1      
 306   1          if(0u != wait)
 307   1          {
 308   2              /* Need to turn on the 100KHz ILO if it happens to not already be running.*/
 309   2              ilo100KhzEnable = CY_LIB_SLOWCLK_ILO_CR0_REG & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
 310   2              pmFtwCfg0Reg = CY_LIB_PM_TW_CFG0_REG;
 311   2              pmFtwCfg2Reg = CY_LIB_PM_TW_CFG2_REG;
 312   2      
 313   2              CyPmFtwSetInterval(CY_LIB_CLK_IMO_FTW_TIMEOUT);
 314   2      
 315   2              while (0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
 316   2              {
 317   3                  /* Wait for the interrupt status */
 318   3              }
 319   2      
 320   2              if(0u == ilo100KhzEnable)
 321   2              {
 322   3                  CyILO_Stop100K();
 323   3              }
 324   2      
 325   2              CY_LIB_PM_TW_CFG0_REG = pmFtwCfg0Reg;
 326   2              CY_LIB_PM_TW_CFG2_REG = pmFtwCfg2Reg;
 327   2          }
 328   1      }
 329          
 330          
 331          /*******************************************************************************
 332          * Function Name: CyIMO_Stop
 333          ********************************************************************************
 334          *
 335          * Summary:
 336          *   Disables the IMO.
 337          *
 338          * Parameters:
 339          *  None
 340          *
 341          * Return:
 342          *  None
 343          *
 344          *******************************************************************************/
 345          void CyIMO_Stop(void) 
 346          {
 347   1          CY_LIB_PM_ACT_CFG0_REG  &= ((uint8) (~CY_LIB_PM_ACT_CFG0_IMO_EN));
 348   1          CY_LIB_PM_STBY_CFG0_REG &= ((uint8) (~CY_LIB_PM_STBY_CFG0_IMO_EN));
 349   1      }
 350          
 351          
 352          /*******************************************************************************
 353          * Function Name: CyUSB_PowerOnCheck
 354          ********************************************************************************
 355          *
 356          * Summary:
 357          *  Returns the USB power status value. A private function to cy_boot.
 358          *
 359          * Parameters:
 360          *   None
 361          *
 362          * Return:
 363          *   uint8: one if the USB is enabled, 0 if not enabled.
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 7   

 364          *
 365          *******************************************************************************/
 366          static uint8 CyUSB_PowerOnCheck(void)  
 367          {
 368   1          uint8 poweredOn = 0u;
 369   1      
 370   1          /* Check whether device is in Active or AltActiv and if USB is powered on */
 371   1          if((((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ACTIVE ) &&
 372   1             (0u != (CY_LIB_PM_ACT_CFG5_REG & CY_ACT_USB_ENABLED     )))  ||
 373   1             (((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ALT_ACT) &&
 374   1             (0u != (CY_LIB_PM_STBY_CFG5_REG & CY_ALT_ACT_USB_ENABLED))))
 375   1          {
 376   2              poweredOn = 1u;
 377   2          }
 378   1      
 379   1          return (poweredOn);
 380   1      }
 381          
 382          
 383          /*******************************************************************************
 384          * Function Name: CyIMO_SetTrimValue
 385          ********************************************************************************
 386          *
 387          * Summary:
 388          *  Sets the IMO factory trim values.
 389          *
 390          * Parameters:
 391          *  uint8 freq - frequency for which trims must be set
 392          *
 393          * Return:
 394          *  None
 395          *
 396          *******************************************************************************/
 397          static void CyIMO_SetTrimValue(uint8 freq) 
 398          {
 399   1          uint8 usbPowerOn = CyUSB_PowerOnCheck();
 400   1      
 401   1          /* If USB is powered */
 402   1          if(usbPowerOn == 1u)
 403   1          {
 404   2              /* Unlock USB write */
 405   2              CY_LIB_USB_CR1_REG &= ((uint8)(~CY_LIB_USB_CLK_EN));
 406   2          }
 407   1          switch(freq)
 408   1          {
 409   2          case CY_IMO_FREQ_3MHZ:
 410   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_3MHZ_PTR);
 411   2              break;
 412   2      
 413   2          case CY_IMO_FREQ_6MHZ:
 414   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_6MHZ_PTR);
 415   2              break;
 416   2      
 417   2          case CY_IMO_FREQ_12MHZ:
 418   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_12MHZ_PTR);
 419   2              break;
 420   2      
 421   2          case CY_IMO_FREQ_24MHZ:
 422   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_24MHZ_PTR);
 423   2              break;
 424   2      
 425   2          case CY_IMO_FREQ_48MHZ:
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 8   

 426   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_TR1_PTR);
 427   2              break;
 428   2      
 429   2          case CY_IMO_FREQ_62MHZ:
 430   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_67MHZ_PTR);
 431   2              break;
 432   2      
 433   2      #if(CY_PSOC5)
                  case CY_IMO_FREQ_74MHZ:
                      CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_80MHZ_PTR);
                      break;
              #endif  /* (CY_PSOC5) */
 438   2      
 439   2          case CY_IMO_FREQ_USB:
 440   2              CY_LIB_IMO_TR1_REG = CY_GET_XTND_REG8(CY_LIB_TRIM_IMO_USB_PTR);
 441   2      
 442   2              /* If USB is powered */
 443   2              if(usbPowerOn == 1u)
 444   2              {
 445   3                  /* Lock the USB Oscillator */
 446   3                  CY_LIB_USB_CR1_REG |= CY_LIB_USB_CLK_EN;
 447   3              }
 448   2              break;
 449   2      
 450   2          default:
 451   2                  CYASSERT(0u != 0u);
 452   2              break;
 453   2          }
 454   1      
 455   1      }
 456          
 457          
 458          /*******************************************************************************
 459          * Function Name: CyIMO_SetFreq
 460          ********************************************************************************
 461          *
 462          * Summary:
 463          *  Sets the frequency of the IMO. Changes may be made while the IMO is running.
 464          *
 465          * Parameters:
 466          *  freq: Frequency of IMO operation
 467          *       CY_IMO_FREQ_3MHZ  to set  3   MHz
 468          *       CY_IMO_FREQ_6MHZ  to set  6   MHz
 469          *       CY_IMO_FREQ_12MHZ to set 12   MHz
 470          *       CY_IMO_FREQ_24MHZ to set 24   MHz
 471          *       CY_IMO_FREQ_48MHZ to set 48   MHz
 472          *       CY_IMO_FREQ_62MHZ to set 62.6 MHz
 473          *       CY_IMO_FREQ_74MHZ to set 74.7 MHz (not applicable for PSoC 3)
 474          *       CY_IMO_FREQ_USB   to set 24   MHz (Trimmed for USB operation)
 475          *
 476          * Return:
 477          *  None
 478          *
 479          * Side Effects:
 480          *  If as result of this function execution the CPU clock frequency is increased
 481          *  then the number of clock cycles the cache will wait before it samples data
 482          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 483          *  with appropriate parameter. It can be optionally called if CPU clock
 484          *  frequency is lowered in order to improve CPU performance.
 485          *  See CyFlash_SetWaitCycles() description for more information.
 486          *
 487          *  When the USB setting is chosen, the USB clock locking circuit is enabled.
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 9   

 488          *  Otherwise this circuit is disabled. The USB block must be powered before
 489          *  selecting the USB setting.
 490          *
 491          *******************************************************************************/
 492          void CyIMO_SetFreq(uint8 freq) 
 493          {
 494   1          uint8 currentFreq;
 495   1          uint8 nextFreq;
 496   1      
 497   1          /***************************************************************************
 498   1          * When changing the IMO frequency the Trim values must also be set
 499   1          * accordingly.This requires reading the current frequency. If the new
 500   1          * frequency is faster, then set the new trim and then change the frequency,
 501   1          * otherwise change the frequency and then set the new trim values.
 502   1          ***************************************************************************/
 503   1      
 504   1          currentFreq = CY_LIB_FASTCLK_IMO_CR_REG & ((uint8)(~CY_LIB_FASTCLK_IMO_CR_RANGE_MASK));
 505   1      
 506   1          /* Check if the requested frequency is USB. */
 507   1          nextFreq = (freq == CY_IMO_FREQ_USB) ? CY_IMO_FREQ_24MHZ : freq;
 508   1      
 509   1          switch (currentFreq)
 510   1          {
 511   2          case 0u:
 512   2              currentFreq = CY_IMO_FREQ_12MHZ;
 513   2              break;
 514   2      
 515   2          case 1u:
 516   2              currentFreq = CY_IMO_FREQ_6MHZ;
 517   2              break;
 518   2      
 519   2          case 2u:
 520   2              currentFreq = CY_IMO_FREQ_24MHZ;
 521   2              break;
 522   2      
 523   2          case 3u:
 524   2              currentFreq = CY_IMO_FREQ_3MHZ;
 525   2              break;
 526   2      
 527   2          case 4u:
 528   2              currentFreq = CY_IMO_FREQ_48MHZ;
 529   2              break;
 530   2      
 531   2          case 5u:
 532   2              currentFreq = CY_IMO_FREQ_62MHZ;
 533   2              break;
 534   2      
 535   2      #if(CY_PSOC5)
                  case 6u:
                      currentFreq = CY_IMO_FREQ_74MHZ;
                      break;
              #endif  /* (CY_PSOC5) */
 540   2      
 541   2          default:
 542   2              CYASSERT(0u != 0u);
 543   2              break;
 544   2          }
 545   1      
 546   1          if (nextFreq >= currentFreq)
 547   1          {
 548   2              /* Set the new trim first */
 549   2              CyIMO_SetTrimValue(freq);
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 10  

 550   2          }
 551   1      
 552   1          /* Set the usbclk_on bit when using CY_IMO_FREQ_USB, if not clear it */
 553   1          switch(freq)
 554   1          {
 555   2          case CY_IMO_FREQ_3MHZ:
 556   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 557   2                  CY_LIB_IMO_3MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 558   2              break;
 559   2      
 560   2          case CY_IMO_FREQ_6MHZ:
 561   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 562   2                  CY_LIB_IMO_6MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 563   2              break;
 564   2      
 565   2          case CY_IMO_FREQ_12MHZ:
 566   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 567   2                  CY_LIB_IMO_12MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 568   2              break;
 569   2      
 570   2          case CY_IMO_FREQ_24MHZ:
 571   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 572   2                  CY_LIB_IMO_24MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 573   2              break;
 574   2      
 575   2          case CY_IMO_FREQ_48MHZ:
 576   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 577   2                  CY_LIB_IMO_48MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 578   2              break;
 579   2      
 580   2          case CY_IMO_FREQ_62MHZ:
 581   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 582   2                  CY_LIB_IMO_62MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
 583   2              break;
 584   2      
 585   2      #if(CY_PSOC5)
                  case CY_IMO_FREQ_74MHZ:
                      CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
                          CY_LIB_IMO_74MHZ_VALUE) & ((uint8)(~CY_LIB_IMO_USBCLK_ON_SET));
                      break;
              #endif  /* (CY_PSOC5) */
 591   2      
 592   2          case CY_IMO_FREQ_USB:
 593   2              CY_LIB_FASTCLK_IMO_CR_REG = ((CY_LIB_FASTCLK_IMO_CR_REG & CY_LIB_FASTCLK_IMO_CR_RANGE_MASK) |
 594   2                  CY_LIB_IMO_24MHZ_VALUE) | CY_LIB_IMO_USBCLK_ON_SET;
 595   2              break;
 596   2      
 597   2          default:
 598   2              CYASSERT(0u != 0u);
 599   2              break;
 600   2          }
 601   1      
 602   1          /* Turn on the IMO Doubler, if switching to CY_IMO_FREQ_USB */
 603   1          if (freq == CY_IMO_FREQ_USB)
 604   1          {
 605   2              CyIMO_EnableDoubler();
 606   2          }
 607   1          else
 608   1          {
 609   2              CyIMO_DisableDoubler();
 610   2          }
 611   1      
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 11  

 612   1          if (nextFreq < currentFreq)
 613   1          {
 614   2              /* Set the new trim after setting the frequency */
 615   2              CyIMO_SetTrimValue(freq);
 616   2          }
 617   1      }
 618          
 619          
 620          /*******************************************************************************
 621          * Function Name: CyIMO_SetSource
 622          ********************************************************************************
 623          *
 624          * Summary:
 625          *  Sets the source of the clock output from the IMO block.
 626          *
 627          *  The output from the IMO is by default the IMO itself. Optionally the MHz
 628          *  Crystal or a DSI input can be the source of the IMO output instead.
 629          *
 630          * Parameters:
 631          *   source: CY_IMO_SOURCE_DSI to set the DSI as source.
 632          *           CY_IMO_SOURCE_XTAL to set the MHz as source.
 633          *           CY_IMO_SOURCE_IMO to set the IMO itself.
 634          *
 635          * Return:
 636          *  None
 637          *
 638          * Side Effects:
 639          *  If as result of this function execution the CPU clock frequency is increased
 640          *  then the number of clock cycles the cache will wait before it samples data
 641          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 642          *  with appropriate parameter. It can be optionally called if CPU clock
 643          *  frequency is lowered in order to improve CPU performance.
 644          *  See CyFlash_SetWaitCycles() description for more information.
 645          *
 646          *******************************************************************************/
 647          void CyIMO_SetSource(uint8 source) 
 648          {
 649   1          switch(source)
 650   1          {
 651   2          case CY_IMO_SOURCE_DSI:
 652   2              CY_LIB_CLKDIST_CR_REG     &= ((uint8)(~CY_LIB_CLKDIST_CR_IMO2X));
 653   2              CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_IMO;
 654   2              break;
 655   2      
 656   2          case CY_IMO_SOURCE_XTAL:
 657   2              CY_LIB_CLKDIST_CR_REG     |= CY_LIB_CLKDIST_CR_IMO2X;
 658   2              CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_IMO;
 659   2              break;
 660   2      
 661   2          case CY_IMO_SOURCE_IMO:
 662   2              CY_LIB_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_LIB_FASTCLK_IMO_IMO));
 663   2              break;
 664   2      
 665   2          default:
 666   2              /* Incorrect source value */
 667   2              CYASSERT(0u != 0u);
 668   2              break;
 669   2          }
 670   1      }
 671          
 672          
 673          /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 12  

 674          * Function Name: CyIMO_EnableDoubler
 675          ********************************************************************************
 676          *
 677          * Summary:
 678          *  Enables the IMO doubler.  The 2x frequency clock is used to convert a 24 MHz
 679          *  input to a 48 MHz output for use by the USB block.
 680          *
 681          * Parameters:
 682          *  None
 683          *
 684          * Return:
 685          *  None
 686          *
 687          *******************************************************************************/
 688          void CyIMO_EnableDoubler(void) 
 689          {
 690   1          /* Set the FASTCLK_IMO_CR_PTR regigster's 4th bit */
 691   1          CY_LIB_FASTCLK_IMO_CR_REG |= CY_LIB_FASTCLK_IMO_DOUBLER;
 692   1      }
 693          
 694          
 695          /*******************************************************************************
 696          * Function Name: CyIMO_DisableDoubler
 697          ********************************************************************************
 698          *
 699          * Summary:
 700          *   Disables the IMO doubler.
 701          *
 702          * Parameters:
 703          *  None
 704          *
 705          * Return:
 706          *  None
 707          *
 708          *******************************************************************************/
 709          void CyIMO_DisableDoubler(void) 
 710          {
 711   1          CY_LIB_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_LIB_FASTCLK_IMO_DOUBLER));
 712   1      }
 713          
 714          
 715          /*******************************************************************************
 716          * Function Name: CyMasterClk_SetSource
 717          ********************************************************************************
 718          *
 719          * Summary:
 720          *  Sets the source of the master clock.
 721          *
 722          * Parameters:
 723          *   source: One of the four available Master clock sources.
 724          *     CY_MASTER_SOURCE_IMO
 725          *     CY_MASTER_SOURCE_PLL
 726          *     CY_MASTER_SOURCE_XTAL
 727          *     CY_MASTER_SOURCE_DSI
 728          *
 729          * Return:
 730          *  None
 731          *
 732          * Side Effects:
 733          *  The current source and the new source must both be running and stable before
 734          *  calling this function.
 735          *
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 13  

 736          *  If as result of this function execution the CPU clock frequency is increased
 737          *  then the number of clock cycles the cache will wait before it samples data
 738          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 739          *  with appropriate parameter. It can be optionally called if CPU clock
 740          *  frequency is lowered in order to improve CPU performance.
 741          *  See CyFlash_SetWaitCycles() description for more information.
 742          *
 743          *******************************************************************************/
 744          void CyMasterClk_SetSource(uint8 source) 
 745          {
 746   1          CY_LIB_CLKDIST_MSTR1_REG = (CY_LIB_CLKDIST_MSTR1_REG & MASTER_CLK_SRC_CLEAR) |
 747   1                                      (source & ((uint8)(~MASTER_CLK_SRC_CLEAR)));
 748   1      }
 749          
 750          
 751          /*******************************************************************************
 752          * Function Name: CyMasterClk_SetDivider
 753          ********************************************************************************
 754          *
 755          * Summary:
 756          *  Sets the divider value used to generate Master Clock.
 757          *
 758          * Parameters:
 759          *  uint8 divider:
 760          *   Valid range [0-255]. The clock will be divided by this value + 1.
 761          *   For example to divide by 2 this parameter should be set to 1.
 762          *
 763          * Return:
 764          *  None
 765          *
 766          * Side Effects:
 767          *  If as result of this function execution the CPU clock frequency is increased
 768          *  then the number of clock cycles the cache will wait before it samples data
 769          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 770          *  with appropriate parameter. It can be optionally called if CPU clock
 771          *  frequency is lowered in order to improve CPU performance.
 772          *  See CyFlash_SetWaitCycles() description for more information.
 773          *
 774          *  When changing the Master or Bus clock divider value from div-by-n to div-by-1
 775          *  the first clock cycle output after the div-by-1 can be up to 4 ns shorter
 776          *  than the final/expected div-by-1 period.
 777          *
 778          *******************************************************************************/
 779          void CyMasterClk_SetDivider(uint8 divider) 
 780          {
 781   1          CY_LIB_CLKDIST_MSTR0_REG = divider;
 782   1      }
 783          
 784          
 785          /*******************************************************************************
 786          * Function Name: CyBusClk_Internal_SetDivider
 787          ********************************************************************************
 788          *
 789          * Summary:
 790          *  Function used by CyBusClk_SetDivider(). For internal use only.
 791          *
 792          * Parameters:
 793          *   divider: Valid range [0-65535].
 794          *   The clock will be divided by this value + 1.
 795          *   For example to divide by 2 this parameter should be set to 1.
 796          *
 797          * Return:
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 14  

 798          *  None
 799          *
 800          *******************************************************************************/
 801          static void CyBusClk_Internal_SetDivider(uint16 divider)
 802          {
 803   1          /* Mask bits to enable shadow loads  */
 804   1          CY_LIB_CLKDIST_AMASK_REG &= CY_LIB_CLKDIST_AMASK_MASK;
 805   1          CY_LIB_CLKDIST_DMASK_REG  = CY_LIB_CLKDIST_DMASK_MASK;
 806   1      
 807   1          /* Enable mask bits to enable shadow loads */
 808   1          CY_LIB_CLKDIST_BCFG2_REG |= CY_LIB_CLKDIST_BCFG2_MASK;
 809   1      
 810   1          /* Update Shadow Divider Value Register with the new divider */
 811   1          CY_LIB_CLKDIST_WRK_LSB_REG = LO8(divider);
 812   1          CY_LIB_CLKDIST_WRK_MSB_REG = HI8(divider);
 813   1      
 814   1      
 815   1          /***************************************************************************
 816   1          * Copy shadow value defined in Shadow Divider Value Register
 817   1          * (CY_LIB_CLKDIST_WRK_LSB_REG and CY_LIB_CLKDIST_WRK_MSB_REG) to all
 818   1          * dividers selected in Analog and Digital Clock Mask Registers
 819   1          * (CY_LIB_CLKDIST_AMASK_REG and CY_LIB_CLKDIST_DMASK_REG).
 820   1          ***************************************************************************/
 821   1          CY_LIB_CLKDIST_LD_REG |= CY_LIB_CLKDIST_LD_LOAD;
 822   1      }
 823          
 824          
 825          /*******************************************************************************
 826          * Function Name: CyBusClk_SetDivider
 827          ********************************************************************************
 828          *
 829          * Summary:
 830          *  Sets the divider value used to generate Bus Clock.
 831          *
 832          * Parameters:
 833          *  divider: Valid range [0-65535]. The clock will be divided by this value + 1.
 834          *  For example to divide by 2 this parameter should be set to 1.
 835          *
 836          * Return:
 837          *  None
 838          *
 839          * Side Effects:
 840          *  If as result of this function execution the CPU clock frequency is increased
 841          *  then the number of clock cycles the cache will wait before it samples data
 842          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 843          *  with appropriate parameter. It can be optionally called if CPU clock
 844          *  frequency is lowered in order to improve CPU performance.
 845          *  See CyFlash_SetWaitCycles() description for more information.
 846          *
 847          *******************************************************************************/
 848          void CyBusClk_SetDivider(uint16 divider) 
 849          {
 850   1          uint8  masterClkDiv;
 851   1          uint16 busClkDiv;
 852   1          uint8 interruptState;
 853   1      
 854   1          interruptState = CyEnterCriticalSection();
 855   1      
 856   1          /* Work around to set the bus clock divider value */
 857   1          busClkDiv = (uint16)((uint16)CY_LIB_CLKDIST_BCFG_MSB_REG << 8u);
 858   1          busClkDiv |= CY_LIB_CLKDIST_BCFG_LSB_REG;
 859   1      
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 15  

 860   1          if ((divider == 0u) || (busClkDiv == 0u))
 861   1          {
 862   2              /* Save away the master clock divider value */
 863   2              masterClkDiv = CY_LIB_CLKDIST_MSTR0_REG;
 864   2      
 865   2              if (masterClkDiv < CY_LIB_CLKDIST_MASTERCLK_DIV)
 866   2              {
 867   3                  /* Set master clock divider to 7 */
 868   3                  CyMasterClk_SetDivider(CY_LIB_CLKDIST_MASTERCLK_DIV);
 869   3              }
 870   2      
 871   2              if (divider == 0u)
 872   2              {
 873   3                  /* Set the SSS bit and the divider register desired value */
 874   3                  CY_LIB_CLKDIST_BCFG2_REG |= CY_LIB_CLKDIST_BCFG2_SSS;
 875   3                  CyBusClk_Internal_SetDivider(divider);
 876   3              }
 877   2              else
 878   2              {
 879   3                  CyBusClk_Internal_SetDivider(divider);
 880   3                  CY_LIB_CLKDIST_BCFG2_REG &= ((uint8)(~CY_LIB_CLKDIST_BCFG2_SSS));
 881   3              }
 882   2      
 883   2              /* Restore the master clock */
 884   2              CyMasterClk_SetDivider(masterClkDiv);
 885   2          }
 886   1          else
 887   1          {
 888   2              CyBusClk_Internal_SetDivider(divider);
 889   2          }
 890   1      
 891   1          CyExitCriticalSection(interruptState);
 892   1      }
 893          
 894          
 895          #if(CY_PSOC3)
 896          
 897              /*******************************************************************************
 898              * Function Name: CyCpuClk_SetDivider
 899              ********************************************************************************
 900              *
 901              * Summary:
 902              *  Sets the divider value used to generate the CPU Clock. Only applicable for
 903              *  PSoC 3 parts.
 904              *
 905              * Parameters:
 906              *  divider: Valid range [0-15]. The clock will be divided by this value + 1.
 907              *  For example to divide by 2 this parameter should be set to 1.
 908              *
 909              * Return:
 910              *  None
 911              *
 912              * Side Effects:
 913              *  If as result of this function execution the CPU clock frequency is increased
 914              *  then the number of clock cycles the cache will wait before it samples data
 915              *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 916              *  with appropriate parameter. It can be optionally called if CPU clock
 917              *  frequency is lowered in order to improve CPU performance.
 918              *  See CyFlash_SetWaitCycles() description for more information.
 919              *
 920              *******************************************************************************/
 921              void CyCpuClk_SetDivider(uint8 divider) 
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 16  

 922              {
 923   1                  CY_LIB_CLKDIST_MSTR1_REG = (CY_LIB_CLKDIST_MSTR1_REG & CY_LIB_CLKDIST_MSTR1_DIV_MASK) |
 924   1                                      ((uint8)(divider << CY_LIB_CLKDIST_DIV_POSITION));
 925   1          }
 926          
 927          #endif /* (CY_PSOC3) */
 928          
 929          
 930          /*******************************************************************************
 931          * Function Name: CyUsbClk_SetSource
 932          ********************************************************************************
 933          *
 934          * Summary:
 935          *  Sets the source of the USB clock.
 936          *
 937          * Parameters:
 938          *  source: One of the four available USB clock sources
 939          *    CY_LIB_USB_CLK_IMO2X     - IMO 2x
 940          *    CY_LIB_USB_CLK_IMO       - IMO
 941          *    CY_LIB_USB_CLK_PLL       - PLL
 942          *    CY_LIB_USB_CLK_DSI       - DSI
 943          *
 944          * Return:
 945          *  None
 946          *
 947          *******************************************************************************/
 948          void CyUsbClk_SetSource(uint8 source) 
 949          {
 950   1          CY_LIB_CLKDIST_UCFG_REG = (CY_LIB_CLKDIST_UCFG_REG & ((uint8)(~CY_LIB_CLKDIST_UCFG_SRC_SEL_MASK))) |
 951   1                              (CY_LIB_CLKDIST_UCFG_SRC_SEL_MASK & source);
 952   1      }
 953          
 954          
 955          /*******************************************************************************
 956          * Function Name: CyILO_Start1K
 957          ********************************************************************************
 958          *
 959          * Summary:
 960          *  Enables the ILO 1 KHz oscillator.
 961          *
 962          *  Note The ILO 1 KHz oscillator is always enabled by default, regardless of the
 963          *  selection in the Clock Editor. Therefore, this API is only needed if the
 964          *  oscillator was turned off manually.
 965          *
 966          * Parameters:
 967          *  None
 968          *
 969          * Return:
 970          *  None
 971          *
 972          *******************************************************************************/
 973          void CyILO_Start1K(void) 
 974          {
 975   1          /* Set the bit 1 of ILO RS */
 976   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_1KHZ;
 977   1      }
 978          
 979          
 980          /*******************************************************************************
 981          * Function Name: CyILO_Stop1K
 982          ********************************************************************************
 983          *
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 17  

 984          * Summary:
 985          *  Disables the ILO 1 KHz oscillator.
 986          *
 987          *  Note The ILO 1 KHz oscillator must be enabled if Sleep or Hibernate low power
 988          *  mode APIs are expected to be used. For more information, refer to the Power
 989          *  Management section of this document.
 990          *
 991          * Parameters:
 992          *  None
 993          *
 994          * Return:
 995          *  None
 996          *
 997          * Side Effects:
 998          *  PSoC5: Stopping the ILO 1 kHz could break the active WDT functionality.
 999          *
1000          *******************************************************************************/
1001          void CyILO_Stop1K(void) 
1002          {
1003   1          /* Clear the bit 1 of ILO RS */
1004   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_1KHZ));
1005   1      }
1006          
1007          
1008          /*******************************************************************************
1009          * Function Name: CyILO_Start100K
1010          ********************************************************************************
1011          *
1012          * Summary:
1013          *  Enables the ILO 100 KHz oscillator.
1014          *
1015          * Parameters:
1016          *  None
1017          *
1018          * Return:
1019          *  None
1020          *
1021          *******************************************************************************/
1022          void CyILO_Start100K(void) 
1023          {
1024   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ;
1025   1      }
1026          
1027          
1028          /*******************************************************************************
1029          * Function Name: CyILO_Stop100K
1030          ********************************************************************************
1031          *
1032          * Summary:
1033          *  Disables the ILO 100 KHz oscillator.
1034          *
1035          * Parameters:
1036          *  None
1037          *
1038          * Return:
1039          *  None
1040          *
1041          *******************************************************************************/
1042          void CyILO_Stop100K(void) 
1043          {
1044   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ));
1045   1      }
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 18  

1046          
1047          
1048          /*******************************************************************************
1049          * Function Name: CyILO_Enable33K
1050          ********************************************************************************
1051          *
1052          * Summary:
1053          *  Enables the ILO 33 KHz divider.
1054          *
1055          *  Note that the 33 KHz clock is generated from the 100 KHz oscillator,
1056          *  so it must also be running in order to generate the 33 KHz output.
1057          *
1058          * Parameters:
1059          *  None
1060          *
1061          * Return:
1062          *  None
1063          *
1064          *******************************************************************************/
1065          void CyILO_Enable33K(void) 
1066          {
1067   1          /* Set the bit 5 of ILO RS */
1068   1          CY_LIB_SLOWCLK_ILO_CR0_REG |= CY_LIB_SLOWCLK_ILO_CR0_EN_33KHZ;
1069   1      }
1070          
1071          
1072          /*******************************************************************************
1073          * Function Name: CyILO_Disable33K
1074          ********************************************************************************
1075          *
1076          * Summary:
1077          *  Disables the ILO 33 KHz divider.
1078          *
1079          *  Note that the 33 KHz clock is generated from the 100 KHz oscillator, but this
1080          *  API does not disable the 100 KHz clock.
1081          *
1082          * Parameters:
1083          *  None
1084          *
1085          * Return:
1086          *  None
1087          *
1088          *******************************************************************************/
1089          void CyILO_Disable33K(void) 
1090          {
1091   1          CY_LIB_SLOWCLK_ILO_CR0_REG &= ((uint8)(~CY_LIB_SLOWCLK_ILO_CR0_EN_33KHZ));
1092   1      }
1093          
1094          
1095          /*******************************************************************************
1096          * Function Name: CyILO_SetSource
1097          ********************************************************************************
1098          *
1099          * Summary:
1100          *  Sets the source of the clock output from the ILO block.
1101          *
1102          * Parameters:
1103          *  source: One of the three available ILO output sources
1104          *       Value        Define                Source
1105          *       0            CY_ILO_SOURCE_100K    ILO 100 KHz
1106          *       1            CY_ILO_SOURCE_33K     ILO 33 KHz
1107          *       2            CY_ILO_SOURCE_1K      ILO 1 KHz
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 19  

1108          *
1109          * Return:
1110          *  None
1111          *
1112          *******************************************************************************/
1113          void CyILO_SetSource(uint8 source) 
1114          {
1115   1          CY_LIB_CLKDIST_CR_REG = (CY_LIB_CLKDIST_CR_REG & CY_ILO_SOURCE_BITS_CLEAR) |
1116   1                          (((uint8) (source << 2u)) & ((uint8)(~CY_ILO_SOURCE_BITS_CLEAR)));
1117   1      }
1118          
1119          
1120          /*******************************************************************************
1121          * Function Name: CyILO_SetPowerMode
1122          ********************************************************************************
1123          *
1124          * Summary:
1125          *  Sets the power mode used by the ILO during power down. Allows for lower power
1126          *  down power usage resulting in a slower startup time.
1127          *
1128          * Parameters:
1129          *  uint8 mode
1130          *   CY_ILO_FAST_START - Faster start-up, internal bias left on when powered down
1131          *   CY_ILO_SLOW_START - Slower start-up, internal bias off when powered down
1132          *
1133          * Return:
1134          *   Prevous power mode state.
1135          *
1136          *******************************************************************************/
1137          uint8 CyILO_SetPowerMode(uint8 mode) 
1138          {
1139   1          uint8 state;
1140   1      
1141   1          /* Get current state. */
1142   1          state = CY_LIB_SLOWCLK_ILO_CR0_REG;
1143   1      
1144   1          /* Set the the oscillator power mode. */
1145   1          if(mode != CY_ILO_FAST_START)
1146   1          {
1147   2              CY_LIB_SLOWCLK_ILO_CR0_REG = (state | CY_ILO_CONTROL_PD_MODE);
1148   2          }
1149   1          else
1150   1          {
1151   2              CY_LIB_SLOWCLK_ILO_CR0_REG = (state & ((uint8)(~CY_ILO_CONTROL_PD_MODE)));
1152   2          }
1153   1      
1154   1          /* Return the old mode. */
1155   1          return ((state & CY_ILO_CONTROL_PD_MODE) >> CY_ILO_CONTROL_PD_POSITION);
1156   1      }
1157          
1158          
1159          /*******************************************************************************
1160          * Function Name: CyXTAL_32KHZ_Start
1161          ********************************************************************************
1162          *
1163          * Summary:
1164          *  Enables the 32 KHz Crystal Oscillator.
1165          *
1166          * Parameters:
1167          *  None
1168          *
1169          * Return:
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 20  

1170          *  None
1171          *
1172          *******************************************************************************/
1173          void CyXTAL_32KHZ_Start(void) 
1174          {
1175   1          volatile uint16 i;
1176   1      
1177   1          CY_CLK_XTAL32_TST_REG = CY_CLK_XTAL32_TST_DEFAULT;
1178   1          CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_STARTUP;
1179   1          CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1180   1                                      CY_CLK_XTAL32_CFG_LP_DEFAULT;
1181   1      
1182   1          #if(CY_PSOC3)
1183   1              CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_PDBEN;
1184   1          #endif  /* (CY_PSOC3) */
1185   1      
1186   1          /* Enable operation of the 32K Crystal Oscillator */
1187   1          CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_EN;
1188   1      
1189   1          for (i = 1000u; i > 0u; i--)
1190   1          {
1191   2              if(0u != (CyXTAL_32KHZ_ReadStatus() & CY_XTAL32K_ANA_STAT))
1192   2              {
1193   3                  /* Ready - switch to the hign power mode */
1194   3                  (void) CyXTAL_32KHZ_SetPowerMode(0u);
1195   3      
1196   3                  break;
1197   3              }
1198   2              CyDelayUs(1u);
1199   2          }
1200   1      }
1201          
1202          
1203          /*******************************************************************************
1204          * Function Name: CyXTAL_32KHZ_Stop
1205          ********************************************************************************
1206          *
1207          * Summary:
1208          *  Disables the 32KHz Crystal Oscillator.
1209          *
1210          * Parameters:
1211          *  None
1212          *
1213          * Return:
1214          *  None
1215          *
1216          *******************************************************************************/
1217          void CyXTAL_32KHZ_Stop(void) 
1218          {
1219   1          CY_CLK_XTAL32_TST_REG  = CY_CLK_XTAL32_TST_DEFAULT;
1220   1          CY_CLK_XTAL32_TR_REG   = CY_CLK_XTAL32_TR_POWERDOWN;
1221   1          CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1222   1                                   CY_CLK_XTAL32_CFG_LP_DEFAULT;
1223   1          CY_CLK_XTAL32_CR_REG &= ((uint8)(~(CY_CLK_XTAL32_CR_EN | CY_CLK_XTAL32_CR_LPM)));
1224   1      
1225   1          #if(CY_PSOC3)
1226   1              CY_CLK_XTAL32_CR_REG &= ((uint8)(~CY_CLK_XTAL32_CR_PDBEN));
1227   1          #endif  /* (CY_PSOC3) */
1228   1      }
1229          
1230          
1231          /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 21  

1232          * Function Name: CyXTAL_32KHZ_ReadStatus
1233          ********************************************************************************
1234          *
1235          * Summary:
1236          *  Returns status of the 32 KHz oscillator.
1237          *
1238          * Parameters:
1239          *  None
1240          *
1241          * Return:
1242          *  Value     Define                    Source
1243          *  20        CY_XTAL32K_ANA_STAT       Analog measurement
1244          *                                       1: Stable
1245          *                                       0: Not stable
1246          *
1247          *******************************************************************************/
1248          uint8 CyXTAL_32KHZ_ReadStatus(void) 
1249          {
1250   1          return(CY_CLK_XTAL32_CR_REG & CY_XTAL32K_ANA_STAT);
1251   1      }
1252          
1253          
1254          /*******************************************************************************
1255          * Function Name: CyXTAL_32KHZ_SetPowerMode
1256          ********************************************************************************
1257          *
1258          * Summary:
1259          *  Sets the power mode for the 32 KHz oscillator used during sleep mode.
1260          *  Allows for lower power during sleep when there are fewer sources of noise.
1261          *  During active mode the oscillator is always run in high power mode.
1262          *
1263          * Parameters:
1264          *  uint8 mode
1265          *       0: High power mode
1266          *       1: Low power mode during sleep
1267          *
1268          * Return:
1269          *  Previous power mode.
1270          *
1271          *******************************************************************************/
1272          uint8 CyXTAL_32KHZ_SetPowerMode(uint8 mode) 
1273          {
1274   1          uint8 state = (0u != (CY_CLK_XTAL32_CR_REG & CY_CLK_XTAL32_CR_LPM)) ? 1u : 0u;
1275   1      
1276   1          CY_CLK_XTAL32_TST_REG = CY_CLK_XTAL32_TST_DEFAULT;
1277   1      
1278   1          if(1u == mode)
1279   1          {
1280   2              /* Low power mode during Sleep */
1281   2              CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_LOW_POWER;
1282   2              CyDelayUs(10u);
1283   2              CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
1284   2                                      CY_CLK_XTAL32_CFG_LP_LOWPOWER;
1285   2              CyDelayUs(20u);
1286   2              CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_LPM;
1287   2          }
1288   1          else
1289   1          {
1290   2              /* High power mode */
1291   2              CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_HIGH_POWER;
1292   2              CyDelayUs(10u);
1293   2              CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ((uint8)(~CY_CLK_XTAL32_CFG_LP_MASK))) |
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 22  

1294   2                                      CY_CLK_XTAL32_CFG_LP_DEFAULT;
1295   2              CY_CLK_XTAL32_CR_REG &= ((uint8)(~CY_CLK_XTAL32_CR_LPM));
1296   2          }
1297   1      
1298   1          return(state);
1299   1      }
1300          
1301          
1302          /*******************************************************************************
1303          * Function Name: CyXTAL_Start
1304          ********************************************************************************
1305          *
1306          * Summary:
1307          *  Enables the megahertz crystal.
1308          *
1309          *  PSoC 3:
1310          *  Waits until the XERR bit is low (no error) for a millisecond or until the
1311          *  number of milliseconds specified by the wait parameter has expired.
1312          *
1313          * Parameters:
1314          *   wait: Valid range [0-255].
1315          *   This is the timeout value in milliseconds.
1316          *   The appropriate value is crystal specific.
1317          *
1318          * Return:
1319          *   CYRET_SUCCESS - Completed successfully
1320          *   CYRET_TIMEOUT - Timeout occurred without detecting a low value on XERR.
1321          *
1322          * Side Effects and Restrictions:
1323          *  If wait is enabled (non-zero wait). Uses the Fast Timewheel to time the wait.
1324          *  Any other use of the Fast Timewheel (FTW) will be stopped during the period
1325          *  of this function and then restored.
1326          *
1327          *  Uses the 100KHz ILO.  If not enabled, this function will enable the 100KHz
1328          *  ILO for the period of this function. No changes to the setup of the ILO,
1329          *  Fast Timewheel, Central Timewheel or Once Per Second interrupt may be made
1330          *  by interrupt routines during the period of this function.
1331          *
1332          *  The current operation of the ILO, Central Timewheel and Once Per Second
1333          *  interrupt are maintained during the operation of this function provided the
1334          *  reading of the Power Manager Interrupt Status Register is only done using the
1335          *  CyPmReadStatus() function.
1336          *
1337          *******************************************************************************/
1338          cystatus CyXTAL_Start(uint8 wait) 
1339          {
1340   1          cystatus status = CYRET_SUCCESS;
1341   1          volatile uint8  timeout = wait;
1342   1          volatile uint8 count;
1343   1          uint8 iloEnableState;
1344   1          uint8 pmTwCfg0Tmp;
1345   1          uint8 pmTwCfg2Tmp;
1346   1      
1347   1      
1348   1          /* Enables the MHz crystal oscillator circuit  */
1349   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_ENABLE;
1350   1      
1351   1      
1352   1          if(wait > 0u)
1353   1          {
1354   2              /* Save 100 KHz ILO, FTW interval, enable and interrupt enable */
1355   2              iloEnableState = CY_LIB_SLOWCLK_ILO_CR0_REG;
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 23  

1356   2              pmTwCfg0Tmp = CY_LIB_PM_TW_CFG0_REG;
1357   2              pmTwCfg2Tmp = CY_LIB_PM_TW_CFG2_REG;
1358   2      
1359   2              /* Set 250 us interval */
1360   2              CyPmFtwSetInterval(CY_CLK_XMHZ_FTW_INTERVAL);
1361   2              status = CYRET_TIMEOUT;
1362   2      
1363   2      
1364   2              for( ; timeout > 0u; timeout--)
1365   2              {
1366   3                  /* Read XERR bit to clear it */
1367   3                  (void) CY_CLK_XMHZ_CSR_REG;
1368   3      
1369   3                  /* Wait for a millisecond - 4 x 250 us */
1370   3                  for(count = 4u; count > 0u; count--)
1371   3                  {
1372   4                      while(0u == (CY_PM_FTW_INT & CyPmReadStatus(CY_PM_FTW_INT)))
1373   4                      {
1374   5                          /* Wait for the FTW interrupt event */
1375   5                      }
1376   4                  }
1377   3      
1378   3      
1379   3                  /*******************************************************************
1380   3                  * High output indicates oscillator failure.
1381   3                  * Only can be used after start-up interval (1 ms) is completed.
1382   3                  *******************************************************************/
1383   3                  if(0u == (CY_CLK_XMHZ_CSR_REG & CY_CLK_XMHZ_CSR_XERR))
1384   3                  {
1385   4                      status = CYRET_SUCCESS;
1386   4                      break;
1387   4                  }
1388   3              }
1389   2      
1390   2      
1391   2              /* Restore 100 KHz ILO, FTW interval, enable and interrupt enable */
1392   2              if(0u == (iloEnableState & CY_LIB_SLOWCLK_ILO_CR0_EN_100KHZ))
1393   2              {
1394   3                  CyILO_Stop100K();
1395   3              }
1396   2              CY_LIB_PM_TW_CFG0_REG = pmTwCfg0Tmp;
1397   2              CY_LIB_PM_TW_CFG2_REG = pmTwCfg2Tmp;
1398   2          }
1399   1      
1400   1          return(status);
1401   1      }
1402          
1403          
1404          /*******************************************************************************
1405          * Function Name: CyXTAL_Stop
1406          ********************************************************************************
1407          *
1408          * Summary:
1409          *  Disables the megahertz crystal oscillator.
1410          *
1411          * Parameters:
1412          *  None
1413          *
1414          * Return:
1415          *  None
1416          *
1417          *******************************************************************************/
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 24  

1418          void CyXTAL_Stop(void) 
1419          {
1420   1          /* Disable the the oscillator. */
1421   1          FASTCLK_XMHZ_CSR &= ((uint8)(~XMHZ_CONTROL_ENABLE));
1422   1      }
1423          
1424          
1425          /*******************************************************************************
1426          * Function Name: CyXTAL_EnableErrStatus
1427          ********************************************************************************
1428          *
1429          * Summary:
1430          *  Enables the generation of the XERR status bit for the megahertz crystal.
1431          *  This function is not available for PSoC5.
1432          *
1433          * Parameters:
1434          *  None
1435          *
1436          * Return:
1437          *  None
1438          *
1439          *******************************************************************************/
1440          void CyXTAL_EnableErrStatus(void) 
1441          {
1442   1          /* If oscillator has insufficient amplitude, XERR bit will be high. */
1443   1          CY_CLK_XMHZ_CSR_REG &= ((uint8)(~CY_CLK_XMHZ_CSR_XFB));
1444   1      }
1445          
1446          
1447          /*******************************************************************************
1448          * Function Name: CyXTAL_DisableErrStatus
1449          ********************************************************************************
1450          *
1451          * Summary:
1452          *  Disables the generation of the XERR status bit for the megahertz crystal.
1453          *  This function is not available for PSoC5.
1454          *
1455          * Parameters:
1456          *  None
1457          *
1458          * Return:
1459          *  None
1460          *
1461          *******************************************************************************/
1462          void CyXTAL_DisableErrStatus(void) 
1463          {
1464   1          /* If oscillator has insufficient amplitude, XERR bit will be high. */
1465   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_XFB;
1466   1      }
1467          
1468          
1469          /*******************************************************************************
1470          * Function Name: CyXTAL_ReadStatus
1471          ********************************************************************************
1472          *
1473          * Summary:
1474          *  Reads the XERR status bit for the megahertz crystal. This status bit is a
1475          *  sticky clear on read value. This function is not available for PSoC5.
1476          *
1477          * Parameters:
1478          *  None
1479          *
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 25  

1480          * Return:
1481          *   Status
1482          *    0: No error
1483          *    1: Error
1484          *
1485          *******************************************************************************/
1486          uint8 CyXTAL_ReadStatus(void) 
1487          {
1488   1          /***************************************************************************
1489   1          * High output indicates oscillator failure. Only use this after start-up
1490   1          * interval is completed. This can be used for status and failure recovery.
1491   1          ***************************************************************************/
1492   1          return((0u != (CY_CLK_XMHZ_CSR_REG & CY_CLK_XMHZ_CSR_XERR)) ? 1u : 0u);
1493   1      }
1494          
1495          
1496          /*******************************************************************************
1497          * Function Name: CyXTAL_EnableFaultRecovery
1498          ********************************************************************************
1499          *
1500          * Summary:
1501          *  Enables the fault recovery circuit which will switch to the IMO in the case
1502          *  of a fault in the megahertz crystal circuit. The crystal must be up and
1503          *  running with the XERR bit at 0, before calling this function to prevent
1504          *  immediate fault switchover. This function is not available for PSoC5.
1505          *
1506          * Parameters:
1507          *  None
1508          *
1509          * Return:
1510          *  None
1511          *
1512          *******************************************************************************/
1513          void CyXTAL_EnableFaultRecovery(void) 
1514          {
1515   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_XPROT;
1516   1      }
1517          
1518          
1519          /*******************************************************************************
1520          * Function Name: CyXTAL_DisableFaultRecovery
1521          ********************************************************************************
1522          *
1523          * Summary:
1524          *  Disables the fault recovery circuit which will switch to the IMO in the case
1525          *  of a fault in the megahertz crystal circuit. This function is not available
1526          *  for PSoC5.
1527          *
1528          * Parameters:
1529          *  None
1530          *
1531          * Return:
1532          *  None
1533          *
1534          *******************************************************************************/
1535          void CyXTAL_DisableFaultRecovery(void) 
1536          {
1537   1          CY_CLK_XMHZ_CSR_REG &= ((uint8)(~CY_CLK_XMHZ_CSR_XPROT));
1538   1      }
1539          
1540          
1541          /*******************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 26  

1542          * Function Name: CyXTAL_SetStartup
1543          ********************************************************************************
1544          *
1545          * Summary:
1546          *  Sets the startup settings for the crystal. Logic model outputs a frequency
1547          *  (setting + 4) MHz when enabled.
1548          *
1549          *  This is artificial as the actual frequency is determined by an attached
1550          *  external crystal.
1551          *
1552          * Parameters:
1553          *  setting: Valid range [0-31].
1554          *   Value is dependent on the frequency and quality of the crystal being used.
1555          *   Refer to the device TRM and datasheet for more information.
1556          *
1557          * Return:
1558          *  None
1559          *
1560          *******************************************************************************/
1561          void CyXTAL_SetStartup(uint8 setting) 
1562          {
1563   1          CY_CLK_XMHZ_CFG0_REG = (CY_CLK_XMHZ_CFG0_REG & ((uint8)(~CY_CLK_XMHZ_CFG0_XCFG_MASK))) |
1564   1                                 (setting & CY_CLK_XMHZ_CFG0_XCFG_MASK);
1565   1      }
1566          
1567          
1568          
1569          /*******************************************************************************
1570          * Function Name: CyXTAL_SetFbVoltage
1571          ********************************************************************************
1572          *
1573          * Summary:
1574          *  Sets the feedback reference voltage to use for the crystal circuit.
1575          *  This function is only available for PSoC3 and PSoC 5LP.
1576          *
1577          * Parameters:
1578          *  setting: Valid range [0-15].
1579          *  Refer to the device TRM and datasheet for more information.
1580          *
1581          * Return:
1582          *  None
1583          *
1584          *******************************************************************************/
1585          void CyXTAL_SetFbVoltage(uint8 setting) 
1586          {
1587   1          CY_CLK_XMHZ_CFG1_REG = ((CY_CLK_XMHZ_CFG1_REG & ((uint8)(~CY_CLK_XMHZ_CFG1_VREF_FB_MASK))) |
1588   1                                  (setting & CY_CLK_XMHZ_CFG1_VREF_FB_MASK));
1589   1      }
1590          
1591          
1592          /*******************************************************************************
1593          * Function Name: CyXTAL_SetWdVoltage
1594          ********************************************************************************
1595          *
1596          * Summary:
1597          *  Sets the reference voltage used by the watchdog to detect a failure in the
1598          *  crystal circuit. This function is only available for PSoC3 and PSoC 5LP.
1599          *
1600          * Parameters:
1601          *  setting: Valid range [0-7].
1602          *  Refer to the device TRM and datasheet for more information.
1603          *
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 27  

1604          * Return:
1605          *  None
1606          *
1607          *******************************************************************************/
1608          void CyXTAL_SetWdVoltage(uint8 setting) 
1609          {
1610   1          CY_CLK_XMHZ_CFG1_REG = ((CY_CLK_XMHZ_CFG1_REG & ((uint8)(~CY_CLK_XMHZ_CFG1_VREF_WD_MASK))) |
1611   1                                  (((uint8)(setting << 4u)) & CY_CLK_XMHZ_CFG1_VREF_WD_MASK));
1612   1      }
1613          
1614          
1615          /*******************************************************************************
1616          * Function Name: CyHalt
1617          ********************************************************************************
1618          *
1619          * Summary:
1620          *  Halts the CPU.
1621          *
1622          * Parameters:
1623          *  uint8 reason: Value to be used during debugging.
1624          *
1625          * Return:
1626          *  None
1627          *
1628          *******************************************************************************/
1629          void CyHalt(uint8 reason) CYREENTRANT
1630          {
1631   1          if(0u != reason)
1632   1          {
1633   2              /* To remove unreferenced local variable warning */
1634   2          }
1635   1      
1636   1          #if defined (__ARMCC_VERSION)
                      __breakpoint(0x0);
                  #elif defined(__GNUC__) || defined (__ICCARM__)
                      __asm("    bkpt    1");
                  #elif defined(__C51__)
1641   1              CYDEV_HALT_CPU;
1642   1          #endif  /* (__ARMCC_VERSION) */
1643   1      }
1644          
1645          
1646          /*******************************************************************************
1647          * Function Name: CySoftwareReset
1648          ********************************************************************************
1649          *
1650          * Summary:
1651          *  Forces a software reset of the device.
1652          *
1653          * Parameters:
1654          *  None
1655          *
1656          * Return:
1657          *  None
1658          *
1659          *******************************************************************************/
1660          void CySoftwareReset(void) 
1661          {
1662   1          CY_LIB_RESET_CR2_REG |= CY_LIB_RESET_CR2_RESET;
1663   1      }
1664          
1665          
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 28  

1666          /*******************************************************************************
1667          * Function Name: CyDelay
1668          ********************************************************************************
1669          *
1670          * Summary:
1671          *  Blocks for milliseconds.
1672          *
1673          *  Note:
1674          *  CyDelay has been implemented with the instruction cache assumed enabled. When
1675          *  instruction cache is disabled on PSoC5, CyDelay will be two times larger. For
1676          *  example, with instruction cache disabled CyDelay(100) would result in about
1677          *  200 ms delay instead of 100 ms.
1678          *
1679          * Parameters:
1680          *  milliseconds: number of milliseconds to delay.
1681          *
1682          * Return:
1683          *   None
1684          *
1685          *******************************************************************************/
1686          void CyDelay(uint32 milliseconds) CYREENTRANT
1687          {
1688   1          while (milliseconds > 32768u)
1689   1          {
1690   2              /***********************************************************************
1691   2              * This loop prevents overflow.At 100MHz, milliseconds * delay_freq_khz
1692   2              * overflows at about 42 seconds.
1693   2              ***********************************************************************/
1694   2              CyDelayCycles(cydelay_32k_ms);
1695   2              milliseconds = ((uint32)(milliseconds - 32768u));
1696   2          }
1697   1      
1698   1          CyDelayCycles(milliseconds * cydelay_freq_khz);
1699   1      }
1700          
1701          
1702          #if(!CY_PSOC3)
              
                  /* For PSoC3 devices function is defined in CyBootAsmKeil.a51 file */
              
                  /*******************************************************************************
                  * Function Name: CyDelayUs
                  ********************************************************************************
                  *
                  * Summary:
                  *  Blocks for microseconds.
                  *
                  *  Note:
                  *   CyDelay has been implemented with the instruction cache assumed enabled.
                  *   When instruction cache is disabled on PSoC5, CyDelayUs will be two times
                  *   larger. Ex: With instruction cache disabled CyDelayUs(100) would result
                  *   in about 200us delay instead of 100us.
                  *
                  * Parameters:
                  *  uint16 microseconds: number of microseconds to delay.
                  *
                  * Return:
                  *  None
                  *
                  * Side Effects:
                  *  CyDelayUS has been implemented with the instruction cache assumed enabled.
                  *  When instruction cache is disabled on PSoC 5, CyDelayUs will be two times
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 29  

                  *  larger. For example, with instruction cache disabled CyDelayUs(100) would
                  *  result in about 200 us delay instead of 100 us.
                  *
                  *  If the bus clock frequency is a small non-integer number, the actual delay
                  *  can be up to twice as long as the nominal value. The actual delay cannot be
                  *  shorter than the nominal one.
                  *******************************************************************************/
                  void CyDelayUs(uint16 microseconds) CYREENTRANT
                  {
                      CyDelayCycles((uint32)microseconds * cydelay_freq_mhz);
                  }
              
              #endif  /* (!CY_PSOC3) */
1741          
1742          
1743          /*******************************************************************************
1744          * Function Name: CyDelayFreq
1745          ********************************************************************************
1746          *
1747          * Summary:
1748          *  Sets clock frequency for CyDelay.
1749          *
1750          * Parameters:
1751          *  freq: Frequency of bus clock in Hertz.
1752          *
1753          * Return:
1754          *  None
1755          *
1756          *******************************************************************************/
1757          void CyDelayFreq(uint32 freq) CYREENTRANT
1758          {
1759   1          if (freq != 0u)
1760   1          {
1761   2              cydelay_freq_hz = freq;
1762   2          }
1763   1          else
1764   1          {
1765   2              cydelay_freq_hz = BCLK__BUS_CLK__HZ;
1766   2          }
1767   1      
1768   1          cydelay_freq_mhz = (uint8)((cydelay_freq_hz + 999999u) / 1000000u);
1769   1          cydelay_freq_khz = (cydelay_freq_hz + 999u) / 1000u;
1770   1          cydelay_32k_ms   = 32768u * cydelay_freq_khz;
1771   1      }
1772          
1773          
1774          /*******************************************************************************
1775          * Function Name: CyWdtStart
1776          ********************************************************************************
1777          *
1778          * Summary:
1779          *  Enables the watchdog timer.
1780          *
1781          *  The timer is configured for the specified count interval, the central
1782          *  timewheel is cleared, the setting for low power mode is configured and the
1783          *  watchdog timer is enabled.
1784          *
1785          *  Once enabled the watchdog cannot be disabled. The watchdog counts each time
1786          *  the Central Time Wheel (CTW) reaches the period specified. The watchdog must
1787          *  be cleared using the CyWdtClear() function before three ticks of the watchdog
1788          *  timer occur. The CTW is free running, so this will occur after between 2 and
1789          *  3 timer periods elapse.
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 30  

1790          *
1791          *  PSoC5: The watchdog timer should not be used during sleep modes. Since the
1792          *  WDT cannot be disabled after it is enabled, the WDT timeout period can be
1793          *  set to be greater than the sleep wakeup period, then feed the dog on each
1794          *  wakeup from Sleep.
1795          *
1796          * Parameters:
1797          *  ticks: One of the four available timer periods. Once WDT enabled, the
1798             interval cannot be changed.
1799          *         CYWDT_2_TICKS     -     4 - 6     ms
1800          *         CYWDT_16_TICKS    -    32 - 48    ms
1801          *         CYWDT_128_TICKS   -   256 - 384   ms
1802          *         CYWDT_1024_TICKS  - 2.048 - 3.072 s
1803          *
1804          *  lpMode: Low power mode configuration. This parameter is ignored for PSoC 5.
1805          *          The WDT always acts as if CYWDT_LPMODE_NOCHANGE is passed.
1806          *
1807          *          CYWDT_LPMODE_NOCHANGE - No Change
1808          *          CYWDT_LPMODE_MAXINTER - Switch to longest timer mode during low power
1809          *                                 mode
1810          *          CYWDT_LPMODE_DISABLED - Disable WDT during low power mode
1811          *
1812          * Return:
1813          *  None
1814          *
1815          * Side Effects:
1816          *  PSoC5: The ILO 1 KHz must be enabled for proper WDT operation. Stopping the
1817          *  ILO 1 kHz could break the active WDT functionality.
1818          *
1819          *******************************************************************************/
1820          void CyWdtStart(uint8 ticks, uint8 lpMode) 
1821          {
1822   1          /* Set WDT interval */
1823   1          CY_WDT_CFG_REG = (CY_WDT_CFG_REG & ((uint8)(~CY_WDT_CFG_INTERVAL_MASK))) | (ticks & CY_WDT_CFG_INTERVA
             -L_MASK);
1824   1      
1825   1          /* Reset CTW to ensure that first watchdog period is full */
1826   1          CY_WDT_CFG_REG |= CY_WDT_CFG_CTW_RESET;
1827   1          CY_WDT_CFG_REG &= ((uint8)(~CY_WDT_CFG_CTW_RESET));
1828   1      
1829   1          /* Setting the low power mode */
1830   1          CY_WDT_CFG_REG = (((uint8)(lpMode << CY_WDT_CFG_LPMODE_SHIFT)) & CY_WDT_CFG_LPMODE_MASK) |
1831   1                             (CY_WDT_CFG_REG & ((uint8)(~CY_WDT_CFG_LPMODE_MASK)));
1832   1      
1833   1          /* Enables the watchdog reset */
1834   1          CY_WDT_CFG_REG |= CY_WDT_CFG_WDR_EN;
1835   1      }
1836          
1837          
1838          /*******************************************************************************
1839          * Function Name: CyWdtClear
1840          ********************************************************************************
1841          *
1842          * Summary:
1843          *  Clears (feeds) the watchdog timer.
1844          *
1845          * Parameters:
1846          *  None
1847          *
1848          * Return:
1849          *  None
1850          *
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 31  

1851          *******************************************************************************/
1852          void CyWdtClear(void) 
1853          {
1854   1          CY_WDT_CR_REG = CY_WDT_CR_FEED;
1855   1      }
1856          
1857          
1858          
1859          /*******************************************************************************
1860          * Function Name: CyVdLvDigitEnable
1861          ********************************************************************************
1862          *
1863          * Summary:
1864          *  Enables the digital low voltage monitors to generate interrupt on Vddd
1865          *   archives specified threshold and optionally resets device.
1866          *
1867          * Parameters:
1868          *  reset: Option to reset device at a specified Vddd threshold:
1869          *           0 - Device is not reset.
1870          *           1 - Device is reset.
1871          *
1872          *  threshold: Sets the trip level for the voltage monitor.
1873          *  Values from 1.70 V to 5.45 V are accepted with the approximately 250 mV
1874          *  interval.
1875          *
1876          * Return:
1877          *  None
1878          *
1879          *******************************************************************************/
1880          void CyVdLvDigitEnable(uint8 reset, uint8 threshold) 
1881          {
1882   1          *CY_INT_CLEAR_PTR = 0x01u;
1883   1      
1884   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1885   1      
1886   1          CY_VD_LVI_TRIP_REG = (threshold & CY_VD_LVI_TRIP_LVID_MASK) |
1887   1                                  (CY_VD_LVI_TRIP_REG & ((uint8)(~CY_VD_LVI_TRIP_LVID_MASK)));
1888   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_LVID_EN;
1889   1      
1890   1          /* Timeout to eliminate glitches on the LVI/HVI when enabling */
1891   1          CyDelayUs(1u);
1892   1      
1893   1          (void)CY_VD_PERSISTENT_STATUS_REG;
1894   1      
1895   1          if(0u != reset)
1896   1          {
1897   2              CY_VD_PRES_CONTROL_REG |= CY_VD_PRESD_EN;
1898   2          }
1899   1          else
1900   1          {
1901   2              CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1902   2          }
1903   1      
1904   1          *CY_INT_CLR_PEND_PTR = 0x01u;
1905   1          *CY_INT_ENABLE_PTR   = 0x01u;
1906   1      }
1907          
1908          
1909          /*******************************************************************************
1910          * Function Name: CyVdLvAnalogEnable
1911          ********************************************************************************
1912          *
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 32  

1913          * Summary:
1914          *  Enables the analog low voltage monitors to generate interrupt on Vdda
1915          *   archives specified threshold and optionally resets device.
1916          *
1917          * Parameters:
1918          *  reset: Option to reset device at a specified Vdda threshold:
1919          *           0 - Device is not reset.
1920          *           1 - Device is reset.
1921          *
1922          *  threshold: Sets the trip level for the voltage monitor.
1923          *  Values from 1.70 V to 5.45 V are accepted with the approximately 250 mV
1924          *  interval.
1925          *
1926          * Return:
1927          *  None
1928          *
1929          *******************************************************************************/
1930          void CyVdLvAnalogEnable(uint8 reset, uint8 threshold) 
1931          {
1932   1          *CY_INT_CLEAR_PTR = 0x01u;
1933   1      
1934   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
1935   1      
1936   1          CY_VD_LVI_TRIP_REG = ((uint8)(threshold << 4u)) | (CY_VD_LVI_TRIP_REG & 0x0Fu);
1937   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_LVIA_EN;
1938   1      
1939   1          /* Timeout to eliminate glitches on the LVI/HVI when enabling */
1940   1          CyDelayUs(1u);
1941   1      
1942   1          (void)CY_VD_PERSISTENT_STATUS_REG;
1943   1      
1944   1          if(0u != reset)
1945   1          {
1946   2              CY_VD_PRES_CONTROL_REG |= CY_VD_PRESA_EN;
1947   2          }
1948   1          else
1949   1          {
1950   2              CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
1951   2          }
1952   1      
1953   1          *CY_INT_CLR_PEND_PTR = 0x01u;
1954   1          *CY_INT_ENABLE_PTR   = 0x01u;
1955   1      }
1956          
1957          
1958          /*******************************************************************************
1959          * Function Name: CyVdLvDigitDisable
1960          ********************************************************************************
1961          *
1962          * Summary:
1963          *  Disables the digital low voltage monitor (interrupt and device reset are
1964          *  disabled).
1965          *
1966          * Parameters:
1967          *  None
1968          *
1969          * Return:
1970          *  None
1971          *
1972          *******************************************************************************/
1973          void CyVdLvDigitDisable(void) 
1974          {
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 33  

1975   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_LVID_EN));
1976   1      
1977   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESD_EN));
1978   1      
1979   1          while(0u != (CY_VD_PERSISTENT_STATUS_REG & 0x07u))
1980   1          {
1981   2      
1982   2          }
1983   1      }
1984          
1985          
1986          /*******************************************************************************
1987          * Function Name: CyVdLvAnalogDisable
1988          ********************************************************************************
1989          *
1990          * Summary:
1991          *  Disables the analog low voltage monitor (interrupt and device reset are
1992          *  disabled).
1993          *
1994          * Parameters:
1995          *  None
1996          *
1997          * Return:
1998          *  None
1999          *
2000          *******************************************************************************/
2001          void CyVdLvAnalogDisable(void) 
2002          {
2003   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_LVIA_EN));
2004   1      
2005   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
2006   1      
2007   1          while(0u != (CY_VD_PERSISTENT_STATUS_REG & 0x07u))
2008   1          {
2009   2      
2010   2          }
2011   1      }
2012          
2013          
2014          /*******************************************************************************
2015          * Function Name: CyVdHvAnalogEnable
2016          ********************************************************************************
2017          *
2018          * Summary:
2019          *  Enables the analog high voltage monitors to generate interrupt on
2020          *  Vdda archives 5.75 V threshold and optionally resets device.
2021          *
2022          * Parameters:
2023          *  None
2024          *
2025          * Return:
2026          *  None
2027          *
2028          *******************************************************************************/
2029          void CyVdHvAnalogEnable(void) 
2030          {
2031   1          *CY_INT_CLEAR_PTR = 0x01u;
2032   1      
2033   1          CY_VD_PRES_CONTROL_REG &= ((uint8)(~CY_VD_PRESA_EN));
2034   1      
2035   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_HVIA_EN;
2036   1      
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 34  

2037   1          /* Timeout to eliminate glitches on the LVI/HVI when enabling */
2038   1          CyDelayUs(1u);
2039   1      
2040   1          (void) CY_VD_PERSISTENT_STATUS_REG;
2041   1      
2042   1          *CY_INT_CLR_PEND_PTR = 0x01u;
2043   1          *CY_INT_ENABLE_PTR   = 0x01u;
2044   1      }
2045          
2046          
2047          /*******************************************************************************
2048          * Function Name: CyVdHvAnalogDisable
2049          ********************************************************************************
2050          *
2051          * Summary:
2052          *  Disables the analog low voltage monitor
2053          *  (interrupt and device reset are disabled).
2054          *
2055          * Parameters:
2056          *  None
2057          *
2058          * Return:
2059          *  None
2060          *
2061          *******************************************************************************/
2062          void CyVdHvAnalogDisable(void) 
2063          {
2064   1          CY_VD_LVI_HVI_CONTROL_REG &= ((uint8)(~CY_VD_HVIA_EN));
2065   1      }
2066          
2067          
2068          /*******************************************************************************
2069          * Function Name: CyVdStickyStatus
2070          ********************************************************************************
2071          *
2072          * Summary:
2073          *  Manages the Reset and Voltage Detection Status Register 0.
2074          *  This register has the interrupt status for the HVIA, LVID and LVIA.
2075          *  This hardware register clears on read.
2076          *
2077          * Parameters:
2078          *  mask: Bits in the shadow register to clear.
2079          *   Define                  Definition
2080          *   CY_VD_LVID            Persistent status of digital LVI.
2081          *   CY_VD_LVIA            Persistent status of analog LVI.
2082          *   CY_VD_HVIA            Persistent status of analog HVI.
2083          *
2084          * Return:
2085          *  Status.  Same enumerated bit values as used for the mask parameter.
2086          *
2087          *******************************************************************************/
2088          uint8 CyVdStickyStatus(uint8 mask) 
2089          {
2090   1          uint8 status;
2091   1      
2092   1          status = CY_VD_PERSISTENT_STATUS_REG;
2093   1          CY_VD_PERSISTENT_STATUS_REG &= ((uint8)(~mask));
2094   1      
2095   1          return(status);
2096   1      }
2097          
2098          
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 35  

2099          /*******************************************************************************
2100          * Function Name: CyVdRealTimeStatus
2101          ********************************************************************************
2102          *
2103          * Summary:
2104          *  Returns the real time voltage detection status.
2105          *
2106          * Parameters:
2107          *  None
2108          *
2109          * Return:
2110          *  Status:
2111          *   Define                  Definition
2112          *   CY_VD_LVID            Persistent status of digital LVI.
2113          *   CY_VD_LVIA            Persistent status of analog LVI.
2114          *   CY_VD_HVIA            Persistent status of analog HVI.
2115          *
2116          *******************************************************************************/
2117          uint8 CyVdRealTimeStatus(void) 
2118          {
2119   1          uint8 interruptState;
2120   1          uint8 vdFlagsState;
2121   1      
2122   1          interruptState = CyEnterCriticalSection();
2123   1          vdFlagsState = CY_VD_RT_STATUS_REG;
2124   1          CyExitCriticalSection(interruptState);
2125   1      
2126   1          return(vdFlagsState);
2127   1      }
2128          
2129          
2130          /*******************************************************************************
2131          * Function Name: CyDisableInts
2132          ********************************************************************************
2133          *
2134          * Summary:
2135          *  Disables the interrupt enable for each interrupt.
2136          *
2137          * Parameters:
2138          *  None
2139          *
2140          * Return:
2141          *  32 bit mask of previously enabled interrupts.
2142          *
2143          *******************************************************************************/
2144          uint32 CyDisableInts(void) 
2145          {
2146   1          uint32 intState;
2147   1          uint8 interruptState;
2148   1      
2149   1          interruptState = CyEnterCriticalSection();
2150   1      
2151   1          #if(CY_PSOC3)
2152   1      
2153   1              /* Get the current interrupt state. */
2154   1              intState  = ((uint32) CY_GET_REG8(CY_INT_CLR_EN0_PTR));
2155   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN1_PTR)) << 8u));
2156   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN2_PTR)) << 16u));
2157   1              intState |= ((uint32) (((uint32) CY_GET_REG8(CY_INT_CLR_EN3_PTR)) << 24u));
2158   1      
2159   1      
2160   1              /* Disable all of the interrupts. */
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 36  

2161   1              CY_SET_REG8(CY_INT_CLR_EN0_PTR, 0xFFu);
2162   1              CY_SET_REG8(CY_INT_CLR_EN1_PTR, 0xFFu);
2163   1              CY_SET_REG8(CY_INT_CLR_EN2_PTR, 0xFFu);
2164   1              CY_SET_REG8(CY_INT_CLR_EN3_PTR, 0xFFu);
2165   1      
2166   1          #else
              
                      /* Get the current interrupt state. */
                      intState = CY_GET_REG32(CY_INT_CLEAR_PTR);
              
                      /* Disable all of the interrupts. */
                      CY_SET_REG32(CY_INT_CLEAR_PTR, 0xFFFFFFFFu);
              
                  #endif /* (CY_PSOC3) */
2175   1      
2176   1          CyExitCriticalSection(interruptState);
2177   1      
2178   1          return (intState);
2179   1      }
2180          
2181          
2182          /*******************************************************************************
2183          * Function Name: CyEnableInts
2184          ********************************************************************************
2185          *
2186          * Summary:
2187          *  Enables interrupts to a given state.
2188          *
2189          * Parameters:
2190          *  uint32 mask: 32 bit mask of interrupts to enable.
2191          *
2192          * Return:
2193          *  None
2194          *
2195          *******************************************************************************/
2196          void CyEnableInts(uint32 mask) 
2197          {
2198   1      
2199   1          uint8 interruptState;
2200   1      
2201   1          interruptState = CyEnterCriticalSection();
2202   1      
2203   1          #if(CY_PSOC3)
2204   1      
2205   1              /* Set interrupts as enabled. */
2206   1              CY_SET_REG8(CY_INT_SET_EN3_PTR, ((uint8) (mask >> 24u)));
2207   1              CY_SET_REG8(CY_INT_SET_EN2_PTR, ((uint8) (mask >> 16u)));
2208   1              CY_SET_REG8(CY_INT_SET_EN1_PTR, ((uint8) (mask >> 8u )));
2209   1              CY_SET_REG8(CY_INT_SET_EN0_PTR, ((uint8) (mask )));
2210   1      
2211   1          #else
              
                      CY_SET_REG32(CY_INT_ENABLE_PTR, mask);
              
                  #endif /* (CY_PSOC3) */
2216   1      
2217   1          CyExitCriticalSection(interruptState);
2218   1      
2219   1      }
2220          
2221          #if(CY_PSOC5)
              
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 37  

                  /*******************************************************************************
                  * Function Name: CyFlushCache
                  ********************************************************************************
                  * Summary:
                  *  Flushes the PSoC 5/5LP cache by invalidating all entries.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyFlushCache(void)
                  {
                      uint8 interruptState;
              
                      /* Save current global interrupt enable and disable it */
                      interruptState = CyEnterCriticalSection();
              
                      /* Fill instruction prefectch unit to insure data integrity */
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
              
                      /* All entries in the cache are invalidated on the next clock cycle. */
                      CY_CACHE_CONTROL_REG |= CY_CACHE_CONTROL_FLUSH;
              
              
                      /***********************************************************************
                      * The prefetch unit could/would be filled with the instructions that
                      * succeed the flush. Since a flush is desired then theoretically those
                      * instructions might be considered stale/invalid.
                      ***********************************************************************/
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 38  

                      CY_NOP;
              
                      /* Restore global interrupt enable state */
                      CyExitCriticalSection(interruptState);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetSysVector
                  ********************************************************************************
                  * Summary:
                  *  Sets the interrupt vector of the specified system interrupt number. System
                  *  interrupts are present only for the ARM platform. These interrupts are for
                  *  SysTick, PendSV and others.
                  *
                  * Parameters:
                  *  number: Interrupt number, valid range [0-15].
                     address: Pointer to an interrupt service routine.
                  *
                  * Return:
                  *   The old ISR vector at this location.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
                  {
                      cyisraddress oldIsr;
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
              
                      CYASSERT(number <= CY_INT_SYS_NUMBER_MAX);
              
                      /* Save old Interrupt service routine. */
                      oldIsr = ramVectorTable[number & CY_INT_SYS_NUMBER_MASK];
              
                      /* Set new Interrupt service routine. */
                      ramVectorTable[number & CY_INT_SYS_NUMBER_MASK] = address;
              
                      return (oldIsr);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetSysVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the interrupt vector of the specified system interrupt number. System
                  *  interrupts are present only for the ARM platform. These interrupts are for
                  *  SysTick, PendSV and others.
                  *
                  * Parameters:
                  *   number: The interrupt number, valid range [0-15].
                  *
                  * Return:
                  *   Address of the ISR in the interrupt vector table.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntGetSysVector(uint8 number)
                  {
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
                      CYASSERT(number <= CY_INT_SYS_NUMBER_MAX);
              
                      return ramVectorTable[number & CY_INT_SYS_NUMBER_MASK];
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 39  

                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets the interrupt vector of the specified interrupt number.
                  *
                  * Parameters:
                  *  number: Valid range [0-31].  Interrupt number
                  *  address: Pointer to an interrupt service routine
                  *
                  * Return:
                  *   Previous interrupt vector value.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
                  {
                      cyisraddress oldIsr;
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Save old Interrupt service routine. */
                      oldIsr = ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)];
              
                      /* Set new Interrupt service routine. */
                      ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)] = address;
              
                      return (oldIsr);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the interrupt vector of the specified interrupt number.
                  *
                  * Parameters:
                  *  number: Valid range [0-31].  Interrupt number
                  *
                  * Return:
                  *  Address of the ISR in the interrupt vector table.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntGetVector(uint8 number)
                  {
                      cyisraddress *ramVectorTable = *CY_INT_VECT_TABLE;
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      return (ramVectorTable[CY_INT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)]);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetPriority
                  ********************************************************************************
                  *
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 40  

                  * Summary:
                  *  Sets the Priority of the Interrupt.
                  *
                  * Parameters:
                  *  priority: Priority of the interrupt. 0 - 7, 0 being the highest.
                  *  number: The number of the interrupt, 0 - 31.
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyIntSetPriority(uint8 number, uint8 priority)
                  {
                      CYASSERT(priority <= CY_INT_PRIORITY_MAX);
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
                      CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] = (priority & CY_INT_PRIORITY_MASK)<< 5;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetPriority
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the Priority of the Interrupt.
                  *
                  * Parameters:
                  *  number: The number of the interrupt, 0 - 31.
                  *
                  * Return:
                  *  Priority of the interrupt. 0 - 7, 0 being the highest.
                  *
                  *******************************************************************************/
                  uint8 CyIntGetPriority(uint8 number)
                  {
                      uint8 priority;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      priority = CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] >> 5;
              
                      return (priority);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetState
                  ********************************************************************************
                  *
                  * Summary:
                  *   Gets the enable state of the specified interrupt number.
                  *
                  * Parameters:
                  *   number: Valid range [0-31].  Interrupt number.
                  *
                  * Return:
                  *   Enable status: 1 if enabled, 0 if disabled
                  *
                  *******************************************************************************/
                  uint8 CyIntGetState(uint8 number)
                  {
                      reg32 * stateReg;
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 41  

              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Get a pointer to the Interrupt enable register. */
                      stateReg = CY_INT_ENABLE_PTR;
              
                      /* Get the state of the interrupt. */
                      return (0u != (*stateReg & (((uint32) 1u) << (0x1Fu & number)))) ? ((uint8)(1u)) : ((uint8)(0u));
                  }
              
              
              #else   /* PSoC3 */
2483          
2484          
2485              /*******************************************************************************
2486              * Function Name: CyIntSetVector
2487              ********************************************************************************
2488              *
2489              * Summary:
2490              *  Sets the interrupt vector of the specified interrupt number.
2491              *
2492              * Parameters:
2493              *  number:  Valid range [0-31].  Interrupt number
2494              *  address: Pointer to an interrupt service routine
2495              *
2496              * Return:
2497              *  Previous interrupt vector value.
2498              *
2499              *******************************************************************************/
2500              cyisraddress CyIntSetVector(uint8 number, cyisraddress address) 
2501              {
2502   1              cyisraddress oldIsr;
2503   1      
2504   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2505   1      
2506   1              /* Save old Interrupt service routine. */
2507   1              oldIsr = (cyisraddress) \
2508   1                          CY_GET_REG16(&CY_INT_VECT_TABLE[number & CY_INT_NUMBER_MASK]);
2509   1      
2510   1              /* Set new Interrupt service routine. */
2511   1              CY_SET_REG16(&CY_INT_VECT_TABLE[number], (uint16) address);
2512   1      
2513   1              return (oldIsr);
2514   1          }
2515          
2516          
2517              /*******************************************************************************
2518              * Function Name: CyIntGetVector
2519              ********************************************************************************
2520              *
2521              * Summary:
2522              *  Gets the interrupt vector of the specified interrupt number.
2523              *
2524              * Parameters:
2525              *  number: Valid range [0-31].  Interrupt number
2526              *
2527              * Return:
2528              *  Address of the ISR in the interrupt vector table.
2529              *
2530              *******************************************************************************/
2531              cyisraddress CyIntGetVector(uint8 number) 
2532              {
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 42  

2533   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2534   1      
2535   1              return ((cyisraddress) \
2536   1                      CY_GET_REG16(&CY_INT_VECT_TABLE[number & CY_INT_NUMBER_MASK]));
2537   1          }
2538          
2539          
2540              /*******************************************************************************
2541              * Function Name: CyIntSetPriority
2542              ********************************************************************************
2543              *
2544              * Summary:
2545              *  Sets the Priority of the Interrupt.
2546              *
2547              * Parameters:
2548              *  priority: Priority of the interrupt. 0 - 7, 0 being the highest.
2549              *  number:   The number of the interrupt, 0 - 31.
2550              *
2551              * Return:
2552              *  None
2553              *
2554              *******************************************************************************/
2555              void CyIntSetPriority(uint8 number, uint8 priority) 
2556              {
2557   1              CYASSERT(priority <= CY_INT_PRIORITY_MAX);
2558   1      
2559   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2560   1      
2561   1              CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] =
2562   1                          (priority & CY_INT_PRIORITY_MASK) << 5;
2563   1          }
2564          
2565          
2566              /*******************************************************************************
2567              * Function Name: CyIntGetPriority
2568              ********************************************************************************
2569              *
2570              * Summary:
2571              *  Gets the Priority of the Interrupt.
2572              *
2573              * Parameters:
2574              *  number: The number of the interrupt, 0 - 31.
2575              *
2576              * Return:
2577              *  Priority of the interrupt. 0 - 7, 0 being the highest.
2578              *
2579              *******************************************************************************/
2580              uint8 CyIntGetPriority(uint8 number) 
2581              {
2582   1              uint8 priority;
2583   1      
2584   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2585   1      
2586   1              priority = CY_INT_PRIORITY_PTR[number & CY_INT_NUMBER_MASK] >> 5;
2587   1      
2588   1              return (priority);
2589   1          }
2590          
2591          
2592              /*******************************************************************************
2593              * Function Name: CyIntGetState
2594              ********************************************************************************
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 43  

2595              *
2596              * Summary:
2597              *   Gets the enable state of the specified interrupt number.
2598              *
2599              * Parameters:
2600              *   number: Valid range [0-31].  Interrupt number.
2601              *
2602              * Return:
2603              *   Enable status: 1 if enabled, 0 if disabled
2604              *
2605              *******************************************************************************/
2606              uint8 CyIntGetState(uint8 number) 
2607              {
2608   1              reg8 * stateReg;
2609   1      
2610   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2611   1      
2612   1              /* Get a pointer to the Interrupt enable register. */
2613   1              stateReg = CY_INT_ENABLE_PTR + ((number & CY_INT_NUMBER_MASK) >> 3u);
2614   1      
2615   1              /* Get the state of the interrupt. */
2616   1              return ((0u != (*stateReg & ((uint8)(1u << (0x07u & number))))) ? ((uint8)(1u)) : ((uint8)(0u)));
2617   1          }
2618          
2619          
2620          #endif  /* (CY_PSOC5) */
2621          
2622          
2623          #if(CYDEV_VARIABLE_VDDA == 1)
              
                  /*******************************************************************************
                  * Function Name: CySetScPumps
                  ********************************************************************************
                  *
                  * Summary:
                  *  If 1 is passed as a parameter:
                  *   - if any of the SC blocks are used - enable pumps for the SC blocks and
                  *     start boost clock.
                  *   - For the each enabled SC block set boost clock index and enable boost
                  *     clock.
                  *
                  *  If non-1 value is passed as a parameter:
                  *   - If all SC blocks are not used - disable pumps for the SC blocks and
                  *     stop boost clock.
                  *   - For the each enabled SC block clear boost clock index and disable boost
                  *     clock.
                  *
                  *  The global variable CyScPumpEnabled is updated to be equal to passed
                  *  parameter.
                  *
                  * Parameters:
                  *   uint8 enable: Enable/disable SC pumps and boost clock for enabled SC block.
                  *                 1 - Enable
                  *                 0 - Disable
                  *
                  * Return:
                  *   None
                  *
                  *******************************************************************************/
                  void CySetScPumps(uint8 enable) 
                  {
                      if(1u == enable)
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 44  

                      {
                          /* The SC pumps should be enabled */
                          CyScPumpEnabled = 1u;
                          /* Enable pumps if any of SC blocks are used */
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAPS_MASK))
                          {
                              CY_LIB_SC_MISC_REG |= CY_LIB_SC_MISC_PUMP_FORCE;
                              CyScBoostClk_Start();
                          }
                          /* Set positive pump for each enabled SC block: set clock index and enable it */
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP0_EN))
                          {
                              CY_LIB_SC0_BST_REG = (CY_LIB_SC0_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC0_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP1_EN))
                          {
                              CY_LIB_SC1_BST_REG = (CY_LIB_SC1_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC1_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP2_EN))
                          {
                              CY_LIB_SC2_BST_REG = (CY_LIB_SC2_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC2_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                          if(0u != (CY_LIB_ACT_CFG9_REG & CY_LIB_ACT_CFG9_SWCAP3_EN))
                          {
                              CY_LIB_SC3_BST_REG = (CY_LIB_SC3_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK) | CyScBoostClk__I
             -NDEX;
                              CY_LIB_SC3_BST_REG |= CY_LIB_SC_BST_CLK_EN;
                          }
                      }
                      else
                      {
                          /* The SC pumps should be disabled */
                          CyScPumpEnabled = 0u;
                          /* Disable pumps for all SC blocks and stop boost clock */
                          CY_LIB_SC_MISC_REG &= ((uint8)(~CY_LIB_SC_MISC_PUMP_FORCE));
                          CyScBoostClk_Stop();
                          /* Disable boost clock and clear clock index for each SC block */
                          CY_LIB_SC0_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC0_BST_REG = CY_LIB_SC0_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC1_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC1_BST_REG = CY_LIB_SC1_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC2_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC2_BST_REG = CY_LIB_SC2_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                          CY_LIB_SC3_BST_REG &= ((uint8)(~CY_LIB_SC_BST_CLK_EN));
                          CY_LIB_SC3_BST_REG = CY_LIB_SC3_BST_REG & CY_LIB_SC_BST_CLK_INDEX_MASK;
                      }
                  }
              
              #endif  /* (CYDEV_VARIABLE_VDDA == 1) */
2708          
2709          
2710          /* [] END OF FILE */
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 45  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyPLL_OUT_Start (BEGIN)
                                           ; SOURCE LINE # 89
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0008 904220            MOV     DPTR,#04220H
000B E0                MOVX    A,@DPTR
000C 4401              ORL     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
000F 900000      R     MOV     DPTR,#wait
0012 E0                MOVX    A,@DPTR
0013 6059              JZ      ?C0001
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 104
0015 904300            MOV     DPTR,#04300H
0018 E0                MOVX    A,@DPTR
0019 5404              ANL     A,#04H
001B 900000      R     MOV     DPTR,#iloEnableState
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
001F 904380            MOV     DPTR,#04380H
0022 E0                MOVX    A,@DPTR
0023 900000      R     MOV     DPTR,#pmTwCfg0State
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0027 904382            MOV     DPTR,#04382H
002A E0                MOVX    A,@DPTR
002B 900000      R     MOV     DPTR,#pmTwCfg2State
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
002F 7F18              MOV     R7,#018H
0031 120000      E     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 110
0034 900000      R     MOV     DPTR,#status
0037 7410              MOV     A,#010H
0039 F0                MOVX    @DPTR,A
003A         ?C0002:
                                           ; SOURCE LINE # 112
003A 7F01              MOV     R7,#01H
003C 120000      E     LCALL   _CyPmReadStatus
003F EF                MOV     A,R7
0040 20E012            JB      ACC.0,?C0003
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 115
0043 904225            MOV     DPTR,#04225H
0046 E0                MOVX    A,@DPTR
0047 5401              ANL     A,#01H
0049 60EF              JZ      ?C0002
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
004B E0                MOVX    A,@DPTR
004C 5401              ANL     A,#01H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 46  

004E 60EA              JZ      ?C0002
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
0050 E4                CLR     A
0051 900000      R     MOV     DPTR,#status
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0055         ?C0003:
                                           ; SOURCE LINE # 126
0055 900000      R     MOV     DPTR,#iloEnableState
0058 E0                MOVX    A,@DPTR
0059 7003              JNZ     ?C0006
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
005B 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 129
005E         ?C0006:
                                           ; SOURCE LINE # 131
005E 900000      R     MOV     DPTR,#pmTwCfg0State
0061 E0                MOVX    A,@DPTR
0062 904380            MOV     DPTR,#04380H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0066 900000      R     MOV     DPTR,#pmTwCfg2State
0069 E0                MOVX    A,@DPTR
006A 904382            MOV     DPTR,#04382H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
006E         ?C0001:
                                           ; SOURCE LINE # 135
006E 900000      R     MOV     DPTR,#status
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
                                           ; SOURCE LINE # 136
0073         ?C0007:
0073 22                RET     
             ; FUNCTION _CyPLL_OUT_Start (END)

             ; FUNCTION CyPLL_OUT_Stop (BEGIN)
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0000 904220            MOV     DPTR,#04220H
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0007 22                RET     
             ; FUNCTION CyPLL_OUT_Stop (END)

             ; FUNCTION _CyPLL_OUT_SetPQ (BEGIN)
                                           ; SOURCE LINE # 191
0000 900000      R     MOV     DPTR,#pDiv
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 47  

0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 194
000B 904220            MOV     DPTR,#04220H
000E E0                MOVX    A,@DPTR
000F 5401              ANL     A,#01H
0011 7003              JNZ     ?C0010
0013 D3                SETB    C
0014 8001              SJMP    ?C0011
0016         ?C0010:
0016 C3                CLR     C
0017         ?C0011:
0017 4005              JC      ?C0009
0019 7F00              MOV     R7,#00H
001B 120000      R     LCALL   _?CyHalt
001E         ?C0009:
                                           ; SOURCE LINE # 196
001E 900000      R     MOV     DPTR,#pDiv
0021 E0                MOVX    A,@DPTR
0022 C3                CLR     C
0023 9408              SUBB    A,#08H
0025 403D              JC      ?C0012
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 D3                SETB    C
002A 9410              SUBB    A,#010H
002C 5036              JNC     ?C0012
002E E0                MOVX    A,@DPTR
002F C3                CLR     C
0030 9401              SUBB    A,#01H
0032 4030              JC      ?C0012
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 9401              SUBB    A,#01H
0038 402A              JC      ?C0012
003A E0                MOVX    A,@DPTR
003B D3                SETB    C
003C 9407              SUBB    A,#07H
003E 5024              JNC     ?C0012
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 201
0040 900000      R     MOV     DPTR,#pDiv
0043 E0                MOVX    A,@DPTR
0044 904222            MOV     DPTR,#04222H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0048 900000      R     MOV     DPTR,#qDiv
004B E0                MOVX    A,@DPTR
004C 14                DEC     A
004D 904223            MOV     DPTR,#04223H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0051 900000      R     MOV     DPTR,#current
0054 E0                MOVX    A,@DPTR
0055 14                DEC     A
0056 FF                MOV     R7,A
0057 C4                SWAP    A
0058 54F0              ANL     A,#0F0H
005A FF                MOV     R7,A
005B 904221            MOV     DPTR,#04221H
005E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 48  

005F 548F              ANL     A,#08FH
0061 4F                ORL     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0063 22                RET     
0064         ?C0012:
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 214
0064 7F00              MOV     R7,#00H
0066 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 217
0069         ?C0015:
0069 22                RET     
             ; FUNCTION _CyPLL_OUT_SetPQ (END)

             ; FUNCTION _CyPLL_OUT_SetSource (BEGIN)
                                           ; SOURCE LINE # 246
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 249
0005 904220            MOV     DPTR,#04220H
0008 E0                MOVX    A,@DPTR
0009 5401              ANL     A,#01H
000B 7003              JNZ     ?C0017
000D D3                SETB    C
000E 8001              SJMP    ?C0018
0010         ?C0017:
0010 C3                CLR     C
0011         ?C0018:
0011 4005              JC      ?C0016
0013 7F00              MOV     R7,#00H
0015 120000      R     LCALL   _?CyHalt
0018         ?C0016:
                                           ; SOURCE LINE # 251
0018 900000      R     MOV     DPTR,#source
001B E0                MOVX    A,@DPTR
001C 120000      E     LCALL   ?C?CCASE
001F 0000        R     DW      ?C0022
0021 00                DB      00H
0022 0000        R     DW      ?C0022
0024 01                DB      01H
0025 0000        R     DW      ?C0022
0027 02                DB      02H
0028 0000              DW      00H
002A 0000        R     DW      ?C0023
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
002C         ?C0022:
                                           ; SOURCE LINE # 256
002C 904000            MOV     DPTR,#04000H
002F E0                MOVX    A,@DPTR
0030 54FC              ANL     A,#0FCH
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#source
0036 E0                MOVX    A,@DPTR
0037 4F                ORL     A,R7
0038 904000            MOV     DPTR,#04000H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 49  

003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
003C 22                RET     
                                           ; SOURCE LINE # 259
003D         ?C0023:
                                           ; SOURCE LINE # 260
003D 7F00              MOV     R7,#00H
003F 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
0042         ?C0025:
0042 22                RET     
             ; FUNCTION _CyPLL_OUT_SetSource (END)

             ; FUNCTION _CyIMO_Start (BEGIN)
                                           ; SOURCE LINE # 296
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 303
0005 9043A0            MOV     DPTR,#043A0H
0008 E0                MOVX    A,@DPTR
0009 4410              ORL     A,#010H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
000C 9043B0            MOV     DPTR,#043B0H
000F E0                MOVX    A,@DPTR
0010 4410              ORL     A,#010H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
0013 900000      R     MOV     DPTR,#wait
0016 E0                MOVX    A,@DPTR
0017 6041              JZ      ?C0030
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 309
0019 904300            MOV     DPTR,#04300H
001C E0                MOVX    A,@DPTR
001D 5404              ANL     A,#04H
001F 900000      R     MOV     DPTR,#ilo100KhzEnable
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
0023 904380            MOV     DPTR,#04380H
0026 E0                MOVX    A,@DPTR
0027 900000      R     MOV     DPTR,#pmFtwCfg0Reg
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
002B 904382            MOV     DPTR,#04382H
002E E0                MOVX    A,@DPTR
002F 900000      R     MOV     DPTR,#pmFtwCfg2Reg
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
0033 E4                CLR     A
0034 FF                MOV     R7,A
0035 120000      E     LCALL   _CyPmFtwSetInterval
0038         ?C0027:
                                           ; SOURCE LINE # 315
0038 7F01              MOV     R7,#01H
003A 120000      E     LCALL   _CyPmReadStatus
003D EF                MOV     A,R7
003E 30E0F7            JNB     ACC.0,?C0027
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 50  

                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 318
0041         ?C0028:
                                           ; SOURCE LINE # 320
0041 900000      R     MOV     DPTR,#ilo100KhzEnable
0044 E0                MOVX    A,@DPTR
0045 7003              JNZ     ?C0029
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0047 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 323
004A         ?C0029:
                                           ; SOURCE LINE # 325
004A 900000      R     MOV     DPTR,#pmFtwCfg0Reg
004D E0                MOVX    A,@DPTR
004E 904380            MOV     DPTR,#04380H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0052 900000      R     MOV     DPTR,#pmFtwCfg2Reg
0055 E0                MOVX    A,@DPTR
0056 904382            MOV     DPTR,#04382H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
005A         ?C0030:
005A 22                RET     
             ; FUNCTION _CyIMO_Start (END)

             ; FUNCTION CyIMO_Stop (BEGIN)
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0000 9043A0            MOV     DPTR,#043A0H
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
0007 9043B0            MOV     DPTR,#043B0H
000A E0                MOVX    A,@DPTR
000B 54EF              ANL     A,#0EFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
000E 22                RET     
             ; FUNCTION CyIMO_Stop (END)

             ; FUNCTION CyUSB_PowerOnCheck (BEGIN)
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#poweredOn
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
0005 904393            MOV     DPTR,#04393H
0008 E0                MOVX    A,@DPTR
0009 5407              ANL     A,#07H
000B 7008              JNZ     ?C0034
000D 9043A5            MOV     DPTR,#043A5H
0010 E0                MOVX    A,@DPTR
0011 5401              ANL     A,#01H
0013 7012              JNZ     ?C0033
0015         ?C0034:
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 51  

0015 904393            MOV     DPTR,#04393H
0018 E0                MOVX    A,@DPTR
0019 5407              ANL     A,#07H
001B 6401              XRL     A,#01H
001D 700E              JNZ     ?C0032
001F 9043B5            MOV     DPTR,#043B5H
0022 E0                MOVX    A,@DPTR
0023 5401              ANL     A,#01H
0025 6006              JZ      ?C0032
0027         ?C0033:
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
0027 900000      R     MOV     DPTR,#poweredOn
002A 7401              MOV     A,#01H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
002D         ?C0032:
                                           ; SOURCE LINE # 379
002D 900000      R     MOV     DPTR,#poweredOn
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
                                           ; SOURCE LINE # 380
0032         ?C0035:
0032 22                RET     
             ; FUNCTION CyUSB_PowerOnCheck (END)

             ; FUNCTION _CyIMO_SetTrimValue (BEGIN)
                                           ; SOURCE LINE # 397
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0005 120000      R     LCALL   CyUSB_PowerOnCheck
0008 900000      R     MOV     DPTR,#usbPowerOn
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
000D E0                MOVX    A,@DPTR
000E B40107            CJNE    A,#01H,?C0036
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 405
0011 906009            MOV     DPTR,#06009H
0014 E0                MOVX    A,@DPTR
0015 54FD              ANL     A,#0FDH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
0018         ?C0036:
                                           ; SOURCE LINE # 407
0018 900000      R     MOV     DPTR,#freq
001B E0                MOVX    A,@DPTR
001C 120000      E     LCALL   ?C?CCASE
001F 0000        R     DW      ?C0038
0021 00                DB      00H
0022 0000        R     DW      ?C0039
0024 01                DB      01H
0025 0000        R     DW      ?C0040
0027 02                DB      02H
0028 0000        R     DW      ?C0041
002A 03                DB      03H
002B 0000        R     DW      ?C0042
002D 04                DB      04H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 52  

002E 0000        R     DW      ?C0043
0030 05                DB      05H
0031 0000        R     DW      ?C0044
0033 08                DB      08H
0034 0000              DW      00H
0036 0000        R     DW      ?C0046
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0038         ?C0038:
                                           ; SOURCE LINE # 410
0038 7B0C              MOV     R3,#0CH
003A 7A01              MOV     R2,#01H
003C 7908              MOV     R1,#08H
003E 120000      E     LCALL   _cyread8
0041 9046A1            MOV     DPTR,#046A1H
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
0046 22                RET     
                                           ; SOURCE LINE # 413
0047         ?C0039:
                                           ; SOURCE LINE # 414
0047 7B0C              MOV     R3,#0CH
0049 7A01              MOV     R2,#01H
004B 7909              MOV     R1,#09H
004D 120000      E     LCALL   _cyread8
0050 9046A1            MOV     DPTR,#046A1H
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0055 22                RET     
                                           ; SOURCE LINE # 417
0056         ?C0040:
                                           ; SOURCE LINE # 418
0056 7B0C              MOV     R3,#0CH
0058 7A01              MOV     R2,#01H
005A 790A              MOV     R1,#0AH
005C 120000      E     LCALL   _cyread8
005F 9046A1            MOV     DPTR,#046A1H
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0064 22                RET     
                                           ; SOURCE LINE # 421
0065         ?C0041:
                                           ; SOURCE LINE # 422
0065 7B0C              MOV     R3,#0CH
0067 7A01              MOV     R2,#01H
0069 790B              MOV     R1,#0BH
006B 120000      E     LCALL   _cyread8
006E 9046A1            MOV     DPTR,#046A1H
0071 EF                MOV     A,R7
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
0073 22                RET     
                                           ; SOURCE LINE # 425
0074         ?C0042:
                                           ; SOURCE LINE # 426
0074 7B0C              MOV     R3,#0CH
0076 7A01              MOV     R2,#01H
0078 7989              MOV     R1,#089H
007A 120000      E     LCALL   _cyread8
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 53  

007D 9046A1            MOV     DPTR,#046A1H
0080 EF                MOV     A,R7
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0082 22                RET     
                                           ; SOURCE LINE # 429
0083         ?C0043:
                                           ; SOURCE LINE # 430
0083 7B0C              MOV     R3,#0CH
0085 7A01              MOV     R2,#01H
0087 790C              MOV     R1,#0CH
0089 120000      E     LCALL   _cyread8
008C 9046A1            MOV     DPTR,#046A1H
008F EF                MOV     A,R7
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
0091 22                RET     
                                           ; SOURCE LINE # 439
0092         ?C0044:
                                           ; SOURCE LINE # 440
0092 7B0C              MOV     R3,#0CH
0094 7A01              MOV     R2,#01H
0096 790F              MOV     R1,#0FH
0098 120000      E     LCALL   _cyread8
009B 9046A1            MOV     DPTR,#046A1H
009E EF                MOV     A,R7
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
00A0 900000      R     MOV     DPTR,#usbPowerOn
00A3 E0                MOVX    A,@DPTR
00A4 B4010D            CJNE    A,#01H,?C0048
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 446
00A7 906009            MOV     DPTR,#06009H
00AA E0                MOVX    A,@DPTR
00AB 4402              ORL     A,#02H
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
00AE 22                RET     
                                           ; SOURCE LINE # 450
00AF         ?C0046:
                                           ; SOURCE LINE # 451
00AF 7F00              MOV     R7,#00H
00B1 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 455
00B4         ?C0048:
00B4 22                RET     
             ; FUNCTION _CyIMO_SetTrimValue (END)

             ; FUNCTION _CyIMO_SetFreq (BEGIN)
                                           ; SOURCE LINE # 492
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 504
0005 904200            MOV     DPTR,#04200H
0008 E0                MOVX    A,@DPTR
0009 5407              ANL     A,#07H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 54  

000B 900000      R     MOV     DPTR,#currentFreq
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
000F 900000      R     MOV     DPTR,#freq
0012 E0                MOVX    A,@DPTR
0013 B40804            CJNE    A,#08H,?C0049
0016 7F03              MOV     R7,#03H
0018 8005              SJMP    ?C0050
001A         ?C0049:
001A 900000      R     MOV     DPTR,#freq
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F         ?C0050:
001F 900000      R     MOV     DPTR,#nextFreq
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
0024 900000      R     MOV     DPTR,#currentFreq
0027 E0                MOVX    A,@DPTR
0028 120000      E     LCALL   ?C?CCASE
002B 0000        R     DW      ?C0052
002D 00                DB      00H
002E 0000        R     DW      ?C0053
0030 01                DB      01H
0031 0000        R     DW      ?C0054
0033 02                DB      02H
0034 0000        R     DW      ?C0055
0036 03                DB      03H
0037 0000        R     DW      ?C0056
0039 04                DB      04H
003A 0000        R     DW      ?C0057
003C 05                DB      05H
003D 0000              DW      00H
003F 0000        R     DW      ?C0058
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0041         ?C0052:
                                           ; SOURCE LINE # 512
0041 900000      R     MOV     DPTR,#currentFreq
0044 7402              MOV     A,#02H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
0047 802C              SJMP    ?C0051
                                           ; SOURCE LINE # 515
0049         ?C0053:
                                           ; SOURCE LINE # 516
0049 900000      R     MOV     DPTR,#currentFreq
004C 7401              MOV     A,#01H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
004F 8024              SJMP    ?C0051
                                           ; SOURCE LINE # 519
0051         ?C0054:
                                           ; SOURCE LINE # 520
0051 900000      R     MOV     DPTR,#currentFreq
0054 7403              MOV     A,#03H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
0057 801C              SJMP    ?C0051
                                           ; SOURCE LINE # 523
0059         ?C0055:
                                           ; SOURCE LINE # 524
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 55  

0059 E4                CLR     A
005A 900000      R     MOV     DPTR,#currentFreq
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
005E 8015              SJMP    ?C0051
                                           ; SOURCE LINE # 527
0060         ?C0056:
                                           ; SOURCE LINE # 528
0060 900000      R     MOV     DPTR,#currentFreq
0063 7404              MOV     A,#04H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
0066 800D              SJMP    ?C0051
                                           ; SOURCE LINE # 531
0068         ?C0057:
                                           ; SOURCE LINE # 532
0068 900000      R     MOV     DPTR,#currentFreq
006B 7405              MOV     A,#05H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
006E 8005              SJMP    ?C0051
                                           ; SOURCE LINE # 541
0070         ?C0058:
                                           ; SOURCE LINE # 542
0070 7F00              MOV     R7,#00H
0072 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
0075         ?C0051:
                                           ; SOURCE LINE # 546
0075 900000      R     MOV     DPTR,#currentFreq
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C C3                CLR     C
007D 9F                SUBB    A,R7
007E 4008              JC      ?C0060
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 549
0080 900000      R     MOV     DPTR,#freq
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 550
0088         ?C0060:
                                           ; SOURCE LINE # 553
0088 900000      R     MOV     DPTR,#freq
008B E0                MOVX    A,@DPTR
008C 120000      E     LCALL   ?C?CCASE
008F 0000        R     DW      ?C0062
0091 00                DB      00H
0092 0000        R     DW      ?C0063
0094 01                DB      01H
0095 0000        R     DW      ?C0064
0097 02                DB      02H
0098 0000        R     DW      ?C0065
009A 03                DB      03H
009B 0000        R     DW      ?C0066
009D 04                DB      04H
009E 0000        R     DW      ?C0067
00A0 05                DB      05H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 56  

00A1 0000        R     DW      ?C0068
00A3 08                DB      08H
00A4 0000              DW      00H
00A6 0000        R     DW      ?C0069
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
00A8         ?C0062:
                                           ; SOURCE LINE # 557
00A8 904200            MOV     DPTR,#04200H
00AB E0                MOVX    A,@DPTR
00AC 54F8              ANL     A,#0F8H
00AE 4403              ORL     A,#03H
00B0 54BF              ANL     A,#0BFH
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
00B3 804D              SJMP    ?C0061
                                           ; SOURCE LINE # 560
00B5         ?C0063:
                                           ; SOURCE LINE # 562
00B5 904200            MOV     DPTR,#04200H
00B8 E0                MOVX    A,@DPTR
00B9 54F8              ANL     A,#0F8H
00BB 4401              ORL     A,#01H
00BD 54BF              ANL     A,#0BFH
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
00C0 8040              SJMP    ?C0061
                                           ; SOURCE LINE # 565
00C2         ?C0064:
                                           ; SOURCE LINE # 567
00C2 904200            MOV     DPTR,#04200H
00C5 E0                MOVX    A,@DPTR
00C6 54B8              ANL     A,#0B8H
00C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
00C9 8037              SJMP    ?C0061
                                           ; SOURCE LINE # 570
00CB         ?C0065:
                                           ; SOURCE LINE # 572
00CB 904200            MOV     DPTR,#04200H
00CE E0                MOVX    A,@DPTR
00CF 54F8              ANL     A,#0F8H
00D1 4402              ORL     A,#02H
00D3 54BF              ANL     A,#0BFH
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
00D6 802A              SJMP    ?C0061
                                           ; SOURCE LINE # 575
00D8         ?C0066:
                                           ; SOURCE LINE # 577
00D8 904200            MOV     DPTR,#04200H
00DB E0                MOVX    A,@DPTR
00DC 54F8              ANL     A,#0F8H
00DE 4404              ORL     A,#04H
00E0 54BF              ANL     A,#0BFH
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
00E3 801D              SJMP    ?C0061
                                           ; SOURCE LINE # 580
00E5         ?C0067:
                                           ; SOURCE LINE # 582
00E5 904200            MOV     DPTR,#04200H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 57  

00E8 E0                MOVX    A,@DPTR
00E9 54F8              ANL     A,#0F8H
00EB 4405              ORL     A,#05H
00ED 54BF              ANL     A,#0BFH
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
00F0 8010              SJMP    ?C0061
                                           ; SOURCE LINE # 592
00F2         ?C0068:
                                           ; SOURCE LINE # 593
00F2 904200            MOV     DPTR,#04200H
00F5 E0                MOVX    A,@DPTR
00F6 54F8              ANL     A,#0F8H
00F8 4442              ORL     A,#042H
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
00FB 8005              SJMP    ?C0061
                                           ; SOURCE LINE # 597
00FD         ?C0069:
                                           ; SOURCE LINE # 598
00FD 7F00              MOV     R7,#00H
00FF 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
0102         ?C0061:
                                           ; SOURCE LINE # 603
0102 900000      R     MOV     DPTR,#freq
0105 E0                MOVX    A,@DPTR
0106 B40805            CJNE    A,#08H,?C0071
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
0109 120000      R     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 606
010C 8003              SJMP    ?C0072
010E         ?C0071:
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
010E 120000      R     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 610
0111         ?C0072:
                                           ; SOURCE LINE # 612
0111 900000      R     MOV     DPTR,#currentFreq
0114 E0                MOVX    A,@DPTR
0115 FF                MOV     R7,A
0116 A3                INC     DPTR
0117 E0                MOVX    A,@DPTR
0118 C3                CLR     C
0119 9F                SUBB    A,R7
011A 5008              JNC     ?C0074
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 615
011C 900000      R     MOV     DPTR,#freq
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
0121 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
0124         ?C0074:
0124 22                RET     
             ; FUNCTION _CyIMO_SetFreq (END)

             ; FUNCTION _CyIMO_SetSource (BEGIN)
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 58  

                                           ; SOURCE LINE # 647
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
0005 E0                MOVX    A,@DPTR
0006 120000      E     LCALL   ?C?CCASE
0009 0000        R     DW      ?C0078
000B 00                DB      00H
000C 0000        R     DW      ?C0077
000E 01                DB      01H
000F 0000        R     DW      ?C0076
0011 02                DB      02H
0012 0000              DW      00H
0014 0000        R     DW      ?C0079
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
0016         ?C0076:
                                           ; SOURCE LINE # 652
0016 904000            MOV     DPTR,#04000H
0019 E0                MOVX    A,@DPTR
001A 54BF              ANL     A,#0BFH
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 653
001D 904200            MOV     DPTR,#04200H
0020 E0                MOVX    A,@DPTR
0021 4420              ORL     A,#020H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
0024 22                RET     
                                           ; SOURCE LINE # 656
0025         ?C0077:
                                           ; SOURCE LINE # 657
0025 904000            MOV     DPTR,#04000H
0028 E0                MOVX    A,@DPTR
0029 4440              ORL     A,#040H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
002C 904200            MOV     DPTR,#04200H
002F E0                MOVX    A,@DPTR
0030 4420              ORL     A,#020H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
0033 22                RET     
                                           ; SOURCE LINE # 661
0034         ?C0078:
                                           ; SOURCE LINE # 662
0034 904200            MOV     DPTR,#04200H
0037 E0                MOVX    A,@DPTR
0038 54DF              ANL     A,#0DFH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 663
003B 22                RET     
                                           ; SOURCE LINE # 665
003C         ?C0079:
                                           ; SOURCE LINE # 667
003C 7F00              MOV     R7,#00H
003E 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 59  

0041         ?C0081:
0041 22                RET     
             ; FUNCTION _CyIMO_SetSource (END)

             ; FUNCTION CyIMO_EnableDoubler (BEGIN)
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 691
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 4410              ORL     A,#010H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 692
0007 22                RET     
             ; FUNCTION CyIMO_EnableDoubler (END)

             ; FUNCTION CyIMO_DisableDoubler (BEGIN)
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 710
                                           ; SOURCE LINE # 711
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
0007 22                RET     
             ; FUNCTION CyIMO_DisableDoubler (END)

             ; FUNCTION _CyMasterClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 744
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 747
0005 E0                MOVX    A,@DPTR
0006 5403              ANL     A,#03H
0008 FF                MOV     R7,A
0009 904005            MOV     DPTR,#04005H
000C E0                MOVX    A,@DPTR
000D 54FC              ANL     A,#0FCH
000F 4F                ORL     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 748
0011 22                RET     
             ; FUNCTION _CyMasterClk_SetSource (END)

             ; FUNCTION _CyMasterClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 779
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
0005 E0                MOVX    A,@DPTR
0006 904004            MOV     DPTR,#04004H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
000A 22                RET     
             ; FUNCTION _CyMasterClk_SetDivider (END)

             ; FUNCTION _CyBusClk_Internal_SetDivider (BEGIN)
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 60  

                                           ; SOURCE LINE # 801
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 804
0008 904014            MOV     DPTR,#04014H
000B E0                MOVX    A,@DPTR
000C 54F0              ANL     A,#0F0H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
000F 904010            MOV     DPTR,#04010H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
0014 904008            MOV     DPTR,#04008H
0017 E0                MOVX    A,@DPTR
0018 4480              ORL     A,#080H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
001B 900000      R     MOV     DPTR,#divider
001E E0                MOVX    A,@DPTR
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 904002            MOV     DPTR,#04002H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 812
0025 900000      R     MOV     DPTR,#divider
0028 E0                MOVX    A,@DPTR
0029 FE                MOV     R6,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C EE                MOV     A,R6
002D 904003            MOV     DPTR,#04003H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 821
0031 904001            MOV     DPTR,#04001H
0034 E0                MOVX    A,@DPTR
0035 4401              ORL     A,#01H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 822
0038 22                RET     
             ; FUNCTION _CyBusClk_Internal_SetDivider (END)

             ; FUNCTION _CyBusClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 848
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 854
0008 120000      E     LCALL   CyEnterCriticalSection
000B 900000      R     MOV     DPTR,#interruptState
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 61  

0010 904007            MOV     DPTR,#04007H
0013 E0                MOVX    A,@DPTR
0014 900000      R     MOV     DPTR,#busClkDiv
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
001B 900000      R     MOV     DPTR,#busClkDiv
001E E0                MOVX    A,@DPTR
001F FE                MOV     R6,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 904006            MOV     DPTR,#04006H
0026 E0                MOVX    A,@DPTR
0027 FD                MOV     R5,A
0028 EE                MOV     A,R6
0029 EF                MOV     A,R7
002A 4D                ORL     A,R5
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#busClkDiv
002F EE                MOV     A,R6
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
0034 900000      R     MOV     DPTR,#divider
0037 E0                MOVX    A,@DPTR
0038 FE                MOV     R6,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B 4E                ORL     A,R6
003C 600A              JZ      ?C0088
003E 900000      R     MOV     DPTR,#busClkDiv
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 4E                ORL     A,R6
0046 704D              JNZ     ?C0087
0048         ?C0088:
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 863
0048 904004            MOV     DPTR,#04004H
004B E0                MOVX    A,@DPTR
004C 900000      R     MOV     DPTR,#masterClkDiv
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 865
0050 E0                MOVX    A,@DPTR
0051 C3                CLR     C
0052 9407              SUBB    A,#07H
0054 5005              JNC     ?C0089
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 868
0056 7F07              MOV     R7,#07H
0058 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 869
005B         ?C0089:
                                           ; SOURCE LINE # 871
005B 900000      R     MOV     DPTR,#divider
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 62  

005E E0                MOVX    A,@DPTR
005F FE                MOV     R6,A
0060 A3                INC     DPTR
0061 E0                MOVX    A,@DPTR
0062 4E                ORL     A,R6
0063 7014              JNZ     ?C0090
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 874
0065 904008            MOV     DPTR,#04008H
0068 E0                MOVX    A,@DPTR
0069 4440              ORL     A,#040H
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 875
006C 900000      R     MOV     DPTR,#divider
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 876
0077 8012              SJMP    ?C0091
0079         ?C0090:
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
0079 900000      R     MOV     DPTR,#divider
007C E0                MOVX    A,@DPTR
007D FE                MOV     R6,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 880
0084 904008            MOV     DPTR,#04008H
0087 E0                MOVX    A,@DPTR
0088 54BF              ANL     A,#0BFH
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 881
008B         ?C0091:
                                           ; SOURCE LINE # 884
008B 900000      R     MOV     DPTR,#masterClkDiv
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 885
0093 800B              SJMP    ?C0092
0095         ?C0087:
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
0095 900000      R     MOV     DPTR,#divider
0098 E0                MOVX    A,@DPTR
0099 FE                MOV     R6,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 889
00A0         ?C0092:
                                           ; SOURCE LINE # 891
00A0 900000      R     MOV     DPTR,#interruptState
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 63  

00A5 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 892
00A8 22                RET     
             ; FUNCTION _CyBusClk_SetDivider (END)

             ; FUNCTION _CyCpuClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 921
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 922
                                           ; SOURCE LINE # 924
0005 E0                MOVX    A,@DPTR
0006 FF                MOV     R7,A
0007 C4                SWAP    A
0008 54F0              ANL     A,#0F0H
000A FF                MOV     R7,A
000B 904005            MOV     DPTR,#04005H
000E E0                MOVX    A,@DPTR
000F 540F              ANL     A,#0FH
0011 4F                ORL     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 925
0013 22                RET     
             ; FUNCTION _CyCpuClk_SetDivider (END)

             ; FUNCTION _CyUsbClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 948
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
0005 E0                MOVX    A,@DPTR
0006 5403              ANL     A,#03H
0008 FF                MOV     R7,A
0009 904009            MOV     DPTR,#04009H
000C E0                MOVX    A,@DPTR
000D 54FC              ANL     A,#0FCH
000F 4F                ORL     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 952
0011 22                RET     
             ; FUNCTION _CyUsbClk_SetSource (END)

             ; FUNCTION CyILO_Start1K (BEGIN)
                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 976
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 4402              ORL     A,#02H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 977
0007 22                RET     
             ; FUNCTION CyILO_Start1K (END)

             ; FUNCTION CyILO_Stop1K (BEGIN)
                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1004
0000 904300            MOV     DPTR,#04300H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 64  

0003 E0                MOVX    A,@DPTR
0004 54FD              ANL     A,#0FDH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1005
0007 22                RET     
             ; FUNCTION CyILO_Stop1K (END)

             ; FUNCTION CyILO_Start100K (BEGIN)
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 4404              ORL     A,#04H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1025
0007 22                RET     
             ; FUNCTION CyILO_Start100K (END)

             ; FUNCTION CyILO_Stop100K (BEGIN)
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1044
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 54FB              ANL     A,#0FBH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
0007 22                RET     
             ; FUNCTION CyILO_Stop100K (END)

             ; FUNCTION CyILO_Enable33K (BEGIN)
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1068
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 4420              ORL     A,#020H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1069
0007 22                RET     
             ; FUNCTION CyILO_Enable33K (END)

             ; FUNCTION CyILO_Disable33K (BEGIN)
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1091
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 54DF              ANL     A,#0DFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1092
0007 22                RET     
             ; FUNCTION CyILO_Disable33K (END)

             ; FUNCTION _CyILO_SetSource (BEGIN)
                                           ; SOURCE LINE # 1113
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1116
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 65  

0005 E0                MOVX    A,@DPTR
0006 FF                MOV     R7,A
0007 25E0              ADD     A,ACC
0009 25E0              ADD     A,ACC
000B 540C              ANL     A,#0CH
000D FF                MOV     R7,A
000E 904000            MOV     DPTR,#04000H
0011 E0                MOVX    A,@DPTR
0012 54F3              ANL     A,#0F3H
0014 4F                ORL     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1117
0016 22                RET     
             ; FUNCTION _CyILO_SetSource (END)

             ; FUNCTION _CyILO_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1137
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1142
0005 904300            MOV     DPTR,#04300H
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#state
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1145
000D 900000      R     MOV     DPTR,#mode
0010 E0                MOVX    A,@DPTR
0011 600A              JZ      ?C0103
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 4410              ORL     A,#010H
0017 904300            MOV     DPTR,#04300H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
001B 800A              SJMP    ?C0104
001D         ?C0103:
                                           ; SOURCE LINE # 1150
                                           ; SOURCE LINE # 1151
001D 900000      R     MOV     DPTR,#state
0020 E0                MOVX    A,@DPTR
0021 54EF              ANL     A,#0EFH
0023 904300            MOV     DPTR,#04300H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1152
0027         ?C0104:
                                           ; SOURCE LINE # 1155
0027 900000      R     MOV     DPTR,#state
002A E0                MOVX    A,@DPTR
002B 5410              ANL     A,#010H
002D FF                MOV     R7,A
002E E4                CLR     A
002F C4                SWAP    A
0030 F8                MOV     R0,A
0031 54F0              ANL     A,#0F0H
0033 C8                XCH     A,R0
0034 68                XRL     A,R0
0035 EF                MOV     A,R7
0036 C4                SWAP    A
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 66  

0037 540F              ANL     A,#0FH
0039 48                ORL     A,R0
003A FF                MOV     R7,A
                                           ; SOURCE LINE # 1156
003B         ?C0105:
003B 22                RET     
             ; FUNCTION _CyILO_SetPowerMode (END)

             ; FUNCTION CyXTAL_32KHZ_Start (BEGIN)
                                           ; SOURCE LINE # 1173
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1177
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1178
0006 904698            MOV     DPTR,#04698H
0009 7403              MOV     A,#03H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1179
000C 904309            MOV     DPTR,#04309H
000F E0                MOVX    A,@DPTR
0010 54F3              ANL     A,#0F3H
0012 4404              ORL     A,#04H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1183
0015 904308            MOV     DPTR,#04308H
0018 E0                MOVX    A,@DPTR
0019 4404              ORL     A,#04H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1187
001C E0                MOVX    A,@DPTR
001D 4401              ORL     A,#01H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1189
0020 900000      R     MOV     DPTR,#i
0023 7403              MOV     A,#03H
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 74E8              MOV     A,#0E8H
0029 F0                MOVX    @DPTR,A
002A         ?C0106:
002A 900000      R     MOV     DPTR,#i
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 D3                SETB    C
0032 9400              SUBB    A,#00H
0034 EE                MOV     A,R6
0035 9400              SUBB    A,#00H
0037 4024              JC      ?C0110
                                           ; SOURCE LINE # 1190
                                           ; SOURCE LINE # 1191
0039 120000      R     LCALL   CyXTAL_32KHZ_ReadStatus
003C EF                MOV     A,R7
003D 30E506            JNB     ACC.5,?C0109
                                           ; SOURCE LINE # 1192
                                           ; SOURCE LINE # 1194
0040 E4                CLR     A
0041 FF                MOV     R7,A
0042 120000      R     LCALL   _CyXTAL_32KHZ_SetPowerMode
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 67  

                                           ; SOURCE LINE # 1196
0045 22                RET     
                                           ; SOURCE LINE # 1197
0046         ?C0109:
                                           ; SOURCE LINE # 1198
0046 7F01              MOV     R7,#01H
0048 7E00              MOV     R6,#00H
004A 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1199
004D 900000      R     MOV     DPTR,#i+01H
0050 E0                MOVX    A,@DPTR
0051 24FF              ADD     A,#0FFH
0053 F0                MOVX    @DPTR,A
0054 900000      R     MOV     DPTR,#i
0057 E0                MOVX    A,@DPTR
0058 34FF              ADDC    A,#0FFH
005A F0                MOVX    @DPTR,A
005B 80CD              SJMP    ?C0106
                                           ; SOURCE LINE # 1200
005D         ?C0110:
005D 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Start (END)

             ; FUNCTION CyXTAL_32KHZ_Stop (BEGIN)
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1220
0006 904698            MOV     DPTR,#04698H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1221
000B 904309            MOV     DPTR,#04309H
000E E0                MOVX    A,@DPTR
000F 54F3              ANL     A,#0F3H
0011 4404              ORL     A,#04H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1223
0014 904308            MOV     DPTR,#04308H
0017 E0                MOVX    A,@DPTR
0018 54FC              ANL     A,#0FCH
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1226
001B E0                MOVX    A,@DPTR
001C 54FB              ANL     A,#0FBH
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1228
001F 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Stop (END)

             ; FUNCTION CyXTAL_32KHZ_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1249
                                           ; SOURCE LINE # 1250
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 5420              ANL     A,#020H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 1251
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 68  

0007         ?C0112:
0007 22                RET     
             ; FUNCTION CyXTAL_32KHZ_ReadStatus (END)

             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1272
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1274
0005 904308            MOV     DPTR,#04308H
0008 E0                MOVX    A,@DPTR
0009 5402              ANL     A,#02H
000B 6004              JZ      ?C0113
000D 7F01              MOV     R7,#01H
000F 8002              SJMP    ?C0114
0011         ?C0113:
0011 7F00              MOV     R7,#00H
0013         ?C0114:
0013 900000      R     MOV     DPTR,#state
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
0018 90430A            MOV     DPTR,#0430AH
001B 74F3              MOV     A,#0F3H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1278
001E 900000      R     MOV     DPTR,#mode
0021 E0                MOVX    A,@DPTR
0022 6401              XRL     A,#01H
0024 7025              JNZ     ?C0115
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1281
0026 904698            MOV     DPTR,#04698H
0029 04                INC     A
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1282
002B 7F0A              MOV     R7,#0AH
002D 7E00              MOV     R6,#00H
002F 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1283
0032 904309            MOV     DPTR,#04309H
0035 E0                MOVX    A,@DPTR
0036 54F3              ANL     A,#0F3H
0038 4408              ORL     A,#08H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
003B 7F14              MOV     R7,#014H
003D 7E00              MOV     R6,#00H
003F 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1286
0042 904308            MOV     DPTR,#04308H
0045 E0                MOVX    A,@DPTR
0046 4402              ORL     A,#02H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1287
0049 801D              SJMP    ?C0116
004B         ?C0115:
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1291
004B 904698            MOV     DPTR,#04698H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 69  

004E 7406              MOV     A,#06H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1292
0051 7F0A              MOV     R7,#0AH
0053 7E00              MOV     R6,#00H
0055 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1293
0058 904309            MOV     DPTR,#04309H
005B E0                MOVX    A,@DPTR
005C 54F3              ANL     A,#0F3H
005E 4404              ORL     A,#04H
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1295
0061 904308            MOV     DPTR,#04308H
0064 E0                MOVX    A,@DPTR
0065 54FD              ANL     A,#0FDH
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1296
0068         ?C0116:
                                           ; SOURCE LINE # 1298
0068 900000      R     MOV     DPTR,#state
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
                                           ; SOURCE LINE # 1299
006D         ?C0117:
006D 22                RET     
             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (END)

             ; FUNCTION _CyXTAL_Start (BEGIN)
                                           ; SOURCE LINE # 1338
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1339
                                           ; SOURCE LINE # 1340
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1341
0008 900000      R     MOV     DPTR,#wait
000B E0                MOVX    A,@DPTR
000C 900000      R     MOV     DPTR,#timeout
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1349
0010 904210            MOV     DPTR,#04210H
0013 E0                MOVX    A,@DPTR
0014 4401              ORL     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1352
0017 900000      R     MOV     DPTR,#wait
001A E0                MOVX    A,@DPTR
001B D3                SETB    C
001C 9400              SUBB    A,#00H
001E 5003              JNC     $ + 5H
0020 020000      R     LJMP    ?C0118
                                           ; SOURCE LINE # 1353
                                           ; SOURCE LINE # 1355
0023 904300            MOV     DPTR,#04300H
0026 E0                MOVX    A,@DPTR
0027 900000      R     MOV     DPTR,#iloEnableState
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1356
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 70  

002B 904380            MOV     DPTR,#04380H
002E E0                MOVX    A,@DPTR
002F 900000      R     MOV     DPTR,#pmTwCfg0Tmp
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1357
0033 904382            MOV     DPTR,#04382H
0036 E0                MOVX    A,@DPTR
0037 900000      R     MOV     DPTR,#pmTwCfg2Tmp
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1360
003B 7F18              MOV     R7,#018H
003D 120000      E     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 1361
0040 900000      R     MOV     DPTR,#status
0043 7410              MOV     A,#010H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1364
0046         ?C0119:
0046 900000      R     MOV     DPTR,#timeout
0049 E0                MOVX    A,@DPTR
004A D3                SETB    C
004B 9400              SUBB    A,#00H
004D 403B              JC      ?C0120
                                           ; SOURCE LINE # 1365
                                           ; SOURCE LINE # 1367
004F 904210            MOV     DPTR,#04210H
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
                                           ; SOURCE LINE # 1370
0054 900000      R     MOV     DPTR,#count
0057 7404              MOV     A,#04H
0059 F0                MOVX    @DPTR,A
005A         ?C0122:
005A 900000      R     MOV     DPTR,#count
005D E0                MOVX    A,@DPTR
005E D3                SETB    C
005F 9400              SUBB    A,#00H
0061 4011              JC      ?C0123
                                           ; SOURCE LINE # 1371
0063         ?C0125:
                                           ; SOURCE LINE # 1372
0063 7F01              MOV     R7,#01H
0065 120000      E     LCALL   _CyPmReadStatus
0068 EF                MOV     A,R7
0069 30E0F7            JNB     ACC.0,?C0125
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1375
006C         ?C0126:
                                           ; SOURCE LINE # 1376
006C         ?C0124:
006C 900000      R     MOV     DPTR,#count
006F E0                MOVX    A,@DPTR
0070 14                DEC     A
0071 F0                MOVX    @DPTR,A
0072 80E6              SJMP    ?C0122
0074         ?C0123:
                                           ; SOURCE LINE # 1383
0074 904210            MOV     DPTR,#04210H
0077 E0                MOVX    A,@DPTR
0078 5480              ANL     A,#080H
007A 7006              JNZ     ?C0121
                                           ; SOURCE LINE # 1384
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 71  

                                           ; SOURCE LINE # 1385
007C 900000      R     MOV     DPTR,#status
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1386
0080 8008              SJMP    ?C0120
                                           ; SOURCE LINE # 1387
                                           ; SOURCE LINE # 1388
0082         ?C0121:
0082 900000      R     MOV     DPTR,#timeout
0085 E0                MOVX    A,@DPTR
0086 14                DEC     A
0087 F0                MOVX    @DPTR,A
0088 80BC              SJMP    ?C0119
008A         ?C0120:
                                           ; SOURCE LINE # 1392
008A 900000      R     MOV     DPTR,#iloEnableState
008D E0                MOVX    A,@DPTR
008E 5404              ANL     A,#04H
0090 7003              JNZ     ?C0128
                                           ; SOURCE LINE # 1393
                                           ; SOURCE LINE # 1394
0092 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 1395
0095         ?C0128:
                                           ; SOURCE LINE # 1396
0095 900000      R     MOV     DPTR,#pmTwCfg0Tmp
0098 E0                MOVX    A,@DPTR
0099 904380            MOV     DPTR,#04380H
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1397
009D 900000      R     MOV     DPTR,#pmTwCfg2Tmp
00A0 E0                MOVX    A,@DPTR
00A1 904382            MOV     DPTR,#04382H
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1398
00A5         ?C0118:
                                           ; SOURCE LINE # 1400
00A5 900000      R     MOV     DPTR,#status
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
                                           ; SOURCE LINE # 1401
00AA         ?C0129:
00AA 22                RET     
             ; FUNCTION _CyXTAL_Start (END)

             ; FUNCTION CyXTAL_Stop (BEGIN)
                                           ; SOURCE LINE # 1418
                                           ; SOURCE LINE # 1419
                                           ; SOURCE LINE # 1421
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1422
0007 22                RET     
             ; FUNCTION CyXTAL_Stop (END)

             ; FUNCTION CyXTAL_EnableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1440
                                           ; SOURCE LINE # 1441
                                           ; SOURCE LINE # 1443
0000 904210            MOV     DPTR,#04210H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 72  

0003 E0                MOVX    A,@DPTR
0004 54FB              ANL     A,#0FBH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1444
0007 22                RET     
             ; FUNCTION CyXTAL_EnableErrStatus (END)

             ; FUNCTION CyXTAL_DisableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1462
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1465
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 4404              ORL     A,#04H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1466
0007 22                RET     
             ; FUNCTION CyXTAL_DisableErrStatus (END)

             ; FUNCTION CyXTAL_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1486
                                           ; SOURCE LINE # 1487
                                           ; SOURCE LINE # 1492
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 5480              ANL     A,#080H
0006 6004              JZ      ?C0133
0008 7F01              MOV     R7,#01H
000A 8002              SJMP    ?C0134
000C         ?C0133:
000C 7F00              MOV     R7,#00H
000E         ?C0134:
                                           ; SOURCE LINE # 1493
000E         ?C0135:
000E 22                RET     
             ; FUNCTION CyXTAL_ReadStatus (END)

             ; FUNCTION CyXTAL_EnableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1513
                                           ; SOURCE LINE # 1514
                                           ; SOURCE LINE # 1515
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 4440              ORL     A,#040H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1516
0007 22                RET     
             ; FUNCTION CyXTAL_EnableFaultRecovery (END)

             ; FUNCTION CyXTAL_DisableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1535
                                           ; SOURCE LINE # 1536
                                           ; SOURCE LINE # 1537
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 54BF              ANL     A,#0BFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1538
0007 22                RET     
             ; FUNCTION CyXTAL_DisableFaultRecovery (END)

             ; FUNCTION _CyXTAL_SetStartup (BEGIN)
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 73  

                                           ; SOURCE LINE # 1561
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1562
                                           ; SOURCE LINE # 1563
0005 E0                MOVX    A,@DPTR
0006 541F              ANL     A,#01FH
0008 FF                MOV     R7,A
0009 904212            MOV     DPTR,#04212H
000C E0                MOVX    A,@DPTR
000D 54E0              ANL     A,#0E0H
000F 4F                ORL     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1565
0011 22                RET     
             ; FUNCTION _CyXTAL_SetStartup (END)

             ; FUNCTION _CyXTAL_SetFbVoltage (BEGIN)
                                           ; SOURCE LINE # 1585
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1586
                                           ; SOURCE LINE # 1587
0005 E0                MOVX    A,@DPTR
0006 540F              ANL     A,#0FH
0008 FF                MOV     R7,A
0009 904213            MOV     DPTR,#04213H
000C E0                MOVX    A,@DPTR
000D 54F0              ANL     A,#0F0H
000F 4F                ORL     A,R7
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1589
0011 22                RET     
             ; FUNCTION _CyXTAL_SetFbVoltage (END)

             ; FUNCTION _CyXTAL_SetWdVoltage (BEGIN)
                                           ; SOURCE LINE # 1608
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1609
                                           ; SOURCE LINE # 1611
0005 E0                MOVX    A,@DPTR
0006 FF                MOV     R7,A
0007 C4                SWAP    A
0008 54F0              ANL     A,#0F0H
000A 5470              ANL     A,#070H
000C FF                MOV     R7,A
000D 904213            MOV     DPTR,#04213H
0010 E0                MOVX    A,@DPTR
0011 548F              ANL     A,#08FH
0013 4F                ORL     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1612
0015 22                RET     
             ; FUNCTION _CyXTAL_SetWdVoltage (END)

             ; FUNCTION _?CyHalt (BEGIN)
                                           ; SOURCE LINE # 1629
0000 90FFFF            MOV     DPTR,#0FFFFH
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 74  

0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1631
                                           ; SOURCE LINE # 1632
                                           ; SOURCE LINE # 1634
0008         ?C0141:
                                           ; SOURCE LINE # 1641
0008 9046EA            MOV     DPTR,#046EAH
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1643
000E 900001            MOV     DPTR,#01H
0011 120000      E     LCALL   ?C?ADDXBP
0014 22                RET     
             ; FUNCTION _?CyHalt (END)

             ; FUNCTION CySoftwareReset (BEGIN)
                                           ; SOURCE LINE # 1660
                                           ; SOURCE LINE # 1661
                                           ; SOURCE LINE # 1662
0000 9046F6            MOV     DPTR,#046F6H
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1663
0007 22                RET     
             ; FUNCTION CySoftwareReset (END)

             ; FUNCTION _?CyDelay (BEGIN)
                                           ; SOURCE LINE # 1686
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
0009         ?C0144:
                                           ; SOURCE LINE # 1688
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
000F E0                MOVX    A,@DPTR
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 D3                SETB    C
0018 9400              SUBB    A,#00H
001A EE                MOV     A,R6
001B 9480              SUBB    A,#080H
001D 403D              JC      ?C0145
                                           ; SOURCE LINE # 1689
                                           ; SOURCE LINE # 1694
001F 900000      R     MOV     DPTR,#cydelay_32k_ms
0022 E0                MOVX    A,@DPTR
0023 FC                MOV     R4,A
0024 A3                INC     DPTR
0025 E0                MOVX    A,@DPTR
0026 FD                MOV     R5,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 FE                MOV     R6,A
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 75  

002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1695
0030 850083      E     MOV     DPH,?C_XBP
0033 850082      E     MOV     DPL,?C_XBP+01H
0036 C083              PUSH    DPH
0038 C082              PUSH    DPL
003A E0                MOVX    A,@DPTR
003B FC                MOV     R4,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FD                MOV     R5,A
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 2400              ADD     A,#00H
0046 FF                MOV     R7,A
0047 EE                MOV     A,R6
0048 3480              ADDC    A,#080H
004A FE                MOV     R6,A
004B ED                MOV     A,R5
004C 34FF              ADDC    A,#0FFH
004E FD                MOV     R5,A
004F EC                MOV     A,R4
0050 34FF              ADDC    A,#0FFH
0052 FC                MOV     R4,A
0053 D082              POP     DPL
0055 D083              POP     DPH
0057 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1696
005A 80AD              SJMP    ?C0144
005C         ?C0145:
                                           ; SOURCE LINE # 1698
005C 900000      R     MOV     DPTR,#cydelay_freq_khz
005F E0                MOVX    A,@DPTR
0060 FC                MOV     R4,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FD                MOV     R5,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A 850083      E     MOV     DPH,?C_XBP
006D 850082      E     MOV     DPL,?C_XBP+01H
0070 E0                MOVX    A,@DPTR
0071 F8                MOV     R0,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 F9                MOV     R1,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FA                MOV     R2,A
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A FB                MOV     R3,A
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 76  

007B 120000      E     LCALL   ?C?LMUL
007E 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1699
0081 900004            MOV     DPTR,#04H
0084 120000      E     LCALL   ?C?ADDXBP
0087 22                RET     
             ; FUNCTION _?CyDelay (END)

             ; FUNCTION _?CyDelayFreq (BEGIN)
                                           ; SOURCE LINE # 1757
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1759
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
000F E0                MOVX    A,@DPTR
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 4E                ORL     A,R6
0018 6019              JZ      ?C0147
                                           ; SOURCE LINE # 1760
                                           ; SOURCE LINE # 1761
001A 850083      E     MOV     DPH,?C_XBP
001D 850082      E     MOV     DPL,?C_XBP+01H
0020 E0                MOVX    A,@DPTR
0021 FC                MOV     R4,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FD                MOV     R5,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#cydelay_freq_hz
002E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1762
0031 800E              SJMP    ?C0148
0033         ?C0147:
                                           ; SOURCE LINE # 1764
                                           ; SOURCE LINE # 1765
0033 7F00              MOV     R7,#00H
0035 7E36              MOV     R6,#036H
0037 7D6E              MOV     R5,#06EH
0039 7C01              MOV     R4,#01H
003B 900000      R     MOV     DPTR,#cydelay_freq_hz
003E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1766
0041         ?C0148:
                                           ; SOURCE LINE # 1768
0041 900000      R     MOV     DPTR,#cydelay_freq_hz
0044 E0                MOVX    A,@DPTR
0045 FC                MOV     R4,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 77  

0048 FD                MOV     R5,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FE                MOV     R6,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E 243F              ADD     A,#03FH
0050 FF                MOV     R7,A
0051 EE                MOV     A,R6
0052 3442              ADDC    A,#042H
0054 FE                MOV     R6,A
0055 ED                MOV     A,R5
0056 340F              ADDC    A,#0FH
0058 FD                MOV     R5,A
0059 E4                CLR     A
005A 3C                ADDC    A,R4
005B FC                MOV     R4,A
005C 7B40              MOV     R3,#040H
005E 7A42              MOV     R2,#042H
0060 790F              MOV     R1,#0FH
0062 7800              MOV     R0,#00H
0064 120000      E     LCALL   ?C?ULDIV
0067 900000      R     MOV     DPTR,#cydelay_freq_mhz
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1769
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FC                MOV     R4,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FE                MOV     R6,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 24E7              ADD     A,#0E7H
0079 FF                MOV     R7,A
007A EE                MOV     A,R6
007B 3403              ADDC    A,#03H
007D FE                MOV     R6,A
007E E4                CLR     A
007F 3D                ADDC    A,R5
0080 FD                MOV     R5,A
0081 E4                CLR     A
0082 3C                ADDC    A,R4
0083 FC                MOV     R4,A
0084 E4                CLR     A
0085 7BE8              MOV     R3,#0E8H
0087 7A03              MOV     R2,#03H
0089 F9                MOV     R1,A
008A F8                MOV     R0,A
008B 120000      E     LCALL   ?C?ULDIV
008E 900000      R     MOV     DPTR,#cydelay_freq_khz
0091 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1770
0094 E4                CLR     A
0095 FF                MOV     R7,A
0096 7E80              MOV     R6,#080H
0098 FD                MOV     R5,A
0099 FC                MOV     R4,A
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 78  

009A 900000      R     MOV     DPTR,#cydelay_freq_khz
009D E0                MOVX    A,@DPTR
009E F8                MOV     R0,A
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 F9                MOV     R1,A
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 FA                MOV     R2,A
00A5 A3                INC     DPTR
00A6 E0                MOVX    A,@DPTR
00A7 FB                MOV     R3,A
00A8 120000      E     LCALL   ?C?LMUL
00AB 900000      R     MOV     DPTR,#cydelay_32k_ms
00AE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1771
00B1 900004            MOV     DPTR,#04H
00B4 120000      E     LCALL   ?C?ADDXBP
00B7 22                RET     
             ; FUNCTION _?CyDelayFreq (END)

             ; FUNCTION _CyWdtStart (BEGIN)
                                           ; SOURCE LINE # 1820
0000 900000      R     MOV     DPTR,#ticks
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1821
                                           ; SOURCE LINE # 1823
0008 900000      R     MOV     DPTR,#ticks
000B E0                MOVX    A,@DPTR
000C 5403              ANL     A,#03H
000E FF                MOV     R7,A
000F 904383            MOV     DPTR,#04383H
0012 E0                MOVX    A,@DPTR
0013 54FC              ANL     A,#0FCH
0015 4F                ORL     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1826
0017 E0                MOVX    A,@DPTR
0018 4480              ORL     A,#080H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1827
001B E0                MOVX    A,@DPTR
001C 547F              ANL     A,#07FH
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1831
001F 900000      R     MOV     DPTR,#lpMode
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 C4                SWAP    A
0025 33                RLC     A
0026 54E0              ANL     A,#0E0H
0028 5460              ANL     A,#060H
002A FF                MOV     R7,A
002B 904383            MOV     DPTR,#04383H
002E E0                MOVX    A,@DPTR
002F 549F              ANL     A,#09FH
0031 4F                ORL     A,R7
0032 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 79  

                                           ; SOURCE LINE # 1834
0033 E0                MOVX    A,@DPTR
0034 4410              ORL     A,#010H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1835
0037 22                RET     
             ; FUNCTION _CyWdtStart (END)

             ; FUNCTION CyWdtClear (BEGIN)
                                           ; SOURCE LINE # 1852
                                           ; SOURCE LINE # 1853
                                           ; SOURCE LINE # 1854
0000 904384            MOV     DPTR,#04384H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1855
0006 22                RET     
             ; FUNCTION CyWdtClear (END)

             ; FUNCTION _CyVdLvDigitEnable (BEGIN)
                                           ; SOURCE LINE # 1880
0000 900000      R     MOV     DPTR,#reset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1881
                                           ; SOURCE LINE # 1882
0008 9044C8            MOV     DPTR,#044C8H
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1884
000E 9046F7            MOV     DPTR,#046F7H
0011 E0                MOVX    A,@DPTR
0012 54BF              ANL     A,#0BFH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1887
0015 9046F4            MOV     DPTR,#046F4H
0018 E0                MOVX    A,@DPTR
0019 54F0              ANL     A,#0F0H
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#threshold
001F E0                MOVX    A,@DPTR
0020 540F              ANL     A,#0FH
0022 4F                ORL     A,R7
0023 9046F4            MOV     DPTR,#046F4H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1888
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 4401              ORL     A,#01H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1891
002C 7F01              MOV     R7,#01H
002E 7E00              MOV     R6,#00H
0030 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1893
0033 9046FA            MOV     DPTR,#046FAH
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
                                           ; SOURCE LINE # 1895
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 80  

0038 900000      R     MOV     DPTR,#reset
003B E0                MOVX    A,@DPTR
003C 6009              JZ      ?C0152
                                           ; SOURCE LINE # 1896
                                           ; SOURCE LINE # 1897
003E 9046F7            MOV     DPTR,#046F7H
0041 E0                MOVX    A,@DPTR
0042 4440              ORL     A,#040H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1898
0045 8007              SJMP    ?C0153
0047         ?C0152:
                                           ; SOURCE LINE # 1900
                                           ; SOURCE LINE # 1901
0047 9046F7            MOV     DPTR,#046F7H
004A E0                MOVX    A,@DPTR
004B 54BF              ANL     A,#0BFH
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1902
004E         ?C0153:
                                           ; SOURCE LINE # 1904
004E 9044D8            MOV     DPTR,#044D8H
0051 7401              MOV     A,#01H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1905
0054 9044C0            MOV     DPTR,#044C0H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1906
0058 22                RET     
             ; FUNCTION _CyVdLvDigitEnable (END)

             ; FUNCTION _CyVdLvAnalogEnable (BEGIN)
                                           ; SOURCE LINE # 1930
0000 900000      R     MOV     DPTR,#reset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1931
                                           ; SOURCE LINE # 1932
0008 9044C8            MOV     DPTR,#044C8H
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1934
000E 9046F7            MOV     DPTR,#046F7H
0011 E0                MOVX    A,@DPTR
0012 547F              ANL     A,#07FH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1936
0015 900000      R     MOV     DPTR,#threshold
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A C4                SWAP    A
001B 54F0              ANL     A,#0F0H
001D FF                MOV     R7,A
001E 9046F4            MOV     DPTR,#046F4H
0021 E0                MOVX    A,@DPTR
0022 540F              ANL     A,#0FH
0024 4F                ORL     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1937
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 81  

0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 4402              ORL     A,#02H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1940
002B 7F01              MOV     R7,#01H
002D 7E00              MOV     R6,#00H
002F 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1942
0032 9046FA            MOV     DPTR,#046FAH
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
                                           ; SOURCE LINE # 1944
0037 900000      R     MOV     DPTR,#reset
003A E0                MOVX    A,@DPTR
003B 6009              JZ      ?C0155
                                           ; SOURCE LINE # 1945
                                           ; SOURCE LINE # 1946
003D 9046F7            MOV     DPTR,#046F7H
0040 E0                MOVX    A,@DPTR
0041 4480              ORL     A,#080H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1947
0044 8007              SJMP    ?C0156
0046         ?C0155:
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
0046 9046F7            MOV     DPTR,#046F7H
0049 E0                MOVX    A,@DPTR
004A 547F              ANL     A,#07FH
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1951
004D         ?C0156:
                                           ; SOURCE LINE # 1953
004D 9044D8            MOV     DPTR,#044D8H
0050 7401              MOV     A,#01H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1954
0053 9044C0            MOV     DPTR,#044C0H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1955
0057 22                RET     
             ; FUNCTION _CyVdLvAnalogEnable (END)

             ; FUNCTION CyVdLvDigitDisable (BEGIN)
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1974
                                           ; SOURCE LINE # 1975
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1977
0007 9046F7            MOV     DPTR,#046F7H
000A E0                MOVX    A,@DPTR
000B 54BF              ANL     A,#0BFH
000D F0                MOVX    @DPTR,A
000E         ?C0158:
                                           ; SOURCE LINE # 1979
000E 9046FA            MOV     DPTR,#046FAH
0011 E0                MOVX    A,@DPTR
0012 5407              ANL     A,#07H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 82  

0014 70F8              JNZ     ?C0158
                                           ; SOURCE LINE # 1980
                                           ; SOURCE LINE # 1982
0016         ?C0159:
                                           ; SOURCE LINE # 1983
0016         ?C0160:
0016 22                RET     
             ; FUNCTION CyVdLvDigitDisable (END)

             ; FUNCTION CyVdLvAnalogDisable (BEGIN)
                                           ; SOURCE LINE # 2001
                                           ; SOURCE LINE # 2002
                                           ; SOURCE LINE # 2003
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 54FD              ANL     A,#0FDH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2005
0007 9046F7            MOV     DPTR,#046F7H
000A E0                MOVX    A,@DPTR
000B 547F              ANL     A,#07FH
000D F0                MOVX    @DPTR,A
000E         ?C0161:
                                           ; SOURCE LINE # 2007
000E 9046FA            MOV     DPTR,#046FAH
0011 E0                MOVX    A,@DPTR
0012 5407              ANL     A,#07H
0014 70F8              JNZ     ?C0161
                                           ; SOURCE LINE # 2008
                                           ; SOURCE LINE # 2010
0016         ?C0162:
                                           ; SOURCE LINE # 2011
0016         ?C0163:
0016 22                RET     
             ; FUNCTION CyVdLvAnalogDisable (END)

             ; FUNCTION CyVdHvAnalogEnable (BEGIN)
                                           ; SOURCE LINE # 2029
                                           ; SOURCE LINE # 2030
                                           ; SOURCE LINE # 2031
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2033
0006 9046F7            MOV     DPTR,#046F7H
0009 E0                MOVX    A,@DPTR
000A 547F              ANL     A,#07FH
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2035
000D 9046F5            MOV     DPTR,#046F5H
0010 E0                MOVX    A,@DPTR
0011 4404              ORL     A,#04H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2038
0014 7F01              MOV     R7,#01H
0016 7E00              MOV     R6,#00H
0018 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 2040
001B 9046FA            MOV     DPTR,#046FAH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
                                           ; SOURCE LINE # 2042
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 83  

0020 9044D8            MOV     DPTR,#044D8H
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2043
0026 9044C0            MOV     DPTR,#044C0H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2044
002A 22                RET     
             ; FUNCTION CyVdHvAnalogEnable (END)

             ; FUNCTION CyVdHvAnalogDisable (BEGIN)
                                           ; SOURCE LINE # 2062
                                           ; SOURCE LINE # 2063
                                           ; SOURCE LINE # 2064
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 54FB              ANL     A,#0FBH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2065
0007 22                RET     
             ; FUNCTION CyVdHvAnalogDisable (END)

             ; FUNCTION _CyVdStickyStatus (BEGIN)
                                           ; SOURCE LINE # 2088
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2089
                                           ; SOURCE LINE # 2092
0005 9046FA            MOV     DPTR,#046FAH
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#status
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2093
000D 9046FA            MOV     DPTR,#046FAH
0010 C083              PUSH    DPH
0012 C082              PUSH    DPL
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 900000      R     MOV     DPTR,#mask
0019 E0                MOVX    A,@DPTR
001A F4                CPL     A
001B FE                MOV     R6,A
001C EF                MOV     A,R7
001D 5E                ANL     A,R6
001E D082              POP     DPL
0020 D083              POP     DPH
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2095
0023 900000      R     MOV     DPTR,#status
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 2096
0028         ?C0166:
0028 22                RET     
             ; FUNCTION _CyVdStickyStatus (END)

             ; FUNCTION CyVdRealTimeStatus (BEGIN)
                                           ; SOURCE LINE # 2117
                                           ; SOURCE LINE # 2118
                                           ; SOURCE LINE # 2122
0000 120000      E     LCALL   CyEnterCriticalSection
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 84  

0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2123
0008 9046FC            MOV     DPTR,#046FCH
000B E0                MOVX    A,@DPTR
000C 900000      R     MOV     DPTR,#vdFlagsState
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2124
0010 900000      R     MOV     DPTR,#interruptState
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 2126
0018 900000      R     MOV     DPTR,#vdFlagsState
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 2127
001D         ?C0167:
001D 22                RET     
             ; FUNCTION CyVdRealTimeStatus (END)

             ; FUNCTION CyDisableInts (BEGIN)
                                           ; SOURCE LINE # 2144
                                           ; SOURCE LINE # 2145
                                           ; SOURCE LINE # 2149
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2154
0008 9044C8            MOV     DPTR,#044C8H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D E4                CLR     A
000E FC                MOV     R4,A
000F FD                MOV     R5,A
0010 FE                MOV     R6,A
0011 900000      R     MOV     DPTR,#intState
0014 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2155
0017 900000      R     MOV     DPTR,#intState
001A E0                MOVX    A,@DPTR
001B FC                MOV     R4,A
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FD                MOV     R5,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 C004              PUSH    AR4
0027 C005              PUSH    AR5
0029 C006              PUSH    AR6
002B C007              PUSH    AR7
002D 9044C9            MOV     DPTR,#044C9H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 E4                CLR     A
0033 FC                MOV     R4,A
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 85  

0034 FD                MOV     R5,A
0035 FE                MOV     R6,A
0036 7808              MOV     R0,#08H
0038 120000      E     LCALL   ?C?LSHL
003B A804              MOV     R0,AR4
003D A905              MOV     R1,AR5
003F AA06              MOV     R2,AR6
0041 AB07              MOV     R3,AR7
0043 D007              POP     AR7
0045 D006              POP     AR6
0047 D005              POP     AR5
0049 D004              POP     AR4
004B EF                MOV     A,R7
004C 4B                ORL     A,R3
004D FF                MOV     R7,A
004E EE                MOV     A,R6
004F 4A                ORL     A,R2
0050 FE                MOV     R6,A
0051 ED                MOV     A,R5
0052 49                ORL     A,R1
0053 FD                MOV     R5,A
0054 EC                MOV     A,R4
0055 48                ORL     A,R0
0056 FC                MOV     R4,A
0057 900000      R     MOV     DPTR,#intState
005A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2156
005D 900000      R     MOV     DPTR,#intState
0060 E0                MOVX    A,@DPTR
0061 FC                MOV     R4,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FD                MOV     R5,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B C004              PUSH    AR4
006D C005              PUSH    AR5
006F C006              PUSH    AR6
0071 C007              PUSH    AR7
0073 9044CA            MOV     DPTR,#044CAH
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 E4                CLR     A
0079 FC                MOV     R4,A
007A FD                MOV     R5,A
007B FE                MOV     R6,A
007C 7810              MOV     R0,#010H
007E 120000      E     LCALL   ?C?LSHL
0081 A804              MOV     R0,AR4
0083 A905              MOV     R1,AR5
0085 AA06              MOV     R2,AR6
0087 AB07              MOV     R3,AR7
0089 D007              POP     AR7
008B D006              POP     AR6
008D D005              POP     AR5
008F D004              POP     AR4
0091 EF                MOV     A,R7
0092 4B                ORL     A,R3
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 86  

0093 FF                MOV     R7,A
0094 EE                MOV     A,R6
0095 4A                ORL     A,R2
0096 FE                MOV     R6,A
0097 ED                MOV     A,R5
0098 49                ORL     A,R1
0099 FD                MOV     R5,A
009A EC                MOV     A,R4
009B 48                ORL     A,R0
009C FC                MOV     R4,A
009D 900000      R     MOV     DPTR,#intState
00A0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2157
00A3 900000      R     MOV     DPTR,#intState
00A6 E0                MOVX    A,@DPTR
00A7 FC                MOV     R4,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FD                MOV     R5,A
00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD FE                MOV     R6,A
00AE A3                INC     DPTR
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 C004              PUSH    AR4
00B3 C005              PUSH    AR5
00B5 C006              PUSH    AR6
00B7 C007              PUSH    AR7
00B9 9044CB            MOV     DPTR,#044CBH
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE E4                CLR     A
00BF FC                MOV     R4,A
00C0 FD                MOV     R5,A
00C1 FE                MOV     R6,A
00C2 7818              MOV     R0,#018H
00C4 120000      E     LCALL   ?C?LSHL
00C7 A804              MOV     R0,AR4
00C9 A905              MOV     R1,AR5
00CB AA06              MOV     R2,AR6
00CD AB07              MOV     R3,AR7
00CF D007              POP     AR7
00D1 D006              POP     AR6
00D3 D005              POP     AR5
00D5 D004              POP     AR4
00D7 EF                MOV     A,R7
00D8 4B                ORL     A,R3
00D9 FF                MOV     R7,A
00DA EE                MOV     A,R6
00DB 4A                ORL     A,R2
00DC FE                MOV     R6,A
00DD ED                MOV     A,R5
00DE 49                ORL     A,R1
00DF FD                MOV     R5,A
00E0 EC                MOV     A,R4
00E1 48                ORL     A,R0
00E2 FC                MOV     R4,A
00E3 900000      R     MOV     DPTR,#intState
00E6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2161
00E9 9044C8            MOV     DPTR,#044C8H
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 87  

00EC 74FF              MOV     A,#0FFH
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2162
00EF A3                INC     DPTR
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2163
00F1 A3                INC     DPTR
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2164
00F3 A3                INC     DPTR
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2176
00F5 900000      R     MOV     DPTR,#interruptState
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 2178
00FD 900000      R     MOV     DPTR,#intState
0100 E0                MOVX    A,@DPTR
0101 FC                MOV     R4,A
0102 A3                INC     DPTR
0103 E0                MOVX    A,@DPTR
0104 FD                MOV     R5,A
0105 A3                INC     DPTR
0106 E0                MOVX    A,@DPTR
0107 FE                MOV     R6,A
0108 A3                INC     DPTR
0109 E0                MOVX    A,@DPTR
010A FF                MOV     R7,A
                                           ; SOURCE LINE # 2179
010B         ?C0168:
010B 22                RET     
             ; FUNCTION CyDisableInts (END)

             ; FUNCTION _CyEnableInts (BEGIN)
                                           ; SOURCE LINE # 2196
0000 900000      R     MOV     DPTR,#mask
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2197
                                           ; SOURCE LINE # 2201
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2206
000E 900000      R     MOV     DPTR,#mask
0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 7818              MOV     R0,#018H
001E 120000      E     LCALL   ?C?ULSHR
0021 9044C3            MOV     DPTR,#044C3H
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 88  

                                           ; SOURCE LINE # 2207
0026 900000      R     MOV     DPTR,#mask
0029 E0                MOVX    A,@DPTR
002A FC                MOV     R4,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FD                MOV     R5,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FE                MOV     R6,A
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 7810              MOV     R0,#010H
0036 120000      E     LCALL   ?C?ULSHR
0039 9044C2            MOV     DPTR,#044C2H
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2208
003E 900000      R     MOV     DPTR,#mask
0041 E0                MOVX    A,@DPTR
0042 FC                MOV     R4,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FD                MOV     R5,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FE                MOV     R6,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 7808              MOV     R0,#08H
004E 120000      E     LCALL   ?C?ULSHR
0051 9044C1            MOV     DPTR,#044C1H
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2209
0056 900000      R     MOV     DPTR,#mask
0059 E0                MOVX    A,@DPTR
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E A3                INC     DPTR
005F E0                MOVX    A,@DPTR
0060 9044C0            MOV     DPTR,#044C0H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2217
0064 900000      R     MOV     DPTR,#interruptState
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 2219
006C 22                RET     
             ; FUNCTION _CyEnableInts (END)

             ; FUNCTION _CyIntSetVector (BEGIN)
                                           ; SOURCE LINE # 2500
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 89  

0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2501
                                           ; SOURCE LINE # 2502
                                           ; SOURCE LINE # 2504
000B 900000      R     MOV     DPTR,#number
000E E0                MOVX    A,@DPTR
000F D3                SETB    C
0010 941F              SUBB    A,#01FH
0012 5002              JNC     ?C0171
0014 8001              SJMP    ?C0172
0016         ?C0171:
0016 C3                CLR     C
0017         ?C0172:
0017 4005              JC      ?C0170
0019 7F00              MOV     R7,#00H
001B 120000      R     LCALL   _?CyHalt
001E         ?C0170:
                                           ; SOURCE LINE # 2507
001E 900000      R     MOV     DPTR,#number
0021 E0                MOVX    A,@DPTR
0022 541F              ANL     A,#01FH
0024 25E0              ADD     A,ACC
0026 FF                MOV     R7,A
0027 E4                CLR     A
0028 33                RLC     A
0029 FE                MOV     R6,A
002A E4                CLR     A
002B 2F                ADD     A,R7
002C FF                MOV     R7,A
002D EE                MOV     A,R6
002E 3444              ADDC    A,#044H
0030 FA                MOV     R2,A
0031 A907              MOV     R1,AR7
0033 7B01              MOV     R3,#01H
0035 120000      E     LCALL   _cyread16_nodpx
0038 900000      R     MOV     DPTR,#oldIsr
003B EE                MOV     A,R6
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2511
0040 900000      R     MOV     DPTR,#number
0043 E0                MOVX    A,@DPTR
0044 75F002            MOV     B,#02H
0047 A4                MUL     AB
0048 2400              ADD     A,#00H
004A FF                MOV     R7,A
004B E5F0              MOV     A,B
004D 3444              ADDC    A,#044H
004F FA                MOV     R2,A
0050 A907              MOV     R1,AR7
0052 7B01              MOV     R3,#01H
0054 A3                INC     DPTR
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 90  

0059 FF                MOV     R7,A
005A FD                MOV     R5,A
005B AC06              MOV     R4,AR6
005D 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 2513
0060 900000      R     MOV     DPTR,#oldIsr
0063 E0                MOVX    A,@DPTR
0064 FE                MOV     R6,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
                                           ; SOURCE LINE # 2514
0068         ?C0173:
0068 22                RET     
             ; FUNCTION _CyIntSetVector (END)

             ; FUNCTION _CyIntGetVector (BEGIN)
                                           ; SOURCE LINE # 2531
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2532
                                           ; SOURCE LINE # 2533
0005 E0                MOVX    A,@DPTR
0006 D3                SETB    C
0007 941F              SUBB    A,#01FH
0009 5002              JNC     ?C0175
000B 8001              SJMP    ?C0176
000D         ?C0175:
000D C3                CLR     C
000E         ?C0176:
000E 4005              JC      ?C0174
0010 7F00              MOV     R7,#00H
0012 120000      R     LCALL   _?CyHalt
0015         ?C0174:
                                           ; SOURCE LINE # 2535
0015 900000      R     MOV     DPTR,#number
0018 E0                MOVX    A,@DPTR
0019 541F              ANL     A,#01FH
001B 25E0              ADD     A,ACC
001D FF                MOV     R7,A
001E E4                CLR     A
001F 33                RLC     A
0020 FE                MOV     R6,A
0021 E4                CLR     A
0022 2F                ADD     A,R7
0023 FF                MOV     R7,A
0024 EE                MOV     A,R6
0025 3444              ADDC    A,#044H
0027 FA                MOV     R2,A
0028 A907              MOV     R1,AR7
002A 7B01              MOV     R3,#01H
002C 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 2537
002F         ?C0177:
002F 22                RET     
             ; FUNCTION _CyIntGetVector (END)

             ; FUNCTION _CyIntSetPriority (BEGIN)
                                           ; SOURCE LINE # 2555
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 91  

0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2556
                                           ; SOURCE LINE # 2557
0008 E0                MOVX    A,@DPTR
0009 D3                SETB    C
000A 9407              SUBB    A,#07H
000C 5002              JNC     ?C0179
000E 8001              SJMP    ?C0180
0010         ?C0179:
0010 C3                CLR     C
0011         ?C0180:
0011 4005              JC      ?C0178
0013 7F00              MOV     R7,#00H
0015 120000      R     LCALL   _?CyHalt
0018         ?C0178:
                                           ; SOURCE LINE # 2559
0018 900000      R     MOV     DPTR,#number
001B E0                MOVX    A,@DPTR
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 5002              JNC     ?C0182
0021 8001              SJMP    ?C0183
0023         ?C0182:
0023 C3                CLR     C
0024         ?C0183:
0024 4005              JC      ?C0181
0026 7F00              MOV     R7,#00H
0028 120000      R     LCALL   _?CyHalt
002B         ?C0181:
                                           ; SOURCE LINE # 2561
002B 900000      R     MOV     DPTR,#priority
002E E0                MOVX    A,@DPTR
002F 5407              ANL     A,#07H
0031 75F020            MOV     B,#020H
0034 A4                MUL     AB
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A 541F              ANL     A,#01FH
003C 2480              ADD     A,#080H
003E F582              MOV     DPL,A
0040 E4                CLR     A
0041 3444              ADDC    A,#044H
0043 F583              MOV     DPH,A
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2563
0047 22                RET     
             ; FUNCTION _CyIntSetPriority (END)

             ; FUNCTION _CyIntGetPriority (BEGIN)
                                           ; SOURCE LINE # 2580
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2581
                                           ; SOURCE LINE # 2582
                                           ; SOURCE LINE # 2584
0005 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 92  

0006 D3                SETB    C
0007 941F              SUBB    A,#01FH
0009 5002              JNC     ?C0186
000B 8001              SJMP    ?C0187
000D         ?C0186:
000D C3                CLR     C
000E         ?C0187:
000E 4005              JC      ?C0185
0010 7F00              MOV     R7,#00H
0012 120000      R     LCALL   _?CyHalt
0015         ?C0185:
                                           ; SOURCE LINE # 2586
0015 900000      R     MOV     DPTR,#number
0018 E0                MOVX    A,@DPTR
0019 541F              ANL     A,#01FH
001B 2480              ADD     A,#080H
001D F582              MOV     DPL,A
001F E4                CLR     A
0020 3444              ADDC    A,#044H
0022 F583              MOV     DPH,A
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 C4                SWAP    A
0027 13                RRC     A
0028 5407              ANL     A,#07H
002A 900000      R     MOV     DPTR,#priority
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2588
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
                                           ; SOURCE LINE # 2589
0030         ?C0188:
0030 22                RET     
             ; FUNCTION _CyIntGetPriority (END)

             ; FUNCTION _CyIntGetState (BEGIN)
                                           ; SOURCE LINE # 2606
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2607
                                           ; SOURCE LINE # 2608
                                           ; SOURCE LINE # 2610
0005 E0                MOVX    A,@DPTR
0006 D3                SETB    C
0007 941F              SUBB    A,#01FH
0009 5002              JNC     ?C0190
000B 8001              SJMP    ?C0191
000D         ?C0190:
000D C3                CLR     C
000E         ?C0191:
000E 4005              JC      ?C0189
0010 7F00              MOV     R7,#00H
0012 120000      R     LCALL   _?CyHalt
0015         ?C0189:
                                           ; SOURCE LINE # 2613
0015 900000      R     MOV     DPTR,#number
0018 E0                MOVX    A,@DPTR
0019 541F              ANL     A,#01FH
001B 7E00              MOV     R6,#00H
001D 7803              MOV     R0,#03H
001F         ?C0195:
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 93  

001F CE                XCH     A,R6
0020 C3                CLR     C
0021 13                RRC     A
0022 CE                XCH     A,R6
0023 13                RRC     A
0024 D8F9              DJNZ    R0,?C0195
0026 24C0              ADD     A,#0C0H
0028 FF                MOV     R7,A
0029 EE                MOV     A,R6
002A 3444              ADDC    A,#044H
002C 900000      R     MOV     DPTR,#stateReg
002F F0                MOVX    @DPTR,A
0030 A3                INC     DPTR
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2616
0033 900000      R     MOV     DPTR,#number
0036 E0                MOVX    A,@DPTR
0037 5407              ANL     A,#07H
0039 FF                MOV     R7,A
003A 7401              MOV     A,#01H
003C A807              MOV     R0,AR7
003E 08                INC     R0
003F 8002              SJMP    ?C0197
0041         ?C0196:
0041 C3                CLR     C
0042 33                RLC     A
0043         ?C0197:
0043 D8FC              DJNZ    R0,?C0196
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#stateReg
0049 E0                MOVX    A,@DPTR
004A FC                MOV     R4,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D F582              MOV     DPL,A
004F 8C83              MOV     DPH,R4
0051 E0                MOVX    A,@DPTR
0052 5F                ANL     A,R7
0053 6004              JZ      ?C0192
0055 7F01              MOV     R7,#01H
0057 8002              SJMP    ?C0193
0059         ?C0192:
0059 7F00              MOV     R7,#00H
005B         ?C0193:
                                           ; SOURCE LINE # 2617
005B         ?C0194:
005B 22                RET     
             ; FUNCTION _CyIntGetState (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3462    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     14      82
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.51   CYLIB                                                                 02/27/2014 19:08:30 PAGE 94  

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
