C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE FLASH_BLINK_TI
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Flash_Blink_TI.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Flash_Blink_TI.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\Flash_Blink_TI.
                    -lst) CD DB NOIP OT(0,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Flash_Blink_TI
                    -.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Flash_Blink_TI.c
   3          * Version 2.50
   4          *
   5          * Description:
   6          *  The Timer component consists of a 8, 16, 24 or 32-bit timer with
   7          *  a selectable period between 2 and 2^Width - 1.  The timer may free run
   8          *  or be used as a capture timer as well.  The capture can be initiated
   9          *  by a positive or negative edge signal as well as via software.
  10          *  A trigger input can be programmed to enable the timer on rising edge
  11          *  falling edge, either edge or continous run.
  12          *  Interrupts may be generated due to a terminal count condition
  13          *  or a capture event.
  14          *
  15          * Note:
  16          *
  17          ********************************************************************************
  18          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions,
  20          * disclaimers, and limitations in the end user license agreement accompanying
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "Flash_Blink_TI.h"
  25          
  26          uint8 Flash_Blink_TI_initVar = 0u;
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: Flash_Blink_TI_Init
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initialize to the schematic state
  35          *
  36          * Parameters:
  37          *  void
  38          *
  39          * Return:
  40          *  void
  41          *
  42          *******************************************************************************/
  43          void Flash_Blink_TI_Init(void) 
  44          {
  45   1          #if(!Flash_Blink_TI_UsingFixedFunction)
  46   1                  /* Interrupt State Backup for Critical Region*/
  47   1                  uint8 Flash_Blink_TI_interruptState;
  48   1          #endif /* Interrupt state back up for Fixed Function only */
  49   1      
  50   1          #if (Flash_Blink_TI_UsingFixedFunction)
                      /* Clear all bits but the enable bit (if it's already set) for Timer operation */
                      Flash_Blink_TI_CONTROL &= Flash_Blink_TI_CTRL_ENABLE;
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 2   

              
                      /* Clear the mode bits for continuous run mode */
                      #if (CY_PSOC5A)
                          Flash_Blink_TI_CONTROL2 &= ((uint8)(~Flash_Blink_TI_CTRL_MODE_MASK));
                      #endif /* Clear bits in CONTROL2 only in PSOC5A */
              
                      #if (CY_PSOC3 || CY_PSOC5LP)
                          Flash_Blink_TI_CONTROL3 &= ((uint8)(~Flash_Blink_TI_CTRL_MODE_MASK));
                      #endif /* CONTROL3 register exists only in PSoC3 OR PSoC5LP */
              
                      /* Check if One Shot mode is enabled i.e. RunMode !=0*/
                      #if (Flash_Blink_TI_RunModeUsed != 0x0u)
                          /* Set 3rd bit of Control register to enable one shot mode */
                          Flash_Blink_TI_CONTROL |= 0x04u;
                      #endif /* One Shot enabled only when RunModeUsed is not Continuous*/
              
                      #if (Flash_Blink_TI_RunModeUsed == 2)
                          #if (CY_PSOC5A)
                              /* Set last 2 bits of control2 register if one shot(halt on
                              interrupt) is enabled*/
                              Flash_Blink_TI_CONTROL2 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Set last 2 bits of control3 register if one shot(halt on
                              interrupt) is enabled*/
                              Flash_Blink_TI_CONTROL3 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL3 for PSoC3 or PSoC5LP */
              
                      #endif /* Remove section if One Shot Halt on Interrupt is not enabled */
              
                      #if (Flash_Blink_TI_UsingHWEnable != 0)
                          #if (CY_PSOC5A)
                              /* Set the default Run Mode of the Timer to Continuous */
                              Flash_Blink_TI_CONTROL2 |= Flash_Blink_TI_CTRL_MODE_PULSEWIDTH;
                          #endif /* Set Continuous Run Mode in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Clear and Set ROD and COD bits of CFG2 register */
                              Flash_Blink_TI_CONTROL3 &= ((uint8)(~Flash_Blink_TI_CTRL_RCOD_MASK));
                              Flash_Blink_TI_CONTROL3 |= Flash_Blink_TI_CTRL_RCOD;
              
                              /* Clear and Enable the HW enable bit in CFG2 register */
                              Flash_Blink_TI_CONTROL3 &= ((uint8)(~Flash_Blink_TI_CTRL_ENBL_MASK));
                              Flash_Blink_TI_CONTROL3 |= Flash_Blink_TI_CTRL_ENBL;
              
                              /* Set the default Run Mode of the Timer to Continuous */
                              Flash_Blink_TI_CONTROL3 |= Flash_Blink_TI_CTRL_MODE_CONTINUOUS;
                          #endif /* Set Continuous Run Mode in CONTROL3 for PSoC3ES3 or PSoC5A */
              
                      #endif /* Configure Run Mode with hardware enable */
              
                      /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
                      Flash_Blink_TI_RT1 &= ((uint8)(~Flash_Blink_TI_RT1_MASK));
                      Flash_Blink_TI_RT1 |= Flash_Blink_TI_SYNC;
              
                      /*Enable DSI Sync all all inputs of the Timer*/
                      Flash_Blink_TI_RT1 &= ((uint8)(~Flash_Blink_TI_SYNCDSI_MASK));
                      Flash_Blink_TI_RT1 |= Flash_Blink_TI_SYNCDSI_EN;
              
                      /* Set the IRQ to use the status register interrupts */
                      Flash_Blink_TI_CONTROL2 |= Flash_Blink_TI_CTRL2_IRQ_SEL;
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 3   

                  #endif /* Configuring registers of fixed function implementation */
 116   1      
 117   1          /* Set Initial values from Configuration */
 118   1          Flash_Blink_TI_WritePeriod(Flash_Blink_TI_INIT_PERIOD);
 119   1          Flash_Blink_TI_WriteCounter(Flash_Blink_TI_INIT_PERIOD);
 120   1      
 121   1          #if (Flash_Blink_TI_UsingHWCaptureCounter)/* Capture counter is enabled */
                      Flash_Blink_TI_CAPTURE_COUNT_CTRL |= Flash_Blink_TI_CNTR_ENABLE;
                      Flash_Blink_TI_SetCaptureCount(Flash_Blink_TI_INIT_CAPTURE_COUNT);
                  #endif /* Configure capture counter value */
 125   1      
 126   1          #if (!Flash_Blink_TI_UsingFixedFunction)
 127   1              #if (Flash_Blink_TI_SoftwareCaptureMode)
                          Flash_Blink_TI_SetCaptureMode(Flash_Blink_TI_INIT_CAPTURE_MODE);
                      #endif /* Set Capture Mode for UDB implementation if capture mode is software controlled */
 130   1      
 131   1              #if (Flash_Blink_TI_SoftwareTriggerMode)
                          if (0u == (Flash_Blink_TI_CONTROL & Flash_Blink_TI__B_TIMER__TM_SOFTWARE))
                          {
                              Flash_Blink_TI_SetTriggerMode(Flash_Blink_TI_INIT_TRIGGER_MODE);
                          }
                      #endif /* Set trigger mode for UDB Implementation if trigger mode is software controlled */
 137   1      
 138   1              /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
 139   1              /* Enter Critical Region*/
 140   1              Flash_Blink_TI_interruptState = CyEnterCriticalSection();
 141   1      
 142   1              /* Use the interrupt output of the status register for IRQ output */
 143   1              Flash_Blink_TI_STATUS_AUX_CTRL |= Flash_Blink_TI_STATUS_ACTL_INT_EN_MASK;
 144   1      
 145   1              /* Exit Critical Region*/
 146   1              CyExitCriticalSection(Flash_Blink_TI_interruptState);
 147   1      
 148   1              #if (Flash_Blink_TI_EnableTriggerMode)
                          Flash_Blink_TI_EnableTrigger();
                      #endif /* Set Trigger enable bit for UDB implementation in the control register*/
 151   1      
 152   1              #if (Flash_Blink_TI_InterruptOnCaptureCount)
                           #if (!Flash_Blink_TI_ControlRegRemoved)
                              Flash_Blink_TI_SetInterruptCount(Flash_Blink_TI_INIT_INT_CAPTURE_COUNT);
                          #endif /* Set interrupt count in control register if control register is not removed */
                      #endif /*Set interrupt count in UDB implementation if interrupt count feature is checked.*/
 157   1      
 158   1              Flash_Blink_TI_ClearFIFO();
 159   1          #endif /* Configure additional features of UDB implementation */
 160   1      
 161   1          Flash_Blink_TI_SetInterruptMode(Flash_Blink_TI_INIT_INTERRUPT_MODE);
 162   1      }
 163          
 164          
 165          /*******************************************************************************
 166          * Function Name: Flash_Blink_TI_Enable
 167          ********************************************************************************
 168          *
 169          * Summary:
 170          *  Enable the Timer
 171          *
 172          * Parameters:
 173          *  void
 174          *
 175          * Return:
 176          *  void
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 4   

 177          *
 178          *******************************************************************************/
 179          void Flash_Blink_TI_Enable(void) 
 180          {
 181   1          /* Globally Enable the Fixed Function Block chosen */
 182   1          #if (Flash_Blink_TI_UsingFixedFunction)
                      Flash_Blink_TI_GLOBAL_ENABLE |= Flash_Blink_TI_BLOCK_EN_MASK;
                      Flash_Blink_TI_GLOBAL_STBY_ENABLE |= Flash_Blink_TI_BLOCK_STBY_EN_MASK;
                  #endif /* Set Enable bit for enabling Fixed function timer*/
 186   1      
 187   1          /* Remove assignment if control register is removed */
 188   1          #if (!Flash_Blink_TI_ControlRegRemoved || Flash_Blink_TI_UsingFixedFunction)
 189   1              Flash_Blink_TI_CONTROL |= Flash_Blink_TI_CTRL_ENABLE;
 190   1          #endif /* Remove assignment if control register is removed */
 191   1      }
 192          
 193          
 194          /*******************************************************************************
 195          * Function Name: Flash_Blink_TI_Start
 196          ********************************************************************************
 197          *
 198          * Summary:
 199          *  The start function initializes the timer with the default values, the
 200          *  enables the timerto begin counting.  It does not enable interrupts,
 201          *  the EnableInt command should be called if interrupt generation is required.
 202          *
 203          * Parameters:
 204          *  void
 205          *
 206          * Return:
 207          *  void
 208          *
 209          * Global variables:
 210          *  Flash_Blink_TI_initVar: Is modified when this function is called for the
 211          *   first time. Is used to ensure that initialization happens only once.
 212          *
 213          *******************************************************************************/
 214          void Flash_Blink_TI_Start(void) 
 215          {
 216   1          if(Flash_Blink_TI_initVar == 0u)
 217   1          {
 218   2              Flash_Blink_TI_Init();
 219   2      
 220   2              Flash_Blink_TI_initVar = 1u;   /* Clear this bit for Initialization */
 221   2          }
 222   1      
 223   1          /* Enable the Timer */
 224   1          Flash_Blink_TI_Enable();
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name: Flash_Blink_TI_Stop
 230          ********************************************************************************
 231          *
 232          * Summary:
 233          *  The stop function halts the timer, but does not change any modes or disable
 234          *  interrupts.
 235          *
 236          * Parameters:
 237          *  void
 238          *
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 5   

 239          * Return:
 240          *  void
 241          *
 242          * Side Effects: If the Enable mode is set to Hardware only then this function
 243          *               has no effect on the operation of the timer.
 244          *
 245          *******************************************************************************/
 246          void Flash_Blink_TI_Stop(void) 
 247          {
 248   1          /* Disable Timer */
 249   1          #if(!Flash_Blink_TI_ControlRegRemoved || Flash_Blink_TI_UsingFixedFunction)
 250   1              Flash_Blink_TI_CONTROL &= ((uint8)(~Flash_Blink_TI_CTRL_ENABLE));
 251   1          #endif /* Remove assignment if control register is removed */
 252   1      
 253   1          /* Globally disable the Fixed Function Block chosen */
 254   1          #if (Flash_Blink_TI_UsingFixedFunction)
                      Flash_Blink_TI_GLOBAL_ENABLE &= ((uint8)(~Flash_Blink_TI_BLOCK_EN_MASK));
                      Flash_Blink_TI_GLOBAL_STBY_ENABLE &= ((uint8)(~Flash_Blink_TI_BLOCK_STBY_EN_MASK));
                  #endif /* Disable global enable for the Timer Fixed function block to stop the Timer*/
 258   1      }
 259          
 260          
 261          /*******************************************************************************
 262          * Function Name: Flash_Blink_TI_SetInterruptMode
 263          ********************************************************************************
 264          *
 265          * Summary:
 266          *  This function selects which of the interrupt inputs may cause an interrupt.
 267          *  The twosources are caputure and terminal.  One, both or neither may
 268          *  be selected.
 269          *
 270          * Parameters:
 271          *  interruptMode:   This parameter is used to enable interrups on either/or
 272          *                   terminal count or capture.
 273          *
 274          * Return:
 275          *  void
 276          *
 277          *******************************************************************************/
 278          void Flash_Blink_TI_SetInterruptMode(uint8 interruptMode) 
 279          {
 280   1          Flash_Blink_TI_STATUS_MASK = interruptMode;
 281   1      }
 282          
 283          
 284          /*******************************************************************************
 285          * Function Name: Flash_Blink_TI_SoftwareCapture
 286          ********************************************************************************
 287          *
 288          * Summary:
 289          *  This function forces a capture independent of the capture signal.
 290          *
 291          * Parameters:
 292          *  void
 293          *
 294          * Return:
 295          *  void
 296          *
 297          * Side Effects:
 298          *  An existing hardware capture could be overwritten.
 299          *
 300          *******************************************************************************/
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 6   

 301          void Flash_Blink_TI_SoftwareCapture(void) 
 302          {
 303   1          /* Generate a software capture by reading the counter register */
 304   1          (void)Flash_Blink_TI_COUNTER_LSB;
 305   1          /* Capture Data is now in the FIFO */
 306   1      }
 307          
 308          
 309          /*******************************************************************************
 310          * Function Name: Flash_Blink_TI_ReadStatusRegister
 311          ********************************************************************************
 312          *
 313          * Summary:
 314          *  Reads the status register and returns it's state. This function should use
 315          *  defined types for the bit-field information as the bits in this register may
 316          *  be permuteable.
 317          *
 318          * Parameters:
 319          *  void
 320          *
 321          * Return:
 322          *  The contents of the status register
 323          *
 324          * Side Effects:
 325          *  Status register bits may be clear on read.
 326          *
 327          *******************************************************************************/
 328          uint8   Flash_Blink_TI_ReadStatusRegister(void) 
 329          {
 330   1          return (Flash_Blink_TI_STATUS);
 331   1      }
 332          
 333          
 334          #if (!Flash_Blink_TI_ControlRegRemoved) /* Remove API if control register is removed */
 335          
 336          
 337          /*******************************************************************************
 338          * Function Name: Flash_Blink_TI_ReadControlRegister
 339          ********************************************************************************
 340          *
 341          * Summary:
 342          *  Reads the control register and returns it's value.
 343          *
 344          * Parameters:
 345          *  void
 346          *
 347          * Return:
 348          *  The contents of the control register
 349          *
 350          *******************************************************************************/
 351          uint8 Flash_Blink_TI_ReadControlRegister(void) 
 352          {
 353   1          return ((uint8)Flash_Blink_TI_CONTROL);
 354   1      }
 355          
 356          
 357          /*******************************************************************************
 358          * Function Name: Flash_Blink_TI_WriteControlRegister
 359          ********************************************************************************
 360          *
 361          * Summary:
 362          *  Sets the bit-field of the control register.
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 7   

 363          *
 364          * Parameters:
 365          *  control: The contents of the control register
 366          *
 367          * Return:
 368          *
 369          *******************************************************************************/
 370          void Flash_Blink_TI_WriteControlRegister(uint8 control) 
 371          {
 372   1          Flash_Blink_TI_CONTROL = control;
 373   1      }
 374          #endif /* Remove API if control register is removed */
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: Flash_Blink_TI_ReadPeriod
 379          ********************************************************************************
 380          *
 381          * Summary:
 382          *  This function returns the current value of the Period.
 383          *
 384          * Parameters:
 385          *  void
 386          *
 387          * Return:
 388          *  The present value of the counter.
 389          *
 390          *******************************************************************************/
 391          uint16 Flash_Blink_TI_ReadPeriod(void) 
 392          {
 393   1         #if(Flash_Blink_TI_UsingFixedFunction)
                     return ((uint16)CY_GET_REG16(Flash_Blink_TI_PERIOD_LSB_PTR));
                 #else
 396   1             return (CY_GET_REG16(Flash_Blink_TI_PERIOD_LSB_PTR));
 397   1         #endif /* (Flash_Blink_TI_UsingFixedFunction) */
 398   1      }
 399          
 400          
 401          /*******************************************************************************
 402          * Function Name: Flash_Blink_TI_WritePeriod
 403          ********************************************************************************
 404          *
 405          * Summary:
 406          *  This function is used to change the period of the counter.  The new period
 407          *  will be loaded the next time terminal count is detected.
 408          *
 409          * Parameters:
 410          *  period: This value may be between 1 and (2^Resolution)-1.  A value of 0 will
 411          *          result in the counter remaining at zero.
 412          *
 413          * Return:
 414          *  void
 415          *
 416          *******************************************************************************/
 417          void Flash_Blink_TI_WritePeriod(uint16 period) 
 418          {
 419   1          #if(Flash_Blink_TI_UsingFixedFunction)
                      uint16 period_temp = (uint16)period;
                      CY_SET_REG16(Flash_Blink_TI_PERIOD_LSB_PTR, period_temp);
                  #else
 423   1              CY_SET_REG16(Flash_Blink_TI_PERIOD_LSB_PTR, period);
 424   1          #endif /*Write Period value with appropriate resolution suffix depending on UDB or fixed function impl
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 8   

             -ementation */
 425   1      }
 426          
 427          
 428          /*******************************************************************************
 429          * Function Name: Flash_Blink_TI_ReadCapture
 430          ********************************************************************************
 431          *
 432          * Summary:
 433          *  This function returns the last value captured.
 434          *
 435          * Parameters:
 436          *  void
 437          *
 438          * Return:
 439          *  Present Capture value.
 440          *
 441          *******************************************************************************/
 442          uint16 Flash_Blink_TI_ReadCapture(void) 
 443          {
 444   1         #if(Flash_Blink_TI_UsingFixedFunction)
                     return ((uint16)CY_GET_REG16(Flash_Blink_TI_CAPTURE_LSB_PTR));
                 #else
 447   1             return (CY_GET_REG16(Flash_Blink_TI_CAPTURE_LSB_PTR));
 448   1         #endif /* (Flash_Blink_TI_UsingFixedFunction) */
 449   1      }
 450          
 451          
 452          /*******************************************************************************
 453          * Function Name: Flash_Blink_TI_WriteCounter
 454          ********************************************************************************
 455          *
 456          * Summary:
 457          *  This funtion is used to set the counter to a specific value
 458          *
 459          * Parameters:
 460          *  counter:  New counter value.
 461          *
 462          * Return:
 463          *  void
 464          *
 465          *******************************************************************************/
 466          void Flash_Blink_TI_WriteCounter(uint16 counter) \
 467                                             
 468          {
 469   1         #if(Flash_Blink_TI_UsingFixedFunction)
                      /* This functionality is removed until a FixedFunction HW update to
                       * allow this register to be written
                       */
                      CY_SET_REG16(Flash_Blink_TI_COUNTER_LSB_PTR, (uint16)counter);
                      
                  #else
 476   1              CY_SET_REG16(Flash_Blink_TI_COUNTER_LSB_PTR, counter);
 477   1          #endif /* Set Write Counter only for the UDB implementation (Write Counter not available in fixed func
             -tion Timer */
 478   1      }
 479          
 480          
 481          /*******************************************************************************
 482          * Function Name: Flash_Blink_TI_ReadCounter
 483          ********************************************************************************
 484          *
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 9   

 485          * Summary:
 486          *  This function returns the current counter value.
 487          *
 488          * Parameters:
 489          *  void
 490          *
 491          * Return:
 492          *  Present compare value.
 493          *
 494          *******************************************************************************/
 495          uint16 Flash_Blink_TI_ReadCounter(void) 
 496          {
 497   1      
 498   1          /* Force capture by reading Accumulator */
 499   1          /* Must first do a software capture to be able to read the counter */
 500   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 501   1          (void)Flash_Blink_TI_COUNTER_LSB;
 502   1      
 503   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 504   1          #if(Flash_Blink_TI_UsingFixedFunction)
                      return ((uint16)CY_GET_REG16(Flash_Blink_TI_CAPTURE_LSB_PTR));
                  #else
 507   1              return (CY_GET_REG16(Flash_Blink_TI_CAPTURE_LSB_PTR));
 508   1          #endif /* (Flash_Blink_TI_UsingFixedFunction) */
 509   1      }
 510          
 511          
 512          #if(!Flash_Blink_TI_UsingFixedFunction) /* UDB Specific Functions */
 513          
 514          /*******************************************************************************
 515           * The functions below this point are only available using the UDB
 516           * implementation.  If a feature is selected, then the API is enabled.
 517           ******************************************************************************/
 518          
 519          
 520          #if (Flash_Blink_TI_SoftwareCaptureMode)
              
              
              /*******************************************************************************
              * Function Name: Flash_Blink_TI_SetCaptureMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture mode to either rising or falling edge.
              *
              * Parameters:
              *  captureMode: This parameter sets the capture mode of the UDB capture feature
              *  The parameter values are defined using the
              *  #define Flash_Blink_TI__B_TIMER__CM_NONE 0
              #define Flash_Blink_TI__B_TIMER__CM_RISINGEDGE 1
              #define Flash_Blink_TI__B_TIMER__CM_FALLINGEDGE 2
              #define Flash_Blink_TI__B_TIMER__CM_EITHEREDGE 3
              #define Flash_Blink_TI__B_TIMER__CM_SOFTWARE 4
               identifiers
              *  The following are the possible values of the parameter
              *  Flash_Blink_TI__B_TIMER__CM_NONE        - Set Capture mode to None
              *  Flash_Blink_TI__B_TIMER__CM_RISINGEDGE  - Rising edge of Capture input
              *  Flash_Blink_TI__B_TIMER__CM_FALLINGEDGE - Falling edge of Capture input
              *  Flash_Blink_TI__B_TIMER__CM_EITHEREDGE  - Either edge of Capture input
              *
              * Return:
              *  void
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 10  

              *
              *******************************************************************************/
              void Flash_Blink_TI_SetCaptureMode(uint8 captureMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  captureMode = ((uint8)((uint8)captureMode << Flash_Blink_TI_CTRL_CAP_MODE_SHIFT));
                  captureMode &= (Flash_Blink_TI_CTRL_CAP_MODE_MASK);
              
                  /* Clear the Current Setting */
                  Flash_Blink_TI_CONTROL &= ((uint8)(~Flash_Blink_TI_CTRL_CAP_MODE_MASK));
              
                  /* Write The New Setting */
                  Flash_Blink_TI_CONTROL |= captureMode;
              }
              #endif /* Remove API if Capture Mode is not Software Controlled */
 562          
 563          
 564          #if (Flash_Blink_TI_SoftwareTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: Flash_Blink_TI_SetTriggerMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the trigger input mode
              *
              * Parameters:
              *  triggerMode: Pass one of the pre-defined Trigger Modes (except Software)
                  #define Flash_Blink_TI__B_TIMER__TM_NONE 0x00u
                  #define Flash_Blink_TI__B_TIMER__TM_RISINGEDGE 0x04u
                  #define Flash_Blink_TI__B_TIMER__TM_FALLINGEDGE 0x08u
                  #define Flash_Blink_TI__B_TIMER__TM_EITHEREDGE 0x0Cu
                  #define Flash_Blink_TI__B_TIMER__TM_SOFTWARE 0x10u
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Flash_Blink_TI_SetTriggerMode(uint8 triggerMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  triggerMode &= Flash_Blink_TI_CTRL_TRIG_MODE_MASK;
              
                  /* Clear the Current Setting */
                  Flash_Blink_TI_CONTROL &= ((uint8)(~Flash_Blink_TI_CTRL_TRIG_MODE_MASK));
              
                  /* Write The New Setting */
                  Flash_Blink_TI_CONTROL |= (triggerMode | Flash_Blink_TI__B_TIMER__TM_SOFTWARE);
              
              }
              #endif /* Remove API if Trigger Mode is not Software Controlled */
 599          
 600          #if (Flash_Blink_TI_EnableTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: Flash_Blink_TI_EnableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Sets the control bit enabling Hardware Trigger mode
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 11  

              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Flash_Blink_TI_EnableTrigger(void) 
              {
                  #if (!Flash_Blink_TI_ControlRegRemoved)   /* Remove assignment if control register is removed */
                      Flash_Blink_TI_CONTROL |= Flash_Blink_TI_CTRL_TRIG_EN;
                  #endif /* Remove code section if control register is not used */
              }
              
              
              /*******************************************************************************
              * Function Name: Flash_Blink_TI_DisableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Clears the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Flash_Blink_TI_DisableTrigger(void) 
              {
                  #if (!Flash_Blink_TI_ControlRegRemoved)   /* Remove assignment if control register is removed */
                      Flash_Blink_TI_CONTROL &= ((uint8)(~Flash_Blink_TI_CTRL_TRIG_EN));
                  #endif /* Remove code section if control register is not used */
              }
              #endif /* Remove API is Trigger Mode is set to None */
 646          
 647          
 648          #if(Flash_Blink_TI_InterruptOnCaptureCount)
              #if (!Flash_Blink_TI_ControlRegRemoved)   /* Remove API if control register is removed */
              
              
              /*******************************************************************************
              * Function Name: Flash_Blink_TI_SetInterruptCount
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture count before an interrupt is triggered.
              *
              * Parameters:
              *  interruptCount:  A value between 0 and 3 is valid.  If the value is 0, then
              *                   an interrupt will occur each time a capture occurs.
              *                   A value of 1 to 3 will cause the interrupt
              *                   to delay by the same number of captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Flash_Blink_TI_SetInterruptCount(uint8 interruptCount) 
              {
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 12  

                  /* This must only set to two bits of the control register associated */
                  interruptCount &= Flash_Blink_TI_CTRL_INTCNT_MASK;
              
                  /* Clear the Current Setting */
                  Flash_Blink_TI_CONTROL &= ((uint8)(~Flash_Blink_TI_CTRL_INTCNT_MASK));
                  /* Write The New Setting */
                  Flash_Blink_TI_CONTROL |= interruptCount;
              }
              #endif /* Remove API if control register is removed */
              #endif /* Flash_Blink_TI_InterruptOnCaptureCount */
 681          
 682          
 683          #if (Flash_Blink_TI_UsingHWCaptureCounter)
              
              
              /*******************************************************************************
              * Function Name: Flash_Blink_TI_SetCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture count
              *
              * Parameters:
              *  captureCount: A value between 2 and 127 inclusive is valid.  A value of 1
              *                to 127 will cause the interrupt to delay by the same number of
              *                captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void Flash_Blink_TI_SetCaptureCount(uint8 captureCount) 
              {
                  Flash_Blink_TI_CAP_COUNT = captureCount;
              }
              
              
              /*******************************************************************************
              * Function Name: Flash_Blink_TI_ReadCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function reads the capture count setting
              *
              * Parameters:
              *  void
              *
              * Return:
              *  Returns the Capture Count Setting
              *
              *******************************************************************************/
              uint8 Flash_Blink_TI_ReadCaptureCount(void) 
              {
                  return ((uint8)Flash_Blink_TI_CAP_COUNT);
              }
              #endif /* Flash_Blink_TI_UsingHWCaptureCounter */
 727          
 728          
 729          /*******************************************************************************
 730          * Function Name: Flash_Blink_TI_ClearFIFO
 731          ********************************************************************************
 732          *
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 13  

 733          * Summary:
 734          *  This function clears all capture data from the capture FIFO
 735          *
 736          * Parameters:
 737          *  void
 738          *
 739          * Return:
 740          *  void
 741          *
 742          *******************************************************************************/
 743          void Flash_Blink_TI_ClearFIFO(void) 
 744          {
 745   1          while(0u != (Flash_Blink_TI_ReadStatusRegister() & Flash_Blink_TI_STATUS_FIFONEMP))
 746   1          {
 747   2              (void)Flash_Blink_TI_ReadCapture();
 748   2          }
 749   1      }
 750          
 751          #endif /* UDB Specific Functions */
 752          
 753          
 754          /* [] END OF FILE */
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Flash_Blink_TI_Init (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 118
0000 7FF3              MOV     R7,#0F3H
0002 7E01              MOV     R6,#01H
0004 120000      R     LCALL   _Flash_Blink_TI_WritePeriod
                                           ; SOURCE LINE # 119
0007 7FF3              MOV     R7,#0F3H
0009 7E01              MOV     R6,#01H
000B 120000      R     LCALL   _Flash_Blink_TI_WriteCounter
                                           ; SOURCE LINE # 140
000E 120000      E     LCALL   CyEnterCriticalSection
0011 900000      R     MOV     DPTR,#Flash_Blink_TI_interruptState
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0016 90649D            MOV     DPTR,#0649DH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4410              ORL     A,#010H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
0021 900000      R     MOV     DPTR,#Flash_Blink_TI_interruptState
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 158
0029 120000      R     LCALL   Flash_Blink_TI_ClearFIFO
                                           ; SOURCE LINE # 161
002C 7F00              MOV     R7,#00H
002E 120000      R     LCALL   _Flash_Blink_TI_SetInterruptMode
                                           ; SOURCE LINE # 162
0031         ?C0001:
0031 22                RET     
             ; FUNCTION Flash_Blink_TI_Init (END)

             ; FUNCTION Flash_Blink_TI_Enable (BEGIN)
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 189
0000 90647C            MOV     DPTR,#0647CH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4480              ORL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
000B         ?C0002:
000B 22                RET     
             ; FUNCTION Flash_Blink_TI_Enable (END)

             ; FUNCTION Flash_Blink_TI_Start (BEGIN)
                                           ; SOURCE LINE # 214
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 15  

                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0000 900000      R     MOV     DPTR,#Flash_Blink_TI_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0008 120000      R     LCALL   Flash_Blink_TI_Init
                                           ; SOURCE LINE # 220
000B 900000      R     MOV     DPTR,#Flash_Blink_TI_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0011         ?C0003:
                                           ; SOURCE LINE # 224
0011 120000      R     LCALL   Flash_Blink_TI_Enable
                                           ; SOURCE LINE # 225
0014         ?C0004:
0014 22                RET     
             ; FUNCTION Flash_Blink_TI_Start (END)

             ; FUNCTION Flash_Blink_TI_Stop (BEGIN)
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 250
0000 90647C            MOV     DPTR,#0647CH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
000B         ?C0005:
000B 22                RET     
             ; FUNCTION Flash_Blink_TI_Stop (END)

             ; FUNCTION _Flash_Blink_TI_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 278
0000 900000      R     MOV     DPTR,#interruptMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0005 900000      R     MOV     DPTR,#interruptMode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90648D            MOV     DPTR,#0648DH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
000F         ?C0006:
000F 22                RET     
             ; FUNCTION _Flash_Blink_TI_SetInterruptMode (END)

             ; FUNCTION Flash_Blink_TI_SoftwareCapture (BEGIN)
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 304
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 16  

0000 90640C            MOV     DPTR,#0640CH
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 306
0008         ?C0007:
0008 22                RET     
             ; FUNCTION Flash_Blink_TI_SoftwareCapture (END)

             ; FUNCTION Flash_Blink_TI_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0000 90646D            MOV     DPTR,#0646DH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 331
0005         ?C0008:
0005 22                RET     
             ; FUNCTION Flash_Blink_TI_ReadStatusRegister (END)

             ; FUNCTION Flash_Blink_TI_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0000 90647C            MOV     DPTR,#0647CH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 354
0005         ?C0009:
0005 22                RET     
             ; FUNCTION Flash_Blink_TI_ReadControlRegister (END)

             ; FUNCTION _Flash_Blink_TI_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 370
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90647C            MOV     DPTR,#0647CH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
000F         ?C0010:
000F 22                RET     
             ; FUNCTION _Flash_Blink_TI_WriteControlRegister (END)

             ; FUNCTION Flash_Blink_TI_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 396
0000 7B02              MOV     R3,#02H
0002 7A64              MOV     R2,#064H
0004 792C              MOV     R1,#02CH
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 398
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 17  

0009         ?C0011:
0009 22                RET     
             ; FUNCTION Flash_Blink_TI_ReadPeriod (END)

             ; FUNCTION _Flash_Blink_TI_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 417
0000 900000      R     MOV     DPTR,#period
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 423
0008 7B02              MOV     R3,#02H
000A 7A64              MOV     R2,#064H
000C 792C              MOV     R1,#02CH
000E 900000      R     MOV     DPTR,#period
0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 425
0019         ?C0012:
0019 22                RET     
             ; FUNCTION _Flash_Blink_TI_WritePeriod (END)

             ; FUNCTION Flash_Blink_TI_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 447
0000 7B02              MOV     R3,#02H
0002 7A64              MOV     R2,#064H
0004 794C              MOV     R1,#04CH
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 449
0009         ?C0013:
0009 22                RET     
             ; FUNCTION Flash_Blink_TI_ReadCapture (END)

             ; FUNCTION _Flash_Blink_TI_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 466
0000 900000      R     MOV     DPTR,#counter
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 476
0008 7B02              MOV     R3,#02H
000A 7A64              MOV     R2,#064H
000C 790C              MOV     R1,#0CH
000E 900000      R     MOV     DPTR,#counter
0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 120000      E     LCALL   _cywrite16_nodpx
C51 COMPILER V9.51   FLASH_BLINK_TI                                                        05/01/2014 23:42:30 PAGE 18  

                                           ; SOURCE LINE # 478
0019         ?C0014:
0019 22                RET     
             ; FUNCTION _Flash_Blink_TI_WriteCounter (END)

             ; FUNCTION Flash_Blink_TI_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 501
0000 90640C            MOV     DPTR,#0640CH
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 507
0008 7B02              MOV     R3,#02H
000A 7A64              MOV     R2,#064H
000C 794C              MOV     R1,#04CH
000E 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 509
0011         ?C0015:
0011 22                RET     
             ; FUNCTION Flash_Blink_TI_ReadCounter (END)

             ; FUNCTION Flash_Blink_TI_ClearFIFO (BEGIN)
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
0000         ?C0016:
                                           ; SOURCE LINE # 745
0000 120000      R     LCALL   Flash_Blink_TI_ReadStatusRegister
0003 EF                MOV     A,R7
0004 30E305            JNB     ACC.3,?C0018
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
0007 120000      R     LCALL   Flash_Blink_TI_ReadCapture
                                           ; SOURCE LINE # 748
000A 80F4              SJMP    ?C0016
000C         ?C0017:
                                           ; SOURCE LINE # 749
000C         ?C0018:
000C 22                RET     
             ; FUNCTION Flash_Blink_TI_ClearFIFO (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    251    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
