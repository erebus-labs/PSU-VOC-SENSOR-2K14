C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_ACCESS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_Access.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\USB_Access.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\USB_Access.lst) CD DB NOIP OT(2,SIZE) DF(D
                    -EBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_Access.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          #include "USB_Access.h"
  13          #include "EmEEPROM_Access.h" // Location of sampled data in flash
  14          /* This file provides function definitions for USB interactions */
  15          
  16          void USB_ISR(){
  17   1          
  18   1          // Power has just been applied to the Vbus pin, so we enter USB communication mode
  19   1      
  20   1          uint8 buffer[BUFFER_LEN];
  21   1          uint8 result = 0;
  22   1          command instruction = {0,0,0};
  23   1          
  24   1          uint8 temp = 0xFF;
  25   1        
  26   1              
  27   1          /* Start USBFS Operation with 5V operation */
  28   1          USBUART_Start(0u, USBUART_5V_OPERATION);
  29   1          
  30   1          /* Wait for Device to enumerate */
  31   1          while(!USBUART_GetConfiguration() && Vbus_Read());
  32   1      
  33   1          /* Enumeration is done, enable OUT endpoint for receive data from Host */
  34   1          USBUART_CDC_Init();
  35   1            
  36   1          while(Vbus_Read())
  37   1          {    
  38   2              temp = USBUART_DataIsReady();
  39   2              if(temp != 0u){   /* Check for input data from PC */
  40   3                  result = retrieve(buffer, &instruction);
  41   3              
  42   3                  if (result == SUCCESS){
  43   4                      
  44   4                      switch (instruction.command){
  45   5                      
  46   5                          case IDENTIFY:
  47   5                              send_reply(IDENTIFIER);
  48   5                              break;
  49   5                          
  50   5                          case DUMP_DATA:
  51   5                              dump_data();
  52   5                              //send_reply(SUCCESS);
  53   5                              break;
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 2   

  54   5                              
  55   5                          case CHANGE_SETTING:
  56   5                              apply_setting(instruction);
  57   5                              send_reply(SUCCESS);
  58   5                              break;
  59   5                              
  60   5                          default:
  61   5                              send_reply(FAIL);
  62   5                      }
  63   4                  }   
  64   3                  else{
  65   4                      send_reply(FAIL);
  66   4                  }
  67   3              }
  68   2          }
  69   1          
  70   1          USB_Close();
  71   1          
  72   1          return;
  73   1      }
  74          
  75          uint8 retrieve(uint8* buffer, command* instruction){
  76   1          uint16 count = 0;
  77   1          uint8 attempts = 0;
  78   1          uint8 result = SUCCESS;
  79   1          
  80   1          count = USBUART_GetCount(); 
  81   1          
  82   1          // If data in buffer is the right amount for a command,
  83   1          // retrieve it
  84   1          if(count == COMMAND_LENGTH){
  85   2              USBUART_GetData(buffer, COMMAND_LENGTH);
  86   2              instruction -> command = buffer[0];
  87   2              instruction -> target = buffer[1] & (buffer[2] << 0x8);
  88   2              instruction -> value = buffer[3] & (buffer[4] << 0x8);
  89   2          }
  90   1          // Otherwise, flush the USB buffer and report fail
  91   1          else{
  92   2              USBUART_GetAll(buffer);
  93   2              result = FAIL;
  94   2          }
  95   1          
  96   1          return result;
  97   1      }
  98          
  99          void apply_setting(command instruction){
 100   1          
 101   1          update_variable(instruction.target, instruction.value);    
 102   1          
 103   1          return;
 104   1      }
 105          
 106          void dump_data(){
 107   1          uint8  ExportBuffer[BUFFER_LEN]; // 64 Bytes per USB data packet.
 108   1          uint8* ExportPtr =(uint8*) MemoryLocation; 
 109   1          uint16 DataCnt = 0;
 110   1          uint8  CntSplit1, CntSplit2;
 111   1          uint8  i = 0;
 112   1          
 113   1          /* Operator */
 114   1          while (ExportPtr <= TailPtr)
 115   1          {   
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 3   

 116   2              while (i < BUFFER_LEN)
 117   2              {
 118   3                  if (ExportPtr <= TailPtr)
 119   3                  {
 120   4                      ExportBuffer[i] = *ExportPtr; // Copy sampled data from flash at *ExportPtr to buffer for 
             -send over usb com 
 121   4                      ++i;
 122   4                      ExportPtr++;
 123   4                      ++DataCnt;
 124   4                  }
 125   3                  else
 126   3                  {
 127   4                      ExportBuffer[i] = 0x00;
 128   4                      ++i;
 129   4                  }
 130   3                  
 131   3              }
 132   2              
 133   2              USBUART_PutData(ExportBuffer, BUFFER_LEN); // Send 64 byte packet of data from memory
 134   2              i = 0;
 135   2          }
 136   1          /* Trailer Packet to Identify End of Sampled Data in Memory */
 137   1          ExportBuffer[0] = 0x80;               // End of Data Identifier
 138   1          ExportBuffer[1] = 0x00;
 139   1          CntSplit1 = (uint8)0xFF00 & DataCnt;  //2 byte Count split into two 1 byte packages to be arrayed.
 140   1          CntSplit2 = (uint8)0x00FF & DataCnt;
 141   1          ExportBuffer[2] = CntSplit1;          // Count of Total Samples Sent
 142   1          ExportBuffer[3] = CntSplit2;
 143   1          USBUART_PutData(ExportBuffer, 4u); 
 144   1          
 145   1          return;
 146   1      }
 147          
 148          void send_reply(uint8 message){
 149   1         
 150   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 151   1          
 152   1          if(Vbus_Read()){
 153   2              USBUART_PutData(&message, REPLY_LEN);
 154   2          }
 155   1          
 156   1          return;
 157   1      }
 158          
 159          
 160          void USB_Close(){
 161   1          
 162   1          EEPROM_R_Stop();
 163   1          USBUART_Stop();
 164   1          CySoftwareReset();
 165   1          
 166   1          return;
 167   1      }
 168          
 169          
 170          /* [] END OF FILE */
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USB_ISR (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 21
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0005 7BFF              MOV     R3,#0FFH
0007 7A00        R     MOV     R2,#HIGH _?ix1000
0009 7900        R     MOV     R1,#LOW _?ix1000
000B C003              PUSH    AR3
000D C002              PUSH    AR2
000F C001              PUSH    AR1
0011 7B01              MOV     R3,#01H
0013 7A00        R     MOV     R2,#HIGH instruction
0015 7900        R     MOV     R1,#LOW instruction
0017 A801              MOV     R0,AR1
0019 AC02              MOV     R4,AR2
001B AD03              MOV     R5,AR3
001D D001              POP     AR1
001F D002              POP     AR2
0021 D003              POP     AR3
0023 7E00              MOV     R6,#00H
0025 7F05              MOV     R7,#05H
0027 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 24
002A 900000      R     MOV     DPTR,#temp
002D 74FF              MOV     A,#0FFH
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 28
0030 7D01              MOV     R5,#01H
0032 7F00              MOV     R7,#00H
0034 120000      E     LCALL   _USBUART_Start
0037         ?C0001:
                                           ; SOURCE LINE # 31
0037 120000      E     LCALL   USBUART_GetConfiguration
003A EF                MOV     A,R7
003B 7006              JNZ     ?C0002
003D 120000      E     LCALL   Vbus_Read
0040 EF                MOV     A,R7
0041 70F4              JNZ     ?C0001
0043         ?C0002:
                                           ; SOURCE LINE # 34
0043 120000      E     LCALL   USBUART_CDC_Init
0046         ?C0003:
                                           ; SOURCE LINE # 36
0046 120000      E     LCALL   Vbus_Read
0049 EF                MOV     A,R7
004A 7003              JNZ     $ + 5H
004C 020000      R     LJMP    ?C0004
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
004F 120000      E     LCALL   USBUART_DataIsReady
0052 900000      R     MOV     DPTR,#temp
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 39
0057 900000      R     MOV     DPTR,#temp
005A E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 5   

005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D 60E7              JZ      ?C0003
                                           ; SOURCE LINE # 40
005F 7B01              MOV     R3,#01H
0061 7A00        R     MOV     R2,#HIGH buffer
0063 7900        R     MOV     R1,#LOW buffer
0065 C003              PUSH    AR3
0067 C002              PUSH    AR2
0069 C001              PUSH    AR1
006B 7B01              MOV     R3,#01H
006D 7A00        R     MOV     R2,#HIGH instruction
006F 7900        R     MOV     R1,#LOW instruction
0071 900000      R     MOV     DPTR,#?_retrieve?BYTE+03H
0074 120000      E     LCALL   ?C?PSTXDATA
0077 D001              POP     AR1
0079 D002              POP     AR2
007B D003              POP     AR3
007D 120000      R     LCALL   _retrieve
0080 900000      R     MOV     DPTR,#result
0083 EF                MOV     A,R7
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 42
0085 900000      R     MOV     DPTR,#result
0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B 6459              XRL     A,#059H
008D 705A              JNZ     ?C0006
                                           ; SOURCE LINE # 44
008F 900000      R     MOV     DPTR,#instruction
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 EF                MOV     A,R7
0095 120000      E     LCALL   ?C?CCASE
0098 0000        R     DW      ?C0010
009A 43                DB      043H
009B 0000        R     DW      ?C0009
009D 44                DB      044H
009E 0000        R     DW      ?C0008
00A0 49                DB      049H
00A1 0000              DW      00H
00A3 0000        R     DW      ?C0011
                                           ; SOURCE LINE # 46
00A5         ?C0008:
                                           ; SOURCE LINE # 47
00A5 7F45              MOV     R7,#045H
00A7 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 48
00AA 809A              SJMP    ?C0003
                                           ; SOURCE LINE # 50
00AC         ?C0009:
                                           ; SOURCE LINE # 51
00AC 120000      R     LCALL   dump_data
                                           ; SOURCE LINE # 53
00AF 8095              SJMP    ?C0003
                                           ; SOURCE LINE # 55
00B1         ?C0010:
                                           ; SOURCE LINE # 56
00B1 7B01              MOV     R3,#01H
00B3 7A00        R     MOV     R2,#HIGH instruction
00B5 7900        R     MOV     R1,#LOW instruction
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 6   

00B7 C003              PUSH    AR3
00B9 C002              PUSH    AR2
00BB C001              PUSH    AR1
00BD 7B01              MOV     R3,#01H
00BF 7A00        R     MOV     R2,#HIGH ?apply_setting?BYTE
00C1 7900        R     MOV     R1,#LOW ?apply_setting?BYTE
00C3 A801              MOV     R0,AR1
00C5 AC02              MOV     R4,AR2
00C7 AD03              MOV     R5,AR3
00C9 D001              POP     AR1
00CB D002              POP     AR2
00CD D003              POP     AR3
00CF 7E00              MOV     R6,#00H
00D1 7F05              MOV     R7,#05H
00D3 120000      E     LCALL   ?C?COPYAMD
00D6 120000      R     LCALL   apply_setting
                                           ; SOURCE LINE # 57
00D9 7F59              MOV     R7,#059H
00DB 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 58
00DE 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 60
00E1         ?C0011:
                                           ; SOURCE LINE # 61
00E1 7F4E              MOV     R7,#04EH
00E3 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
00E6 020000      R     LJMP    ?C0003
00E9         ?C0006:
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
00E9 7F4E              MOV     R7,#04EH
00EB 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
00EE 020000      R     LJMP    ?C0003
00F1         ?C0004:
                                           ; SOURCE LINE # 70
00F1 120000      R     LCALL   USB_Close
                                           ; SOURCE LINE # 73
00F4         ?C0013:
00F4 22                RET     
             ; FUNCTION USB_ISR (END)

             ; FUNCTION _retrieve (BEGIN)
                                           ; SOURCE LINE # 75
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 76
0006 900000      R     MOV     DPTR,#count
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
000E 900000      R     MOV     DPTR,#attempts
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 7   

0013 900000      R     MOV     DPTR,#result
0016 7459              MOV     A,#059H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
0019 120000      E     LCALL   USBUART_GetCount
001C 900000      R     MOV     DPTR,#count
001F EE                MOV     A,R6
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0024 900000      R     MOV     DPTR,#count
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 6405              XRL     A,#05H
002F 4E                ORL     A,R6
0030 6003              JZ      $ + 5H
0032 020000      R     LJMP    ?C0014
                                           ; SOURCE LINE # 85
0035 900000      R     MOV     DPTR,#buffer
0038 120000      E     LCALL   ?C?PLDXDATA
003B 7D05              MOV     R5,#05H
003D 7C00              MOV     R4,#00H
003F 120000      E     LCALL   _USBUART_GetData
                                           ; SOURCE LINE # 86
0042 900000      R     MOV     DPTR,#buffer
0045 120000      E     LCALL   ?C?PLDXDATA
0048 120000      E     LCALL   ?C?CLDPTR
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#instruction
004F 120000      E     LCALL   ?C?PLDXDATA
0052 EF                MOV     A,R7
0053 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 87
0056 900000      R     MOV     DPTR,#buffer
0059 120000      E     LCALL   ?C?PLDXDATA
005C E9                MOV     A,R1
005D 2402              ADD     A,#02H
005F F9                MOV     R1,A
0060 EA                MOV     A,R2
0061 3400              ADDC    A,#00H
0063 FA                MOV     R2,A
0064 120000      E     LCALL   ?C?CLDPTR
0067 FF                MOV     R7,A
0068 7F00              MOV     R7,#00H
006A 900000      R     MOV     DPTR,#buffer
006D 120000      E     LCALL   ?C?PLDXDATA
0070 E9                MOV     A,R1
0071 2401              ADD     A,#01H
0073 F9                MOV     R1,A
0074 EA                MOV     A,R2
0075 3400              ADDC    A,#00H
0077 FA                MOV     R2,A
0078 120000      E     LCALL   ?C?CLDPTR
007B FE                MOV     R6,A
007C EF                MOV     A,R7
007D 5E                ANL     A,R6
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 8   

007E FF                MOV     R7,A
007F 7E00              MOV     R6,#00H
0081 900000      R     MOV     DPTR,#instruction
0084 120000      E     LCALL   ?C?PLDXDATA
0087 E9                MOV     A,R1
0088 2401              ADD     A,#01H
008A F9                MOV     R1,A
008B EA                MOV     A,R2
008C 3400              ADDC    A,#00H
008E FA                MOV     R2,A
008F EE                MOV     A,R6
0090 8FF0              MOV     B,R7
0092 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 88
0095 900000      R     MOV     DPTR,#buffer
0098 120000      E     LCALL   ?C?PLDXDATA
009B E9                MOV     A,R1
009C 2404              ADD     A,#04H
009E F9                MOV     R1,A
009F EA                MOV     A,R2
00A0 3400              ADDC    A,#00H
00A2 FA                MOV     R2,A
00A3 120000      E     LCALL   ?C?CLDPTR
00A6 FF                MOV     R7,A
00A7 7F00              MOV     R7,#00H
00A9 900000      R     MOV     DPTR,#buffer
00AC 120000      E     LCALL   ?C?PLDXDATA
00AF E9                MOV     A,R1
00B0 2403              ADD     A,#03H
00B2 F9                MOV     R1,A
00B3 EA                MOV     A,R2
00B4 3400              ADDC    A,#00H
00B6 FA                MOV     R2,A
00B7 120000      E     LCALL   ?C?CLDPTR
00BA FE                MOV     R6,A
00BB EF                MOV     A,R7
00BC 5E                ANL     A,R6
00BD FF                MOV     R7,A
00BE 7E00              MOV     R6,#00H
00C0 900000      R     MOV     DPTR,#instruction
00C3 120000      E     LCALL   ?C?PLDXDATA
00C6 E9                MOV     A,R1
00C7 2403              ADD     A,#03H
00C9 F9                MOV     R1,A
00CA EA                MOV     A,R2
00CB 3400              ADDC    A,#00H
00CD FA                MOV     R2,A
00CE EE                MOV     A,R6
00CF 8FF0              MOV     B,R7
00D1 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 89
00D4 800F              SJMP    ?C0015
00D6         ?C0014:
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
00D6 900000      R     MOV     DPTR,#buffer
00D9 120000      E     LCALL   ?C?PLDXDATA
00DC 120000      E     LCALL   _USBUART_GetAll
                                           ; SOURCE LINE # 93
00DF 900000      R     MOV     DPTR,#result
00E2 744E              MOV     A,#04EH
00E4 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 9   

                                           ; SOURCE LINE # 94
00E5         ?C0015:
                                           ; SOURCE LINE # 96
00E5 900000      R     MOV     DPTR,#result
00E8 E0                MOVX    A,@DPTR
00E9 FF                MOV     R7,A
                                           ; SOURCE LINE # 97
00EA         ?C0016:
00EA 22                RET     
             ; FUNCTION _retrieve (END)

             ; FUNCTION apply_setting (BEGIN)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 101
0000 900000      R     MOV     DPTR,#instruction+01H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#instruction+03H
000B E0                MOVX    A,@DPTR
000C FC                MOV     R4,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FD                MOV     R5,A
0010 120000      E     LCALL   _update_variable
                                           ; SOURCE LINE # 104
0013         ?C0017:
0013 22                RET     
             ; FUNCTION apply_setting (END)

             ; FUNCTION dump_data (BEGIN)
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 108
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH MemoryLocation
0004 7900        E     MOV     R1,#LOW MemoryLocation
0006 900000      R     MOV     DPTR,#ExportPtr
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 109
000C 900000      R     MOV     DPTR,#DataCnt
000F E4                CLR     A
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0014 900000      R     MOV     DPTR,#i
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
0019         ?C0018:
                                           ; SOURCE LINE # 114
0019 900000      E     MOV     DPTR,#TailPtr
001C 120000      E     LCALL   ?C?PLDXDATA
001F C003              PUSH    AR3
0021 C002              PUSH    AR2
0023 C001              PUSH    AR1
0025 900000      R     MOV     DPTR,#ExportPtr
0028 120000      E     LCALL   ?C?PLDXDATA
002B D3                SETB    C
002C D082              POP     DPL
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 10  

002E D083              POP     DPH
0030 D0E0              POP     ACC
0032 E9                MOV     A,R1
0033 9582              SUBB    A,DPL
0035 EA                MOV     A,R2
0036 9583              SUBB    A,DPH
0038         ?C0030:
0038 4003              JC      $ + 5H
003A 020000      R     LJMP    ?C0019
                                           ; SOURCE LINE # 115
003D         ?C0020:
                                           ; SOURCE LINE # 116
003D 900000      R     MOV     DPTR,#i
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 C3                CLR     C
0044 9440              SUBB    A,#040H
0046 5071              JNC     ?C0021
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0048 900000      E     MOV     DPTR,#TailPtr
004B 120000      E     LCALL   ?C?PLDXDATA
004E C003              PUSH    AR3
0050 C002              PUSH    AR2
0052 C001              PUSH    AR1
0054 900000      R     MOV     DPTR,#ExportPtr
0057 120000      E     LCALL   ?C?PLDXDATA
005A D3                SETB    C
005B D082              POP     DPL
005D D083              POP     DPH
005F D0E0              POP     ACC
0061 E9                MOV     A,R1
0062 9582              SUBB    A,DPL
0064 EA                MOV     A,R2
0065 9583              SUBB    A,DPH
0067         ?C0031:
0067 5037              JNC     ?C0022
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0069 900000      R     MOV     DPTR,#ExportPtr
006C 120000      E     LCALL   ?C?PLDXDATA
006F 120000      E     LCALL   ?C?CLDPTR
0072 FF                MOV     R7,A
0073 900000      R     MOV     DPTR,#i
0076 E0                MOVX    A,@DPTR
0077 FE                MOV     R6,A
0078 7400        R     MOV     A,#LOW ExportBuffer
007A 2E                ADD     A,R6
007B F582              MOV     DPL,A
007D E4                CLR     A
007E 3400        R     ADDC    A,#HIGH ExportBuffer
0080 F583              MOV     DPH,A
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
0084 900000      R     MOV     DPTR,#i
0087 E0                MOVX    A,@DPTR
0088 04                INC     A
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
008A 900000      R     MOV     DPTR,#ExportPtr+01H
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 11  

008D E4                CLR     A
008E 75F001            MOV     B,#01H
0091 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 123
0094 900000      R     MOV     DPTR,#DataCnt
0097 E4                CLR     A
0098 75F001            MOV     B,#01H
009B 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 124
009E 809D              SJMP    ?C0020
00A0         ?C0022:
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
00A0 900000      R     MOV     DPTR,#i
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
00A5 7400        R     MOV     A,#LOW ExportBuffer
00A7 2F                ADD     A,R7
00A8 F582              MOV     DPL,A
00AA E4                CLR     A
00AB 3400        R     ADDC    A,#HIGH ExportBuffer
00AD F583              MOV     DPH,A
00AF E4                CLR     A
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
00B1 900000      R     MOV     DPTR,#i
00B4 E0                MOVX    A,@DPTR
00B5 04                INC     A
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 131
00B7 8084              SJMP    ?C0020
00B9         ?C0021:
                                           ; SOURCE LINE # 133
00B9 7B01              MOV     R3,#01H
00BB 7A00        R     MOV     R2,#HIGH ExportBuffer
00BD 7900        R     MOV     R1,#LOW ExportBuffer
00BF 7D40              MOV     R5,#040H
00C1 7C00              MOV     R4,#00H
00C3 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 134
00C6 900000      R     MOV     DPTR,#i
00C9 E4                CLR     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
00CB 020000      R     LJMP    ?C0018
00CE         ?C0019:
                                           ; SOURCE LINE # 137
00CE 900000      R     MOV     DPTR,#ExportBuffer
00D1 7480              MOV     A,#080H
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
00D4 900000      R     MOV     DPTR,#ExportBuffer+01H
00D7 E4                CLR     A
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
00D9 900000      R     MOV     DPTR,#CntSplit1
00DC E4                CLR     A
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
00DE 900000      R     MOV     DPTR,#DataCnt
00E1 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 12  

00E2 FE                MOV     R6,A
00E3 A3                INC     DPTR
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 EF                MOV     A,R7
00E7 54FF              ANL     A,#0FFH
00E9 FF                MOV     R7,A
00EA 900000      R     MOV     DPTR,#CntSplit2
00ED EF                MOV     A,R7
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
00EF 900000      R     MOV     DPTR,#CntSplit1
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 900000      R     MOV     DPTR,#ExportBuffer+02H
00F7 EF                MOV     A,R7
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
00F9 900000      R     MOV     DPTR,#CntSplit2
00FC E0                MOVX    A,@DPTR
00FD FF                MOV     R7,A
00FE 900000      R     MOV     DPTR,#ExportBuffer+03H
0101 EF                MOV     A,R7
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0103 7B01              MOV     R3,#01H
0105 7A00        R     MOV     R2,#HIGH ExportBuffer
0107 7900        R     MOV     R1,#LOW ExportBuffer
0109 7D04              MOV     R5,#04H
010B 7C00              MOV     R4,#00H
010D 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 146
0110         ?C0024:
0110 22                RET     
             ; FUNCTION dump_data (END)

             ; FUNCTION _send_reply (BEGIN)
                                           ; SOURCE LINE # 148
0000 900000      R     MOV     DPTR,#message
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005         ?C0025:
                                           ; SOURCE LINE # 150
0005 120000      E     LCALL   USBUART_CDCIsReady
0008 EF                MOV     A,R7
0009 7006              JNZ     ?C0026
000B 120000      E     LCALL   Vbus_Read
000E EF                MOV     A,R7
000F 70F4              JNZ     ?C0025
0011         ?C0026:
                                           ; SOURCE LINE # 152
0011 120000      E     LCALL   Vbus_Read
0014 EF                MOV     A,R7
0015 600D              JZ      ?C0028
                                           ; SOURCE LINE # 153
0017 7B01              MOV     R3,#01H
0019 7A00        R     MOV     R2,#HIGH message
001B 7900        R     MOV     R1,#LOW message
001D 7D01              MOV     R5,#01H
001F 7C00              MOV     R4,#00H
0021 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 154
C51 COMPILER V9.51   USB_ACCESS                                                            03/27/2014 17:48:14 PAGE 13  

                                           ; SOURCE LINE # 157
0024         ?C0028:
0024 22                RET     
             ; FUNCTION _send_reply (END)

             ; FUNCTION USB_Close (BEGIN)
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 162
0000 120000      E     LCALL   EEPROM_R_Stop
                                           ; SOURCE LINE # 163
0003 120000      E     LCALL   USBUART_Stop
                                           ; SOURCE LINE # 164
0006 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 167
0009         ?C0029:
0009 22                RET     
             ; FUNCTION USB_Close (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    820    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----     159
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
