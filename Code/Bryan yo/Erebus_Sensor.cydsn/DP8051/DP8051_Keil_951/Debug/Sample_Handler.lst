C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/01/2014 19:52:12 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SAMPLE_HANDLER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Sample_Handler.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Sample_Handler.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\Sample_Handler.lst) CD DB NOIP OT(0,SI
                    -ZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Sample_Handler.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          #include "Sample_Handler.h"
  13          #include "project.h"
  14          #include "EmEEPROM_Access.h"
  15          #include "EEPROM_Access.h"
  16          #include "RTC_1.h"
  17          
  18          uint16 sample_int_count;
  19          
  20          void RTC_Prep()
  21          {
  22   1          uint16 sample_unit;
  23   1          
  24   1          uint8 EE_SAMPLE_UNIT = 1u;
  25   1          
  26   1          //sample_unit = get_variable(EE_SAMPLE_UNIT);
  27   1          sample_unit = EE_SAMPLE_UNIT;
  28   1          
  29   1          switch (sample_unit)
  30   1          {
  31   2              case 1: /* Seconds */
  32   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_SEC_MASK);
  33   2                  break;
  34   2              case 2: /* Minutes */
  35   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_MIN_MASK);
  36   2                  break;
  37   2              case 3: /* Hours */
  38   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_HOUR_MASK);
  39   2                  break;
  40   2              case 4: /* Days */
  41   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_DAY_MASK);
  42   2                  break;
  43   2              case 5: /* Weeks */
  44   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_WEEK_MASK);
  45   2                  break;
  46   2              case 6: /* Months */
  47   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_MONTH_MASK);
  48   2                  break;
  49   2              case 7: /* Years */
  50   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_YEAR_MASK);
  51   2                  break;
  52   2          }
  53   1          
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/01/2014 19:52:12 PAGE 2   

  54   1          sample_int_count = 0u;
  55   1       }
  56          
  57          void RTC_Int_Handler()
  58          {
  59   1          CyPmReadStatus(4u);
  60   1          
  61   1          
  62   1          if (sample_counter())
  63   1          {
  64   2              take_sample();
  65   2          }
  66   1          
  67   1          //CyPmSaveClocks();
  68   1          //CyPmSleep(1,2112);
  69   1          
  70   1      }
  71          
  72          uint16 sample_counter()
  73          {
  74   1          uint16 sample_interval;
  75   1          
  76   1          uint8 tmp;
  77   1          
  78   1          uint16 EE_SAMPLE_INTERVAL = 2u;
  79   1          
  80   1          //sample_interval = get_variable(EE_SAMPLE_INTERVAL);
  81   1          sample_interval = EE_SAMPLE_INTERVAL;
  82   1              
  83   1          /* Take sample if interval has been reached */
  84   1          if (sample_int_count == sample_interval)
  85   1          {
  86   2              take_sample();
  87   2              sample_int_count = 0u;
  88   2              
  89   2              //LED Debug------------------
  90   2              
  91   2              tmp = Sample_LED_Read();
  92   2                 
  93   2              if(tmp)
  94   2                  {
  95   3                      Sample_LED_Write(0u);
  96   3                  }
  97   2              else
  98   2                  {
  99   3                      Sample_LED_Write(1u);
 100   3                  }
 101   2              //---------------------------
 102   2              
 103   2              return 1u;
 104   2          }
 105   1          /* Increment counter and go back to sleep if interval has not been reached */
 106   1          else
 107   1          {
 108   2              sample_int_count = sample_int_count++;
 109   2              
 110   2              return 0u;
 111   2          }
 112   1      }
 113          
 114          void take_sample()
 115          {
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/01/2014 19:52:12 PAGE 3   

 116   1          uint16 SampledData=0; 
 117   1          uint8 pin_stat;
 118   1          
 119   1          
 120   1          pin_stat = Sample_LED_Read();
 121   1          
 122   1          if (pin_stat)
 123   1          {
 124   2              Sample_LED_Write(0u);
 125   2          }
 126   1          else
 127   1          {
 128   2              Sample_LED_Write(1u);
 129   2          }
 130   1          
 131   1      }
 132              
 133          /* [] END OF FILE */
*** WARNING C291 IN LINE 112 OF .\Sample_Handler.c: not every exit path returns a value
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/01/2014 19:52:12 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION RTC_Prep (BEGIN)
                                           ; SOURCE LINE # 20
                                           ; SOURCE LINE # 21
                                           ; SOURCE LINE # 24
0000 900000      R     MOV     DPTR,#EE_SAMPLE_UNIT
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 27
0006 900000      R     MOV     DPTR,#EE_SAMPLE_UNIT
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 7E00              MOV     R6,#00H
000D 900000      R     MOV     DPTR,#sample_unit
0010 EE                MOV     A,R6
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 29
0015 900000      R     MOV     DPTR,#sample_unit
0018 E0                MOVX    A,@DPTR
0019 FE                MOV     R6,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 8EF0              MOV     B,R6
0020 120000      E     LCALL   ?C?ICASE
0023 0000        R     DW      ?C0002
0025 0001              DW      01H
0027 0000        R     DW      ?C0003
0029 0002              DW      02H
002B 0000        R     DW      ?C0004
002D 0003              DW      03H
002F 0000        R     DW      ?C0005
0031 0004              DW      04H
0033 0000        R     DW      ?C0006
0035 0005              DW      05H
0037 0000        R     DW      ?C0007
0039 0006              DW      06H
003B 0000        R     DW      ?C0008
003D 0007              DW      07H
003F 0000              DW      00H
0041 0000        R     DW      ?C0001
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
0043         ?C0002:
                                           ; SOURCE LINE # 32
0043 7F01              MOV     R7,#01H
0045 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 33
0048 8028              SJMP    ?C0001
                                           ; SOURCE LINE # 34
004A         ?C0003:
                                           ; SOURCE LINE # 35
004A 7F02              MOV     R7,#02H
004C 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 36
004F 8021              SJMP    ?C0001
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/01/2014 19:52:12 PAGE 5   

                                           ; SOURCE LINE # 37
0051         ?C0004:
                                           ; SOURCE LINE # 38
0051 7F04              MOV     R7,#04H
0053 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 39
0056 801A              SJMP    ?C0001
                                           ; SOURCE LINE # 40
0058         ?C0005:
                                           ; SOURCE LINE # 41
0058 7F08              MOV     R7,#08H
005A 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 42
005D 8013              SJMP    ?C0001
                                           ; SOURCE LINE # 43
005F         ?C0006:
                                           ; SOURCE LINE # 44
005F 7F10              MOV     R7,#010H
0061 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 45
0064 800C              SJMP    ?C0001
                                           ; SOURCE LINE # 46
0066         ?C0007:
                                           ; SOURCE LINE # 47
0066 7F20              MOV     R7,#020H
0068 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 48
006B 8005              SJMP    ?C0001
                                           ; SOURCE LINE # 49
006D         ?C0008:
                                           ; SOURCE LINE # 50
006D 7F40              MOV     R7,#040H
006F 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
0072         ?C0001:
                                           ; SOURCE LINE # 54
0072 900000      R     MOV     DPTR,#sample_int_count
0075 E4                CLR     A
0076 F0                MOVX    @DPTR,A
0077 A3                INC     DPTR
0078 E4                CLR     A
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 55
007A         ?C0009:
007A 22                RET     
             ; FUNCTION RTC_Prep (END)

             ; FUNCTION RTC_Int_Handler (BEGIN)
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
0000 7F04              MOV     R7,#04H
0002 120000      E     LCALL   _CyPmReadStatus
                                           ; SOURCE LINE # 62
0005 120000      R     LCALL   sample_counter
0008 EF                MOV     A,R7
0009 4E                ORL     A,R6
000A 6003              JZ      ?C0011
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
000C 120000      R     LCALL   take_sample
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/01/2014 19:52:12 PAGE 6   

                                           ; SOURCE LINE # 65
000F         ?C0010:
                                           ; SOURCE LINE # 70
000F         ?C0011:
000F 22                RET     
             ; FUNCTION RTC_Int_Handler (END)

             ; FUNCTION sample_counter (BEGIN)
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 78
0000 900000      R     MOV     DPTR,#EE_SAMPLE_INTERVAL
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 7402              MOV     A,#02H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
0009 900000      R     MOV     DPTR,#EE_SAMPLE_INTERVAL
000C E0                MOVX    A,@DPTR
000D FE                MOV     R6,A
000E A3                INC     DPTR
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#sample_interval
0014 EE                MOV     A,R6
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0019 900000      R     MOV     DPTR,#sample_interval
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 900000      R     MOV     DPTR,#sample_int_count
0024 E0                MOVX    A,@DPTR
0025 FC                MOV     R4,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FD                MOV     R5,A
0029 ED                MOV     A,R5
002A 6F                XRL     A,R7
002B 7002              JNZ     ?C0020
002D EC                MOV     A,R4
002E 6E                XRL     A,R6
002F         ?C0020:
002F 702D              JNZ     ?C0012
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0031 120000      R     LCALL   take_sample
                                           ; SOURCE LINE # 87
0034 900000      R     MOV     DPTR,#sample_int_count
0037 E4                CLR     A
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
003C 120000      E     LCALL   Sample_LED_Read
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/01/2014 19:52:12 PAGE 7   

003F 900000      R     MOV     DPTR,#tmp
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0044 900000      R     MOV     DPTR,#tmp
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A 6007              JZ      ?C0013
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
004C 7F00              MOV     R7,#00H
004E 120000      E     LCALL   _Sample_LED_Write
                                           ; SOURCE LINE # 96
0051 8005              SJMP    ?C0014
0053         ?C0013:
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0053 7F01              MOV     R7,#01H
0055 120000      E     LCALL   _Sample_LED_Write
                                           ; SOURCE LINE # 100
0058         ?C0014:
                                           ; SOURCE LINE # 103
0058 7E00              MOV     R6,#00H
005A 7F01              MOV     R7,#01H
005C 22                RET     
                                           ; SOURCE LINE # 104
005D 22                RET     
005E         ?C0012:
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
005E 900000      R     MOV     DPTR,#sample_int_count
0061 E4                CLR     A
0062 75F001            MOV     B,#01H
0065 120000      E     LCALL   ?C?ILDIX
0068 AFF0              MOV     R7,B
006A FE                MOV     R6,A
006B 900000      R     MOV     DPTR,#sample_int_count
006E EE                MOV     A,R6
006F F0                MOVX    @DPTR,A
0070 A3                INC     DPTR
0071 EF                MOV     A,R7
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0073 E4                CLR     A
0074 7E00              MOV     R6,#00H
0076 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 111
0078         ?C0016:
                                           ; SOURCE LINE # 112
0078         ?C0015:
0078 22                RET     
             ; FUNCTION sample_counter (END)

             ; FUNCTION take_sample (BEGIN)
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0000 900000      R     MOV     DPTR,#SampledData
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/01/2014 19:52:12 PAGE 8   

0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0008 120000      E     LCALL   Sample_LED_Read
000B 900000      R     MOV     DPTR,#pin_stat
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
0010 900000      R     MOV     DPTR,#pin_stat
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 6006              JZ      ?C0017
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
0018 7F00              MOV     R7,#00H
001A 120000      E     LCALL   _Sample_LED_Write
                                           ; SOURCE LINE # 125
001D 22                RET     
001E         ?C0017:
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
001E 7F01              MOV     R7,#01H
0020 120000      E     LCALL   _Sample_LED_Write
                                           ; SOURCE LINE # 129
0023         ?C0018:
                                           ; SOURCE LINE # 131
0023         ?C0019:
0023 22                RET     
             ; FUNCTION take_sample (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    296    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
