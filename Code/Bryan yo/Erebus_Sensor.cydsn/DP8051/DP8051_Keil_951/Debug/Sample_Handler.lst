C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/02/2014 16:38:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SAMPLE_HANDLER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Sample_Handler.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Sample_Handler.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\Sample_Handler.lst) CD DB NOIP OT(0,SI
                    -ZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Sample_Handler.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          #include "Sample_Handler.h"
  13          #include "project.h"
  14          #include "EmEEPROM_Access.h"
  15          #include "EEPROM_Access.h"
  16          #include "RTC_1.h"
  17          
  18          static uint16 sample_int_count;
  19          
  20          void rtc_prep()
  21          {
  22   1          uint16 sample_unit;
  23   1          
  24   1          uint8 EE_SAMPLE_UNIT = 2u;
  25   1          
  26   1          //sample_unit = get_variable(EE_SAMPLE_UNIT);
  27   1          sample_unit = EE_SAMPLE_UNIT;
  28   1          
  29   1          switch (sample_unit)
  30   1          {
  31   2              case 1: /* Seconds */
  32   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_SEC_MASK);
  33   2                  break;
  34   2              case 2: /* Minutes */
  35   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_MIN_MASK);
  36   2                  break;
  37   2              case 3: /* Hours */
  38   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_HOUR_MASK);
  39   2                  break;
  40   2              case 4: /* Days */
  41   2                  RTC_1_WriteIntervalMask(RTC_1_INTERVAL_DAY_MASK);
  42   2                  break;
  43   2          }
  44   1          
  45   1          sample_int_count = 0u;
  46   1       }
  47          
  48          
  49          void sample_counter()
  50          {
  51   1          uint16 sample_interval;
  52   1         
  53   1          uint16 EE_SAMPLE_INTERVAL = 1u;
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/02/2014 16:38:21 PAGE 2   

  54   1          
  55   1          
  56   1          // Begin interrupt handling
  57   1          CyPmReadStatus(4u);
  58   1          //End interrupt handling
  59   1          
  60   1          
  61   1          //sample_interval = get_variable(EE_SAMPLE_INTERVAL);
  62   1          sample_interval = EE_SAMPLE_INTERVAL;
  63   1          /* Take sample if interval has been reached */
  64   1          
  65   1          ++sample_int_count;
  66   1          
  67   1          if (sample_int_count == sample_interval)
  68   1          {
  69   2              take_sample();
  70   2              sample_int_count = 0u;
  71   2              
  72   2              return;
  73   2          }
  74   1          
  75   1          return;
  76   1      }
  77          
  78          void take_sample()
  79          {
  80   1          uint16 SampledData=0; 
  81   1          
  82   1          
  83   1          uint8 pin_stat;
  84   1          
  85   1          pin_stat = Sample_LED_Read();
  86   1          
  87   1          if (pin_stat)
  88   1          {
  89   2              Sample_LED_Write(0u);
  90   2          }
  91   1          else
  92   1          {
  93   2              Sample_LED_Write(1u);
  94   2          }
  95   1          
  96   1      }
  97              
  98          /* [] END OF FILE */
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/02/2014 16:38:21 PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION rtc_prep (BEGIN)
                                           ; SOURCE LINE # 20
                                           ; SOURCE LINE # 21
                                           ; SOURCE LINE # 24
0000 900000      R     MOV     DPTR,#EE_SAMPLE_UNIT
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 27
0006 900000      R     MOV     DPTR,#EE_SAMPLE_UNIT
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 7E00              MOV     R6,#00H
000D 900000      R     MOV     DPTR,#sample_unit
0010 EE                MOV     A,R6
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 29
0015 900000      R     MOV     DPTR,#sample_unit
0018 E0                MOVX    A,@DPTR
0019 FE                MOV     R6,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 8EF0              MOV     B,R6
0020 120000      E     LCALL   ?C?ICASE
0023 0000        R     DW      ?C0002
0025 0001              DW      01H
0027 0000        R     DW      ?C0003
0029 0002              DW      02H
002B 0000        R     DW      ?C0004
002D 0003              DW      03H
002F 0000        R     DW      ?C0005
0031 0004              DW      04H
0033 0000              DW      00H
0035 0000        R     DW      ?C0001
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
0037         ?C0002:
                                           ; SOURCE LINE # 32
0037 7F01              MOV     R7,#01H
0039 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 33
003C 8013              SJMP    ?C0001
                                           ; SOURCE LINE # 34
003E         ?C0003:
                                           ; SOURCE LINE # 35
003E 7F02              MOV     R7,#02H
0040 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 36
0043 800C              SJMP    ?C0001
                                           ; SOURCE LINE # 37
0045         ?C0004:
                                           ; SOURCE LINE # 38
0045 7F04              MOV     R7,#04H
0047 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 39
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/02/2014 16:38:21 PAGE 4   

004A 8005              SJMP    ?C0001
                                           ; SOURCE LINE # 40
004C         ?C0005:
                                           ; SOURCE LINE # 41
004C 7F08              MOV     R7,#08H
004E 120000      E     LCALL   _RTC_1_WriteIntervalMask
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
0051         ?C0001:
                                           ; SOURCE LINE # 45
0051 900000      R     MOV     DPTR,#sample_int_count
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
0056 A3                INC     DPTR
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
0059         ?C0006:
0059 22                RET     
             ; FUNCTION rtc_prep (END)

             ; FUNCTION sample_counter (BEGIN)
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 53
0000 900000      R     MOV     DPTR,#EE_SAMPLE_INTERVAL
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0009 7F04              MOV     R7,#04H
000B 120000      E     LCALL   _CyPmReadStatus
                                           ; SOURCE LINE # 62
000E 900000      R     MOV     DPTR,#EE_SAMPLE_INTERVAL
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 900000      R     MOV     DPTR,#sample_interval
0019 EE                MOV     A,R6
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
001E 900000      R     MOV     DPTR,#sample_int_count
0021 E4                CLR     A
0022 75F001            MOV     B,#01H
0025 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 67
0028 900000      R     MOV     DPTR,#sample_interval
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#sample_int_count
0033 E0                MOVX    A,@DPTR
0034 FC                MOV     R4,A
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/02/2014 16:38:21 PAGE 5   

0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FD                MOV     R5,A
0038 ED                MOV     A,R5
0039 B5070F            CJNE    A,AR7,?C0008
003C EC                MOV     A,R4
003D B5060B            CJNE    A,AR6,?C0008
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
0040 120000      R     LCALL   take_sample
                                           ; SOURCE LINE # 70
0043 900000      R     MOV     DPTR,#sample_int_count
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
0048 A3                INC     DPTR
0049 E4                CLR     A
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
004B         ?C0007:
                                           ; SOURCE LINE # 76
004B         ?C0008:
004B 22                RET     
             ; FUNCTION sample_counter (END)

             ; FUNCTION take_sample (BEGIN)
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0000 900000      R     MOV     DPTR,#SampledData
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
0008 120000      E     LCALL   Sample_LED_Read
000B 900000      R     MOV     DPTR,#pin_stat
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
0010 900000      R     MOV     DPTR,#pin_stat
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 6006              JZ      ?C0009
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
0018 7F00              MOV     R7,#00H
001A 120000      E     LCALL   _Sample_LED_Write
                                           ; SOURCE LINE # 90
001D 22                RET     
001E         ?C0009:
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
001E 7F01              MOV     R7,#01H
0020 120000      E     LCALL   _Sample_LED_Write
                                           ; SOURCE LINE # 94
0023         ?C0010:
                                           ; SOURCE LINE # 96
0023         ?C0011:
0023 22                RET     
             ; FUNCTION take_sample (END)
C51 COMPILER V9.51   SAMPLE_HANDLER                                                        05/02/2014 16:38:21 PAGE 6   




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    202    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
