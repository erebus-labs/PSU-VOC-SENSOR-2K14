C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_ACCESS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_Access.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\USB_Access.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\USB_Access.lst) CD DB NOIP OT(0,SIZE) DF(D
                    -EBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_Access.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          #include "USB_Access.h"
  13          #include "EmEEPROM_Access.h" // Location of sampled data in flash
  14          /* This file provides function definitions for USB interactions */
  15          
  16          void USB_ISR(){
  17   1          
  18   1          // Power has just been applied to the Vbus pin, so we enter USB communication mode
  19   1      
  20   1          uint8 result = 0;
  21   1          command instruction = {0,0,0};
  22   1          USB_LED_on();
  23   1                 
  24   1          /* Start USBFS Operation with 5V operation */
  25   1          USBUART_Start(0u, USBUART_5V_OPERATION);
  26   1          
  27   1          /* Wait for Device to enumerate */
  28   1          while(!USBUART_GetConfiguration() && Vbus_Read());
  29   1      
  30   1          /* Enumeration is done, enable OUT endpoint for receive data from Host */
  31   1          USBUART_CDC_Init();
  32   1            
  33   1          while(Vbus_Read())
  34   1          {  
  35   2              if(USBUART_DataIsReady() != 0u){   /* Check for input data from PC */
  36   3                  result = retrieve(&instruction);
  37   3              
  38   3                  if (result == SUCCESS){
  39   4                      
  40   4                      switch (instruction.command){
  41   5                      
  42   5                          case IDENTIFY:
  43   5                              send_reply(IDENTIFIER);
  44   5                              break;
  45   5                          
  46   5                          case DUMP_DATA:
  47   5                              dump_data();
  48   5                              confirm_dump();
  49   5                              break;
  50   5                              
  51   5                          case GET_SETTINGS:
  52   5                              send_settings();
  53   5                              
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 2   

  54   5                          case CHANGE_SETTING:
  55   5                              apply_setting(instruction);
  56   5                              send_reply(SUCCESS);
  57   5                              break;
  58   5                           
  59   5                          case HARD_RESET:
  60   5                              hard_reset();
  61   5                              send_reply(SUCCESS);
  62   5                              break;
  63   5                              
  64   5                          default:
  65   5                              send_reply(FAIL);
  66   5                      }
  67   4                  }   
  68   3                  else{
  69   4                      send_reply(FAIL);
  70   4                  }
  71   3              }
  72   2          }
  73   1          
  74   1          USB_Close();
  75   1          USB_LED_off();
  76   1          
  77   1          return;
  78   1      }
  79          
  80          uint8 retrieve(command* instruction){
  81   1          uint8 buffer[BUFFER_LEN];
  82   1          uint16 count = 0;
  83   1          uint8 attempts = 0;
  84   1          uint8 result = SUCCESS;
  85   1          
  86   1          count = USBUART_GetCount(); 
  87   1          
  88   1          // If data in buffer is the right amount for a command,
  89   1          // retrieve it
  90   1          if(count == COMMAND_LENGTH){
  91   2              USBUART_GetData(buffer, COMMAND_LENGTH);
  92   2              instruction -> command = buffer[0];
  93   2              instruction -> target = (((uint16) buffer[1]) << 0x8) | buffer[2];
  94   2              instruction -> value = (((uint16) buffer[3]) << 0x8) | buffer[4];
  95   2          }
  96   1          // Otherwise, flush the USB buffer and report fail
  97   1          else{
  98   2              USBUART_GetChar();
  99   2              result = FAIL;
 100   2          }
 101   1          
 102   1          return result;
 103   1      }
 104          
 105          void apply_setting(command instruction){
 106   1          uint16 target = 0;
 107   1      
 108   1          switch (instruction.target){
 109   2              case SAMPLE_UNIT:
 110   2                  target = EE_SAMPLE_UNIT;
 111   2                  break;
 112   2              
 113   2              case SAMPLE_INTERVAL:
 114   2                  target = EE_SAMPLE_INTERVAL;
 115   2                  break;
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 3   

 116   2              
 117   2              case SENSOR:
 118   2                  target = EE_SENSOR;
 119   2                  break;
 120   2          }
 121   1          
 122   1          update_variable(target, instruction.value);    
 123   1          
 124   1          return;
 125   1      }
 126          
 127          void send_settings(){
 128   1          
 129   1          uint16 settings[NUM_SETTINGS];
 130   1          
 131   1          settings[0] = get_variable(EE_SENSOR);
 132   1          settings[1] = get_variable(EE_SAMPLE_UNIT);
 133   1          settings[2] = get_variable(EE_SAMPLE_INTERVAL);
 134   1          
 135   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 136   1          
 137   1          if(Vbus_Read()){
 138   2              USBUART_PutData((uint8*) &settings, sizeof(settings));
 139   2          }
 140   1          
 141   1          return;   
 142   1      }
 143          
 144          void dump_data(){
 145   1          uint8  ExportBuffer[BUFFER_LEN]; // 64 Bytes per USB data packet.
 146   1          uint8* ExportPtr =(uint8*) MemoryLocation; 
 147   1          uint16 DataCnt = 0;
 148   1          uint8  i = 0;
 149   1          
 150   1          flash_LED_on();
 151   1          while (ExportPtr < TailPtr)
 152   1          {   
 153   2              while (i < BUFFER_LEN)
 154   2              {
 155   3                  if (ExportPtr < TailPtr)
 156   3                  {
 157   4                      ExportBuffer[i] = *ExportPtr; // Copy sampled data from flash at *ExportPtr to buffer for 
             -send over usb com 
 158   4                      ++i;
 159   4                      ++ExportPtr;
 160   4                      ++DataCnt;
 161   4                  }
 162   3                  else
 163   3                  {
 164   4                      ExportBuffer[i] = PADBYTE;
 165   4                      ++i;
 166   4                  }           
 167   3              }
 168   2              
 169   2              while(!USBUART_CDCIsReady() && Vbus_Read());
 170   2              USBUART_PutData(ExportBuffer, BUFFER_LEN); // Send 64 byte packet of data from memory
 171   2              i = 0;
 172   2          }
 173   1          
 174   1          // Add the size trailer packet to get total transmission size
 175   1          DataCnt = DataCnt + 4;
 176   1          
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 4   

 177   1          /* Trailer Packet to Identify End of Sampled Data in Memory */
 178   1          ExportBuffer[0] = 0x80;               // End of Data Identifier
 179   1          ExportBuffer[1] = 0x00;
 180   1          
 181   1          //2 byte Count split into two 1 byte packages to be arrayed.
 182   1          ExportBuffer[2] = (uint8)(DataCnt >> 8);;          // Count of Total Bytes Sent
 183   1          ExportBuffer[3] = (uint8)0x00FF & DataCnt;
 184   1          
 185   1          // Wait for UART to be ready
 186   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 187   1          USBUART_PutData(ExportBuffer, 64u);
 188   1          
 189   1          flash_LED_off();
 190   1          
 191   1          return;
 192   1      }
 193          
 194          void send_reply(uint8 message){
 195   1         
 196   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 197   1          
 198   1          if(Vbus_Read()){
 199   2              USBUART_PutData(&message, REPLY_LEN);
 200   2          }
 201   1          
 202   1          return;
 203   1      }
 204          
 205          void confirm_dump(){
 206   1          uint8 result = 0;
 207   1          command instruction = {0,0,0};
 208   1          
 209   1          while(1){
 210   2              while(!USBUART_DataIsReady() && Vbus_Read());
 211   2              
 212   2              result = retrieve(&instruction);
 213   2              
 214   2              if(result == SUCCESS){
 215   3                  if (instruction.command == SUCCESS){
 216   4                      TailPtr = (uint8*) MemoryLocation;
 217   4                  }
 218   3                  break;
 219   3              }
 220   2          }
 221   1          
 222   1          return;
 223   1      }
 224          
 225          void CMD_hard_reset(){
 226   1      
 227   1          uint8 reset_flag = 0xFF;
 228   1          
 229   1          flash_LED_on();
 230   1          Em_EEPROM_Write(&reset_flag, &hard_reset_flag, 1u);
 231   1          flash_LED_off();
 232   1          
 233   1          return;
 234   1      }
 235          
 236          void USB_Close(){
 237   1          
 238   1          EEPROM_R_Stop();
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 5   

 239   1          USBUART_Stop();
 240   1          CySoftwareReset();
 241   1          
 242   1          return;
 243   1      }
 244          
 245          
 246          
 247          
 248          /* [] END OF FILE */
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USB_ISR (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 20
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 21
0005 7BFF              MOV     R3,#0FFH
0007 7A00        R     MOV     R2,#HIGH _?ix1000
0009 7900        R     MOV     R1,#LOW _?ix1000
000B C003              PUSH    AR3
000D C002              PUSH    AR2
000F C001              PUSH    AR1
0011 7B01              MOV     R3,#01H
0013 7A00        R     MOV     R2,#HIGH instruction
0015 7900        R     MOV     R1,#LOW instruction
0017 A801              MOV     R0,AR1
0019 AC02              MOV     R4,AR2
001B AD03              MOV     R5,AR3
001D D001              POP     AR1
001F D002              POP     AR2
0021 D003              POP     AR3
0023 7E00              MOV     R6,#00H
0025 7F05              MOV     R7,#05H
0027 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 22
002A 120000      E     LCALL   USB_LED_on
                                           ; SOURCE LINE # 25
002D 7D01              MOV     R5,#01H
002F 7F00              MOV     R7,#00H
0031 120000      E     LCALL   _USBUART_Start
0034         ?C0001:
                                           ; SOURCE LINE # 28
0034 120000      E     LCALL   USBUART_GetConfiguration
0037 EF                MOV     A,R7
0038 7006              JNZ     ?C0002
003A 120000      E     LCALL   Vbus_Read
003D EF                MOV     A,R7
003E 70F4              JNZ     ?C0001
0040         ?C0002:
                                           ; SOURCE LINE # 31
0040 120000      E     LCALL   USBUART_CDC_Init
0043         ?C0003:
                                           ; SOURCE LINE # 33
0043 120000      E     LCALL   Vbus_Read
0046 EF                MOV     A,R7
0047 7003              JNZ     $ + 5H
0049 020000      R     LJMP    ?C0004
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
004C 120000      E     LCALL   USBUART_DataIsReady
004F EF                MOV     A,R7
0050 60F1              JZ      ?C0003
                                           ; SOURCE LINE # 36
0052 7B01              MOV     R3,#01H
0054 7A00        R     MOV     R2,#HIGH instruction
0056 7900        R     MOV     R1,#LOW instruction
0058 120000      R     LCALL   _retrieve
005B 900000      R     MOV     DPTR,#result
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 7   

005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
0060 900000      R     MOV     DPTR,#result
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 6402              XRL     A,#02H
0068 7071              JNZ     ?C0006
                                           ; SOURCE LINE # 40
006A 900000      R     MOV     DPTR,#instruction
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 120000      E     LCALL   ?C?CCASE
0073 0000        R     DW      ?C0008
0075 01                DB      01H
0076 0000        R     DW      ?C0009
0078 02                DB      02H
0079 0000        R     DW      ?C0010
007B 03                DB      03H
007C 0000        R     DW      ?C0011
007E 04                DB      04H
007F 0000        R     DW      ?C0012
0081 05                DB      05H
0082 0000              DW      00H
0084 0000        R     DW      ?C0013
                                           ; SOURCE LINE # 42
0086         ?C0008:
                                           ; SOURCE LINE # 43
0086 7F01              MOV     R7,#01H
0088 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 44
008B 80B6              SJMP    ?C0003
                                           ; SOURCE LINE # 46
008D         ?C0009:
                                           ; SOURCE LINE # 47
008D 120000      R     LCALL   dump_data
                                           ; SOURCE LINE # 48
0090 120000      R     LCALL   confirm_dump
                                           ; SOURCE LINE # 49
0093 80AE              SJMP    ?C0003
                                           ; SOURCE LINE # 51
0095         ?C0010:
                                           ; SOURCE LINE # 52
0095 120000      R     LCALL   send_settings
                                           ; SOURCE LINE # 54
0098         ?C0011:
                                           ; SOURCE LINE # 55
0098 7B01              MOV     R3,#01H
009A 7A00        R     MOV     R2,#HIGH instruction
009C 7900        R     MOV     R1,#LOW instruction
009E C003              PUSH    AR3
00A0 C002              PUSH    AR2
00A2 C001              PUSH    AR1
00A4 7B01              MOV     R3,#01H
00A6 7A00        R     MOV     R2,#HIGH ?apply_setting?BYTE
00A8 7900        R     MOV     R1,#LOW ?apply_setting?BYTE
00AA A801              MOV     R0,AR1
00AC AC02              MOV     R4,AR2
00AE AD03              MOV     R5,AR3
00B0 D001              POP     AR1
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 8   

00B2 D002              POP     AR2
00B4 D003              POP     AR3
00B6 7E00              MOV     R6,#00H
00B8 7F05              MOV     R7,#05H
00BA 120000      E     LCALL   ?C?COPYAMD
00BD 120000      R     LCALL   apply_setting
                                           ; SOURCE LINE # 56
00C0 7F02              MOV     R7,#02H
00C2 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 57
00C5 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 59
00C8         ?C0012:
                                           ; SOURCE LINE # 60
00C8 120000      E     LCALL   hard_reset
                                           ; SOURCE LINE # 61
00CB 7F02              MOV     R7,#02H
00CD 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 62
00D0 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 64
00D3         ?C0013:
                                           ; SOURCE LINE # 65
00D3 7F03              MOV     R7,#03H
00D5 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 66
00D8         ?C0007:
                                           ; SOURCE LINE # 67
00D8 020000      R     LJMP    ?C0003
00DB         ?C0006:
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
00DB 7F03              MOV     R7,#03H
00DD 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 70
00E0         ?C0014:
                                           ; SOURCE LINE # 71
00E0         ?C0005:
                                           ; SOURCE LINE # 72
00E0 020000      R     LJMP    ?C0003
00E3         ?C0004:
                                           ; SOURCE LINE # 74
00E3 120000      R     LCALL   USB_Close
                                           ; SOURCE LINE # 75
00E6 120000      E     LCALL   USB_LED_off
                                           ; SOURCE LINE # 78
00E9         ?C0015:
00E9 22                RET     
             ; FUNCTION USB_ISR (END)

             ; FUNCTION _retrieve (BEGIN)
                                           ; SOURCE LINE # 80
0000 900000      R     MOV     DPTR,#instruction
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 82
0006 900000      R     MOV     DPTR,#count
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 9   

000E 900000      R     MOV     DPTR,#attempts
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0013 900000      R     MOV     DPTR,#result
0016 7402              MOV     A,#02H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
0019 120000      E     LCALL   USBUART_GetCount
001C 900000      R     MOV     DPTR,#count
001F EE                MOV     A,R6
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0024 900000      R     MOV     DPTR,#count
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 6405              XRL     A,#05H
002F 4E                ORL     A,R6
0030 7076              JNZ     ?C0016
                                           ; SOURCE LINE # 91
0032 7B01              MOV     R3,#01H
0034 7A00        R     MOV     R2,#HIGH buffer
0036 7900        R     MOV     R1,#LOW buffer
0038 7D05              MOV     R5,#05H
003A 7C00              MOV     R4,#00H
003C 120000      E     LCALL   _USBUART_GetData
                                           ; SOURCE LINE # 92
003F 900000      R     MOV     DPTR,#buffer
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#instruction
0047 120000      E     LCALL   ?C?PLDXDATA
004A EF                MOV     A,R7
004B 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 93
004E 900000      R     MOV     DPTR,#buffer+01H
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 7E00              MOV     R6,#00H
0055 EF                MOV     A,R7
0056 7F00              MOV     R7,#00H
0058 FE                MOV     R6,A
0059 900000      R     MOV     DPTR,#buffer+02H
005C E0                MOVX    A,@DPTR
005D FD                MOV     R5,A
005E 7C00              MOV     R4,#00H
0060 EE                MOV     A,R6
0061 4C                ORL     A,R4
0062 FE                MOV     R6,A
0063 EF                MOV     A,R7
0064 4D                ORL     A,R5
0065 FF                MOV     R7,A
0066 900000      R     MOV     DPTR,#instruction
0069 120000      E     LCALL   ?C?PLDXDATA
006C E9                MOV     A,R1
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 10  

006D 2401              ADD     A,#01H
006F F9                MOV     R1,A
0070 EA                MOV     A,R2
0071 3400              ADDC    A,#00H
0073 FA                MOV     R2,A
0074 EE                MOV     A,R6
0075 8FF0              MOV     B,R7
0077 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 94
007A 900000      R     MOV     DPTR,#buffer+03H
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F 7E00              MOV     R6,#00H
0081 EF                MOV     A,R7
0082 7F00              MOV     R7,#00H
0084 FE                MOV     R6,A
0085 900000      R     MOV     DPTR,#buffer+04H
0088 E0                MOVX    A,@DPTR
0089 FD                MOV     R5,A
008A 7C00              MOV     R4,#00H
008C EE                MOV     A,R6
008D 4C                ORL     A,R4
008E FE                MOV     R6,A
008F EF                MOV     A,R7
0090 4D                ORL     A,R5
0091 FF                MOV     R7,A
0092 900000      R     MOV     DPTR,#instruction
0095 120000      E     LCALL   ?C?PLDXDATA
0098 E9                MOV     A,R1
0099 2403              ADD     A,#03H
009B F9                MOV     R1,A
009C EA                MOV     A,R2
009D 3400              ADDC    A,#00H
009F FA                MOV     R2,A
00A0 EE                MOV     A,R6
00A1 8FF0              MOV     B,R7
00A3 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 95
00A6 8009              SJMP    ?C0017
00A8         ?C0016:
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
00A8 120000      E     LCALL   USBUART_GetChar
                                           ; SOURCE LINE # 99
00AB 900000      R     MOV     DPTR,#result
00AE 7403              MOV     A,#03H
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
00B1         ?C0017:
                                           ; SOURCE LINE # 102
00B1 900000      R     MOV     DPTR,#result
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
                                           ; SOURCE LINE # 103
00B6         ?C0018:
00B6 22                RET     
             ; FUNCTION _retrieve (END)

             ; FUNCTION apply_setting (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0000 900000      R     MOV     DPTR,#target
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 11  

0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
0008 900000      R     MOV     DPTR,#instruction+01H
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 8EF0              MOV     B,R6
0013 120000      E     LCALL   ?C?ICASE
0016 0000        R     DW      ?C0020
0018 0001              DW      01H
001A 0000        R     DW      ?C0021
001C 0002              DW      02H
001E 0000        R     DW      ?C0022
0020 0003              DW      03H
0022 0000              DW      00H
0024 0000        R     DW      ?C0019
                                           ; SOURCE LINE # 109
0026         ?C0020:
                                           ; SOURCE LINE # 110
0026 900000      R     MOV     DPTR,#target
0029 E4                CLR     A
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C E4                CLR     A
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
002E 8014              SJMP    ?C0019
                                           ; SOURCE LINE # 113
0030         ?C0021:
                                           ; SOURCE LINE # 114
0030 900000      R     MOV     DPTR,#target
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 7402              MOV     A,#02H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0039 8009              SJMP    ?C0019
                                           ; SOURCE LINE # 117
003B         ?C0022:
                                           ; SOURCE LINE # 118
003B 900000      R     MOV     DPTR,#target
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 7404              MOV     A,#04H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0044         ?C0019:
                                           ; SOURCE LINE # 122
0044 900000      R     MOV     DPTR,#target
0047 E0                MOVX    A,@DPTR
0048 FE                MOV     R6,A
0049 A3                INC     DPTR
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 12  

004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#instruction+03H
004F E0                MOVX    A,@DPTR
0050 FC                MOV     R4,A
0051 A3                INC     DPTR
0052 E0                MOVX    A,@DPTR
0053 FD                MOV     R5,A
0054 120000      E     LCALL   _update_variable
                                           ; SOURCE LINE # 125
0057         ?C0023:
0057 22                RET     
             ; FUNCTION apply_setting (END)

             ; FUNCTION send_settings (BEGIN)
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 131
0000 7F04              MOV     R7,#04H
0002 7E00              MOV     R6,#00H
0004 120000      E     LCALL   _get_variable
0007 900000      R     MOV     DPTR,#settings
000A EE                MOV     A,R6
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
000F 7F00              MOV     R7,#00H
0011 7E00              MOV     R6,#00H
0013 120000      E     LCALL   _get_variable
0016 900000      R     MOV     DPTR,#settings+02H
0019 EE                MOV     A,R6
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
001E 7F02              MOV     R7,#02H
0020 7E00              MOV     R6,#00H
0022 120000      E     LCALL   _get_variable
0025 900000      R     MOV     DPTR,#settings+04H
0028 EE                MOV     A,R6
0029 F0                MOVX    @DPTR,A
002A A3                INC     DPTR
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0024:
                                           ; SOURCE LINE # 135
002D 120000      E     LCALL   USBUART_CDCIsReady
0030 EF                MOV     A,R7
0031 7006              JNZ     ?C0025
0033 120000      E     LCALL   Vbus_Read
0036 EF                MOV     A,R7
0037 70F4              JNZ     ?C0024
0039         ?C0025:
                                           ; SOURCE LINE # 137
0039 120000      E     LCALL   Vbus_Read
003C EF                MOV     A,R7
003D 600D              JZ      ?C0027
                                           ; SOURCE LINE # 138
003F 7B01              MOV     R3,#01H
0041 7A00        R     MOV     R2,#HIGH settings
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 13  

0043 7900        R     MOV     R1,#LOW settings
0045 7D06              MOV     R5,#06H
0047 7C00              MOV     R4,#00H
0049 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 139
004C         ?C0026:
                                           ; SOURCE LINE # 142
004C         ?C0027:
004C 22                RET     
             ; FUNCTION send_settings (END)

             ; FUNCTION dump_data (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 146
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH MemoryLocation
0004 7900        E     MOV     R1,#LOW MemoryLocation
0006 900000      R     MOV     DPTR,#ExportPtr
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 147
000C 900000      R     MOV     DPTR,#DataCnt
000F E4                CLR     A
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0014 900000      R     MOV     DPTR,#i
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0019 120000      E     LCALL   flash_LED_on
001C         ?C0028:
                                           ; SOURCE LINE # 151
001C 900000      E     MOV     DPTR,#TailPtr
001F 120000      E     LCALL   ?C?PLDXDATA
0022 C003              PUSH    AR3
0024 C002              PUSH    AR2
0026 C001              PUSH    AR1
0028 900000      R     MOV     DPTR,#ExportPtr
002B 120000      E     LCALL   ?C?PLDXDATA
002E C3                CLR     C
002F D082              POP     DPL
0031 D083              POP     DPH
0033 D0E0              POP     ACC
0035 E9                MOV     A,R1
0036 9582              SUBB    A,DPL
0038 EA                MOV     A,R2
0039 9583              SUBB    A,DPH
003B         ?C0052:
003B 4003              JC      $ + 5H
003D 020000      R     LJMP    ?C0029
                                           ; SOURCE LINE # 152
0040         ?C0030:
                                           ; SOURCE LINE # 153
0040 900000      R     MOV     DPTR,#i
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 C3                CLR     C
0047 9440              SUBB    A,#040H
0049 5072              JNC     ?C0034
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 14  

                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
004B 900000      E     MOV     DPTR,#TailPtr
004E 120000      E     LCALL   ?C?PLDXDATA
0051 C003              PUSH    AR3
0053 C002              PUSH    AR2
0055 C001              PUSH    AR1
0057 900000      R     MOV     DPTR,#ExportPtr
005A 120000      E     LCALL   ?C?PLDXDATA
005D C3                CLR     C
005E D082              POP     DPL
0060 D083              POP     DPH
0062 D0E0              POP     ACC
0064 E9                MOV     A,R1
0065 9582              SUBB    A,DPL
0067 EA                MOV     A,R2
0068 9583              SUBB    A,DPH
006A         ?C0053:
006A 5037              JNC     ?C0032
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
006C 900000      R     MOV     DPTR,#ExportPtr
006F 120000      E     LCALL   ?C?PLDXDATA
0072 120000      E     LCALL   ?C?CLDPTR
0075 FF                MOV     R7,A
0076 900000      R     MOV     DPTR,#i
0079 E0                MOVX    A,@DPTR
007A FE                MOV     R6,A
007B 7400        R     MOV     A,#LOW ExportBuffer
007D 2E                ADD     A,R6
007E F582              MOV     DPL,A
0080 E4                CLR     A
0081 3400        R     ADDC    A,#HIGH ExportBuffer
0083 F583              MOV     DPH,A
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
0087 900000      R     MOV     DPTR,#i
008A E0                MOVX    A,@DPTR
008B 04                INC     A
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
008D 900000      R     MOV     DPTR,#ExportPtr+01H
0090 E4                CLR     A
0091 75F001            MOV     B,#01H
0094 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 160
0097 900000      R     MOV     DPTR,#DataCnt
009A E4                CLR     A
009B 75F001            MOV     B,#01H
009E 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 161
00A1 809D              SJMP    ?C0030
00A3         ?C0032:
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
00A3 900000      R     MOV     DPTR,#i
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 7400        R     MOV     A,#LOW ExportBuffer
00AA 2F                ADD     A,R7
00AB F582              MOV     DPL,A
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 15  

00AD E4                CLR     A
00AE 3400        R     ADDC    A,#HIGH ExportBuffer
00B0 F583              MOV     DPH,A
00B2 7440              MOV     A,#040H
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
00B5 900000      R     MOV     DPTR,#i
00B8 E0                MOVX    A,@DPTR
00B9 04                INC     A
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
00BB         ?C0033:
                                           ; SOURCE LINE # 167
00BB 8083              SJMP    ?C0030
00BD         ?C0031:
00BD         ?C0034:
                                           ; SOURCE LINE # 169
00BD 120000      E     LCALL   USBUART_CDCIsReady
00C0 EF                MOV     A,R7
00C1 7006              JNZ     ?C0035
00C3 120000      E     LCALL   Vbus_Read
00C6 EF                MOV     A,R7
00C7 70F4              JNZ     ?C0034
00C9         ?C0035:
                                           ; SOURCE LINE # 170
00C9 7B01              MOV     R3,#01H
00CB 7A00        R     MOV     R2,#HIGH ExportBuffer
00CD 7900        R     MOV     R1,#LOW ExportBuffer
00CF 7D40              MOV     R5,#040H
00D1 7C00              MOV     R4,#00H
00D3 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 171
00D6 900000      R     MOV     DPTR,#i
00D9 E4                CLR     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
00DB 020000      R     LJMP    ?C0028
00DE         ?C0029:
                                           ; SOURCE LINE # 175
00DE 900000      R     MOV     DPTR,#DataCnt
00E1 E4                CLR     A
00E2 75F004            MOV     B,#04H
00E5 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 178
00E8 900000      R     MOV     DPTR,#ExportBuffer
00EB 7480              MOV     A,#080H
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
00EE 900000      R     MOV     DPTR,#ExportBuffer+01H
00F1 E4                CLR     A
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
00F3 900000      R     MOV     DPTR,#DataCnt
00F6 E0                MOVX    A,@DPTR
00F7 FE                MOV     R6,A
00F8 A3                INC     DPTR
00F9 E0                MOVX    A,@DPTR
00FA FF                MOV     R7,A
00FB EE                MOV     A,R6
00FC FF                MOV     R7,A
00FD 7E00              MOV     R6,#00H
00FF 900000      R     MOV     DPTR,#ExportBuffer+02H
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 16  

0102 EF                MOV     A,R7
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0104 900000      R     MOV     DPTR,#DataCnt
0107 E0                MOVX    A,@DPTR
0108 FE                MOV     R6,A
0109 A3                INC     DPTR
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C EF                MOV     A,R7
010D 54FF              ANL     A,#0FFH
010F FF                MOV     R7,A
0110 900000      R     MOV     DPTR,#ExportBuffer+03H
0113 EF                MOV     A,R7
0114 F0                MOVX    @DPTR,A
0115         ?C0036:
                                           ; SOURCE LINE # 186
0115 120000      E     LCALL   USBUART_CDCIsReady
0118 EF                MOV     A,R7
0119 7006              JNZ     ?C0037
011B 120000      E     LCALL   Vbus_Read
011E EF                MOV     A,R7
011F 70F4              JNZ     ?C0036
0121         ?C0037:
                                           ; SOURCE LINE # 187
0121 7B01              MOV     R3,#01H
0123 7A00        R     MOV     R2,#HIGH ExportBuffer
0125 7900        R     MOV     R1,#LOW ExportBuffer
0127 7D40              MOV     R5,#040H
0129 7C00              MOV     R4,#00H
012B 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 189
012E 120000      E     LCALL   flash_LED_off
                                           ; SOURCE LINE # 192
0131         ?C0038:
0131 22                RET     
             ; FUNCTION dump_data (END)

             ; FUNCTION _send_reply (BEGIN)
                                           ; SOURCE LINE # 194
0000 900000      R     MOV     DPTR,#message
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005         ?C0039:
                                           ; SOURCE LINE # 196
0005 120000      E     LCALL   USBUART_CDCIsReady
0008 EF                MOV     A,R7
0009 7006              JNZ     ?C0040
000B 120000      E     LCALL   Vbus_Read
000E EF                MOV     A,R7
000F 70F4              JNZ     ?C0039
0011         ?C0040:
                                           ; SOURCE LINE # 198
0011 120000      E     LCALL   Vbus_Read
0014 EF                MOV     A,R7
0015 600D              JZ      ?C0042
                                           ; SOURCE LINE # 199
0017 7B01              MOV     R3,#01H
0019 7A00        R     MOV     R2,#HIGH message
001B 7900        R     MOV     R1,#LOW message
001D 7D01              MOV     R5,#01H
001F 7C00              MOV     R4,#00H
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 17  

0021 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 200
0024         ?C0041:
                                           ; SOURCE LINE # 203
0024         ?C0042:
0024 22                RET     
             ; FUNCTION _send_reply (END)

             ; FUNCTION confirm_dump (BEGIN)
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0005 7BFF              MOV     R3,#0FFH
0007 7A00        R     MOV     R2,#HIGH _?ix1001
0009 7900        R     MOV     R1,#LOW _?ix1001
000B C003              PUSH    AR3
000D C002              PUSH    AR2
000F C001              PUSH    AR1
0011 7B01              MOV     R3,#01H
0013 7A00        R     MOV     R2,#HIGH instruction
0015 7900        R     MOV     R1,#LOW instruction
0017 A801              MOV     R0,AR1
0019 AC02              MOV     R4,AR2
001B AD03              MOV     R5,AR3
001D D001              POP     AR1
001F D002              POP     AR2
0021 D003              POP     AR3
0023 7E00              MOV     R6,#00H
0025 7F05              MOV     R7,#05H
0027 120000      E     LCALL   ?C?COPYAMD
002A         ?C0043:
                                           ; SOURCE LINE # 209
002A         ?C0045:
                                           ; SOURCE LINE # 210
002A 120000      E     LCALL   USBUART_DataIsReady
002D EF                MOV     A,R7
002E 7006              JNZ     ?C0046
0030 120000      E     LCALL   Vbus_Read
0033 EF                MOV     A,R7
0034 70F4              JNZ     ?C0045
0036         ?C0046:
                                           ; SOURCE LINE # 212
0036 7B01              MOV     R3,#01H
0038 7A00        R     MOV     R2,#HIGH instruction
003A 7900        R     MOV     R1,#LOW instruction
003C 120000      R     LCALL   _retrieve
003F 900000      R     MOV     DPTR,#result
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
0044 900000      R     MOV     DPTR,#result
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A B402DD            CJNE    A,#02H,?C0045
                                           ; SOURCE LINE # 215
004D 900000      R     MOV     DPTR,#instruction
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 18  

0052 EF                MOV     A,R7
0053 B4020F            CJNE    A,#02H,?C0049
                                           ; SOURCE LINE # 216
0056 7BFF              MOV     R3,#0FFH
0058 7A00        E     MOV     R2,#HIGH MemoryLocation
005A 7900        E     MOV     R1,#LOW MemoryLocation
005C 900000      E     MOV     DPTR,#TailPtr
005F 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 217
0062         ?C0048:
                                           ; SOURCE LINE # 218
0062 22                RET     
                                           ; SOURCE LINE # 219
0063         ?C0047:
                                           ; SOURCE LINE # 220
0063 80C5              SJMP    ?C0045
0065         ?C0044:
                                           ; SOURCE LINE # 223
0065         ?C0049:
0065 22                RET     
             ; FUNCTION confirm_dump (END)

             ; FUNCTION CMD_hard_reset (BEGIN)
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 227
0000 900000      R     MOV     DPTR,#reset_flag
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
0006 120000      E     LCALL   flash_LED_on
                                           ; SOURCE LINE # 230
0009 7B01              MOV     R3,#01H
000B 7A00        R     MOV     R2,#HIGH reset_flag
000D 7900        R     MOV     R1,#LOW reset_flag
000F C003              PUSH    AR3
0011 C002              PUSH    AR2
0013 C001              PUSH    AR1
0015 7BFF              MOV     R3,#0FFH
0017 7A00        E     MOV     R2,#HIGH hard_reset_flag
0019 7900        E     MOV     R1,#LOW hard_reset_flag
001B 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
001E 120000      E     LCALL   ?C?PSTXDATA
0021 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0024 E4                CLR     A
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 7401              MOV     A,#01H
0029 F0                MOVX    @DPTR,A
002A D001              POP     AR1
002C D002              POP     AR2
002E D003              POP     AR3
0030 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 231
0033 120000      E     LCALL   flash_LED_off
                                           ; SOURCE LINE # 234
0036         ?C0050:
0036 22                RET     
             ; FUNCTION CMD_hard_reset (END)

             ; FUNCTION USB_Close (BEGIN)
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 238
C51 COMPILER V9.51   USB_ACCESS                                                            04/25/2014 21:41:50 PAGE 19  

0000 120000      E     LCALL   EEPROM_R_Stop
                                           ; SOURCE LINE # 239
0003 120000      E     LCALL   USBUART_Stop
                                           ; SOURCE LINE # 240
0006 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 243
0009         ?C0051:
0009 22                RET     
             ; FUNCTION USB_Close (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1092    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =    168    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
