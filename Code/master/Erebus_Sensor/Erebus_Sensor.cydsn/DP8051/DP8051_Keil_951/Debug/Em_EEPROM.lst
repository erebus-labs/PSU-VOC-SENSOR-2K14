C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE EM_EEPROM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Em_EEPROM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Em_EEPROM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\Em_EEPROM.lst) CD DB
                    - NOIP OT(0,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Em_EEPROM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Em_EEPROM.c
   3          * Version 1.10
   4          *
   5          * Description:
   6          *  This file provides the source code to API for the Emulated EEPROM Component.
   7          *
   8          ********************************************************************************
   9          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions,
  11          * disclaimers, and limitations in the end user license agreement accompanying
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          #include "Em_EEPROM.h"
  16          
  17          
  18          /*******************************************************************************
  19          * Function Name: Em_EEPROM_Start
  20          ********************************************************************************
  21          *
  22          * Summary:
  23          *  Empty function. Included for consistency with other
  24          *  components.
  25          *
  26          * Parameters:
  27          *  None
  28          *
  29          * Return:
  30          *  None
  31          *
  32          *******************************************************************************/
  33          void Em_EEPROM_Start(void) 
  34          {
  35   1      
  36   1      }
  37          
  38          
  39          /*******************************************************************************
  40          * Function Name: Em_EEPROM_Stop
  41          ********************************************************************************
  42          *
  43          * Summary:
  44          *  Empty function. Included for consistency with other
  45          *  components.
  46          *
  47          * Parameters:
  48          *  None
  49          *
  50          * Return:
  51          *  None
  52          *
  53          *******************************************************************************/
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 2   

  54          void Em_EEPROM_Stop(void) 
  55          {
  56   1      
  57   1      }
  58          
  59          
  60          /*******************************************************************************
  61          * Function Name: Em_EEPROM_Write
  62          ********************************************************************************
  63          *
  64          * Summary:
  65          *  Writes the specified number of bytes from the source buffer in SRAM to the
  66          *  emulated EEPROM array in flash, without modifying other data in flash.
  67          *
  68          * Parameters:
  69          *  srcBuf:    Pointer to the SRAM buffer holding the data to write.
  70          *  eepromPtr: Pointer to the array or variable in flash representing
  71          *             the emulated EEPROM.
  72          *  byteCount: Number of bytes to write from srcBuf to eepromPtr.
  73          *
  74          * Return:
  75          *    CYRET_SUCCESS     Successful write.
  76          *    CYRET_BAD_PARAM   eepromPtr is out of range of flash memory.
  77          *    CYRET_UNKNOWN     Other error in writing flash.
  78          *
  79          *******************************************************************************/
  80          #if (CY_PSOC3)
  81              cystatus Em_EEPROM_Write(const uint8 srcBuf[], const uint8 eepromPtr[], uint16 byteCount)
  82                                                                                      
  83          #else
                  cystatus Em_EEPROM_Write(const uint8 srcBuf[], const uint8 eepromPtr[], uint32 byteCount)
              #endif /* (!CY_PSOC3) */
  86          {
  87   1          uint8 writeBuffer[CY_FLASH_SIZEOF_ROW];
  88   1          uint32 arrayId;
  89   1          uint32 rowId;
  90   1          uint32 dstIndex;
  91   1          uint32 srcIndex;
  92   1          cystatus rc;
  93   1          uint32 eeOffset;
  94   1          uint32 byteOffset;
  95   1          
  96   1          #if (!CY_PSOC4)
  97   1              #if (CYDEV_ECC_ENABLE == 0)
  98   1                  uint8 rowBuffer[CY_FLASH_SIZEOF_ROW + CY_FLASH_SIZEOF_ECC_ROW];
  99   1              #endif /* CYDEV_ECC_ENABLE == 0) */
 100   1          #endif /* (!CY_PSOC4) */
 101   1      
 102   1          eeOffset = (uint32)eepromPtr;
 103   1          #if (CY_PSOC3)
 104   1              eeOffset &= Em_EEPROM_CODE_ADDR_MASK;
 105   1          #endif /* (CY_PSOC3) */
 106   1      
 107   1          /* Make sure, that eepromPtr[] points to ROM */
 108   1          #if (CY_PSOC3)
 109   1              if (((uint32)eepromPtr >= Em_EEPROM_CODE_ADDR_OFFSET) &&
 110   1                  (((uint32)eepromPtr + byteCount) <= Em_EEPROM_CODE_ADDR_END))
 111   1          #else
                      if (((uint32)eepromPtr + byteCount) < Em_EEPROM_FLASH_END_ADDR)
                  #endif /* (CY_PSOC3) */
 114   1          {
 115   2              #if (!CY_PSOC4)
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 3   

 116   2                  (void)CySetTemp();
 117   2      
 118   2                  #if(CYDEV_ECC_ENABLE == 0)
 119   2                      (void)CySetFlashEEBuffer(rowBuffer);
 120   2                  #endif
 121   2              #endif /* (!CY_PSOC4) */
 122   2      
 123   2              arrayId = eeOffset / CY_FLASH_SIZEOF_ARRAY;
 124   2              rowId = (eeOffset / CY_FLASH_SIZEOF_ROW) % Em_EEPROM_ROWS_IN_ARRAY;
 125   2              byteOffset = (CY_FLASH_SIZEOF_ARRAY * arrayId) + (CY_FLASH_SIZEOF_ROW * rowId);
 126   2              srcIndex = 0u;
 127   2      
 128   2              rc = CYRET_SUCCESS;
 129   2      
 130   2              while ((srcIndex < byteCount) && (CYRET_SUCCESS == rc))
 131   2              {
 132   3                  /* Copy data to the write buffer either from the source buffer or from the flash */
 133   3                  for (dstIndex = 0u; dstIndex < CY_FLASH_SIZEOF_ROW; dstIndex++)
 134   3                  {
 135   4                      if ((byteOffset >= eeOffset) && (srcIndex < byteCount))
 136   4                      {
 137   5                          writeBuffer[dstIndex] = srcBuf[srcIndex];
 138   5                          srcIndex++;
 139   5                      }
 140   4                      else
 141   4                      {
 142   5                          writeBuffer[dstIndex] = CY_GET_XTND_REG8(CYDEV_FLASH_BASE + byteOffset);
 143   5                      }
 144   4                      byteOffset++;
 145   4                  }
 146   3      
 147   3                  /* Write flash row */
 148   3                  #if (CY_PSOC4)
                              rc = CySysFlashWriteRow(rowId, writeBuffer);
                          #else
 151   3                      rc = CyWriteRowData((uint8)arrayId, (uint16)rowId, writeBuffer);
 152   3                  #endif /* (CY_PSOC4) */
 153   3      
 154   3                  /* Go to the next row */
 155   3                  rowId++;
 156   3                  #if (CY_FLASH_NUMBER_ARRAYS > 1)
                              if (rowId >= Em_EEPROM_ROWS_IN_ARRAY)
                              {
                                  arrayId++;
                                  rowId = 0u;
                              }
                          #endif /* (CY_FLASH_NUMBER_ARRAYS > 1) */
 163   3              }
 164   2      
 165   2              /* Flush both Cache and PHUB prefetch buffer */
 166   2              #if (CY_PSOC5)
                          CyFlushCache();
                      #elif (CY_PSOC3)
 169   2                  CY_FLASH_CONTROL_REG |= 6u;
 170   2              #endif /* (CY_PSOC5) */
 171   2          }
 172   1          else
 173   1          {
 174   2              rc = CYRET_BAD_PARAM;
 175   2          }
 176   1      
 177   1          /* Mask return codes from flash, if they are not supported */
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 4   

 178   1          if ((CYRET_SUCCESS != rc) && (CYRET_BAD_PARAM != rc))
 179   1          {
 180   2              rc = CYRET_UNKNOWN;
 181   2          }
 182   1          
 183   1          return (rc);
 184   1      }
 185          
 186          
 187          /* [] END OF FILE */
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Em_EEPROM_Start (BEGIN)
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 36
0000         ?C0001:
0000 22                RET     
             ; FUNCTION Em_EEPROM_Start (END)

             ; FUNCTION Em_EEPROM_Stop (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0000         ?C0002:
0000 22                RET     
             ; FUNCTION Em_EEPROM_Stop (END)

             ; FUNCTION _Em_EEPROM_Write (BEGIN)
                                           ; SOURCE LINE # 81
0000 900000      R     MOV     DPTR,#srcBuf
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 102
0006 900000      R     MOV     DPTR,#eepromPtr
0009 120000      E     LCALL   ?C?PLDXDATA
000C AF01              MOV     R7,AR1
000E AE02              MOV     R6,AR2
0010 AD03              MOV     R5,AR3
0012 7C00              MOV     R4,#00H
0014 900000      R     MOV     DPTR,#eeOffset
0017 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 104
001A 900000      R     MOV     DPTR,#eeOffset
001D 120000      E     LCALL   ?C?LLDXDATA
0020 EF                MOV     A,R7
0021 54FF              ANL     A,#0FFH
0023 FF                MOV     R7,A
0024 EE                MOV     A,R6
0025 54FF              ANL     A,#0FFH
0027 FE                MOV     R6,A
0028 ED                MOV     A,R5
0029 5400              ANL     A,#00H
002B FD                MOV     R5,A
002C EC                MOV     A,R4
002D 5400              ANL     A,#00H
002F FC                MOV     R4,A
0030 900000      R     MOV     DPTR,#eeOffset
0033 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 110
0036 900000      R     MOV     DPTR,#eepromPtr
0039 120000      E     LCALL   ?C?PLDXDATA
003C AF01              MOV     R7,AR1
003E AE02              MOV     R6,AR2
0040 AD03              MOV     R5,AR3
0042 7C00              MOV     R4,#00H
0044 7B00              MOV     R3,#00H
0046 7A00              MOV     R2,#00H
0048 79FF              MOV     R1,#0FFH
004A 7800              MOV     R0,#00H
004C D3                SETB    C
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 6   

004D 120000      E     LCALL   ?C?ULCMP
0050 4003              JC      $ + 5H
0052 020000      R     LJMP    ?C0003
0055 900000      R     MOV     DPTR,#eepromPtr
0058 120000      E     LCALL   ?C?PLDXDATA
005B AF01              MOV     R7,AR1
005D AE02              MOV     R6,AR2
005F AD03              MOV     R5,AR3
0061 7C00              MOV     R4,#00H
0063 A804              MOV     R0,AR4
0065 A905              MOV     R1,AR5
0067 AA06              MOV     R2,AR6
0069 AB07              MOV     R3,AR7
006B 900000      R     MOV     DPTR,#byteCount
006E E0                MOVX    A,@DPTR
006F FE                MOV     R6,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 E4                CLR     A
0074 FC                MOV     R4,A
0075 FD                MOV     R5,A
0076 120000      E     LCALL   ?C?LADD
0079 7BFF              MOV     R3,#0FFH
007B 7AFF              MOV     R2,#0FFH
007D 79FF              MOV     R1,#0FFH
007F 7800              MOV     R0,#00H
0081 C3                CLR     C
0082 120000      E     LCALL   ?C?ULCMP
0085 5003              JNC     $ + 5H
0087 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 116
008A 120000      E     LCALL   CySetTemp
                                           ; SOURCE LINE # 119
008D 7B01              MOV     R3,#01H
008F 7A00        R     MOV     R2,#HIGH rowBuffer
0091 7900        R     MOV     R1,#LOW rowBuffer
0093 120000      E     LCALL   _CySetFlashEEBuffer
                                           ; SOURCE LINE # 123
0096 7B00              MOV     R3,#00H
0098 7A00              MOV     R2,#00H
009A 7901              MOV     R1,#01H
009C 7800              MOV     R0,#00H
009E 900000      R     MOV     DPTR,#eeOffset
00A1 120000      E     LCALL   ?C?LLDXDATA
00A4 120000      E     LCALL   ?C?ULDIV
00A7 900000      R     MOV     DPTR,#arrayId
00AA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 124
00AD 7B00              MOV     R3,#00H
00AF 7A01              MOV     R2,#01H
00B1 7900              MOV     R1,#00H
00B3 7800              MOV     R0,#00H
00B5 900000      R     MOV     DPTR,#eeOffset
00B8 120000      E     LCALL   ?C?LLDXDATA
00BB 120000      E     LCALL   ?C?ULDIV
00BE EF                MOV     A,R7
00BF 54FF              ANL     A,#0FFH
00C1 FF                MOV     R7,A
00C2 EE                MOV     A,R6
00C3 5400              ANL     A,#00H
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 7   

00C5 FE                MOV     R6,A
00C6 ED                MOV     A,R5
00C7 5400              ANL     A,#00H
00C9 FD                MOV     R5,A
00CA EC                MOV     A,R4
00CB 5400              ANL     A,#00H
00CD FC                MOV     R4,A
00CE 900000      R     MOV     DPTR,#rowId
00D1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 125
00D4 7F00              MOV     R7,#00H
00D6 7E01              MOV     R6,#01H
00D8 7D00              MOV     R5,#00H
00DA 7C00              MOV     R4,#00H
00DC 900000      R     MOV     DPTR,#rowId
00DF 120000      E     LCALL   ?C?LLDXDATA0
00E2 120000      E     LCALL   ?C?LMUL
00E5 C004              PUSH    AR4
00E7 C005              PUSH    AR5
00E9 C006              PUSH    AR6
00EB C007              PUSH    AR7
00ED 7F00              MOV     R7,#00H
00EF 7E00              MOV     R6,#00H
00F1 7D01              MOV     R5,#01H
00F3 7C00              MOV     R4,#00H
00F5 900000      R     MOV     DPTR,#arrayId
00F8 120000      E     LCALL   ?C?LLDXDATA0
00FB 120000      E     LCALL   ?C?LMUL
00FE A804              MOV     R0,AR4
0100 A905              MOV     R1,AR5
0102 AA06              MOV     R2,AR6
0104 AB07              MOV     R3,AR7
0106 D007              POP     AR7
0108 D006              POP     AR6
010A D005              POP     AR5
010C D004              POP     AR4
010E 120000      E     LCALL   ?C?LADD
0111 900000      R     MOV     DPTR,#byteOffset
0114 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 126
0117 7F00              MOV     R7,#00H
0119 7E00              MOV     R6,#00H
011B 7D00              MOV     R5,#00H
011D 7C00              MOV     R4,#00H
011F 900000      R     MOV     DPTR,#srcIndex
0122 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 128
0125 900000      R     MOV     DPTR,#rc
0128 E4                CLR     A
0129 F0                MOVX    @DPTR,A
012A         ?C0004:
                                           ; SOURCE LINE # 130
012A 900000      R     MOV     DPTR,#byteCount
012D E0                MOVX    A,@DPTR
012E FE                MOV     R6,A
012F A3                INC     DPTR
0130 E0                MOVX    A,@DPTR
0131 FF                MOV     R7,A
0132 E4                CLR     A
0133 FC                MOV     R4,A
0134 FD                MOV     R5,A
0135 900000      R     MOV     DPTR,#srcIndex
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 8   

0138 120000      E     LCALL   ?C?LLDXDATA0
013B C3                CLR     C
013C 120000      E     LCALL   ?C?ULCMP
013F 4003              JC      $ + 5H
0141 020000      R     LJMP    ?C0005
0144 900000      R     MOV     DPTR,#rc
0147 E0                MOVX    A,@DPTR
0148 FF                MOV     R7,A
0149 EF                MOV     A,R7
014A 6003              JZ      $ + 5H
014C 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 133
014F 7F00              MOV     R7,#00H
0151 7E00              MOV     R6,#00H
0153 7D00              MOV     R5,#00H
0155 7C00              MOV     R4,#00H
0157 900000      R     MOV     DPTR,#dstIndex
015A 120000      E     LCALL   ?C?LSTXDATA
015D         ?C0006:
015D 900000      R     MOV     DPTR,#dstIndex
0160 120000      E     LCALL   ?C?LLDXDATA
0163 C3                CLR     C
0164 EE                MOV     A,R6
0165 9401              SUBB    A,#01H
0167 4003              JC      $ + 5H
0169 020000      R     LJMP    ?C0007
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
016C 900000      R     MOV     DPTR,#eeOffset
016F 120000      E     LCALL   ?C?LLDXDATA
0172 900000      R     MOV     DPTR,#byteOffset
0175 120000      E     LCALL   ?C?LLDXDATA0
0178 C3                CLR     C
0179 120000      E     LCALL   ?C?ULCMP
017C 405B              JC      ?C0009
017E 900000      R     MOV     DPTR,#byteCount
0181 E0                MOVX    A,@DPTR
0182 FE                MOV     R6,A
0183 A3                INC     DPTR
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 E4                CLR     A
0187 FC                MOV     R4,A
0188 FD                MOV     R5,A
0189 900000      R     MOV     DPTR,#srcIndex
018C 120000      E     LCALL   ?C?LLDXDATA0
018F C3                CLR     C
0190 120000      E     LCALL   ?C?ULCMP
0193 5044              JNC     ?C0009
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
0195 900000      R     MOV     DPTR,#srcIndex
0198 120000      E     LCALL   ?C?LLDXDATA
019B 900000      R     MOV     DPTR,#srcBuf
019E 120000      E     LCALL   ?C?PLDXDATA
01A1 E9                MOV     A,R1
01A2 2F                ADD     A,R7
01A3 F9                MOV     R1,A
01A4 EA                MOV     A,R2
01A5 3E                ADDC    A,R6
01A6 FA                MOV     R2,A
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 9   

01A7 EB                MOV     A,R3
01A8 3D                ADDC    A,R5
01A9 FB                MOV     R3,A
01AA 120000      E     LCALL   ?C?CLDPTR
01AD FB                MOV     R3,A
01AE 900000      R     MOV     DPTR,#dstIndex
01B1 120000      E     LCALL   ?C?LLDXDATA
01B4 7400        R     MOV     A,#LOW writeBuffer
01B6 2F                ADD     A,R7
01B7 F582              MOV     DPL,A
01B9 E4                CLR     A
01BA 3400        R     ADDC    A,#HIGH writeBuffer
01BC F583              MOV     DPH,A
01BE EB                MOV     A,R3
01BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
01C0 900000      R     MOV     DPTR,#srcIndex
01C3 120000      E     LCALL   ?C?LLDXDATA
01C6 7B01              MOV     R3,#01H
01C8 7A00              MOV     R2,#00H
01CA 7900              MOV     R1,#00H
01CC 7800              MOV     R0,#00H
01CE 120000      E     LCALL   ?C?LADD
01D1 900000      R     MOV     DPTR,#srcIndex
01D4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 139
01D7 8033              SJMP    ?C0010
01D9         ?C0009:
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
01D9 900000      R     MOV     DPTR,#byteOffset
01DC 120000      E     LCALL   ?C?LLDXDATA
01DF EF                MOV     A,R7
01E0 2400              ADD     A,#00H
01E2 FF                MOV     R7,A
01E3 EE                MOV     A,R6
01E4 3400              ADDC    A,#00H
01E6 FE                MOV     R6,A
01E7 ED                MOV     A,R5
01E8 3410              ADDC    A,#010H
01EA FD                MOV     R5,A
01EB EC                MOV     A,R4
01EC 3400              ADDC    A,#00H
01EE FC                MOV     R4,A
01EF A907              MOV     R1,AR7
01F1 AA06              MOV     R2,AR6
01F3 AB05              MOV     R3,AR5
01F5 120000      E     LCALL   _cyread8
01F8 AB07              MOV     R3,AR7
01FA 900000      R     MOV     DPTR,#dstIndex
01FD 120000      E     LCALL   ?C?LLDXDATA
0200 7400        R     MOV     A,#LOW writeBuffer
0202 2F                ADD     A,R7
0203 F582              MOV     DPL,A
0205 E4                CLR     A
0206 3400        R     ADDC    A,#HIGH writeBuffer
0208 F583              MOV     DPH,A
020A EB                MOV     A,R3
020B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
020C         ?C0010:
                                           ; SOURCE LINE # 144
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 10  

020C 900000      R     MOV     DPTR,#byteOffset
020F 120000      E     LCALL   ?C?LLDXDATA
0212 7B01              MOV     R3,#01H
0214 7A00              MOV     R2,#00H
0216 7900              MOV     R1,#00H
0218 7800              MOV     R0,#00H
021A 120000      E     LCALL   ?C?LADD
021D 900000      R     MOV     DPTR,#byteOffset
0220 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 145
0223         ?C0008:
0223 900000      R     MOV     DPTR,#dstIndex
0226 120000      E     LCALL   ?C?LLDXDATA
0229 7B01              MOV     R3,#01H
022B 7A00              MOV     R2,#00H
022D 7900              MOV     R1,#00H
022F 7800              MOV     R0,#00H
0231 120000      E     LCALL   ?C?LADD
0234 900000      R     MOV     DPTR,#dstIndex
0237 120000      E     LCALL   ?C?LSTXDATA
023A 020000      R     LJMP    ?C0006
023D         ?C0007:
                                           ; SOURCE LINE # 151
023D 900000      R     MOV     DPTR,#arrayId
0240 120000      E     LCALL   ?C?LLDXDATA
0243 C007              PUSH    AR7
0245 900000      R     MOV     DPTR,#rowId
0248 120000      E     LCALL   ?C?LLDXDATA
024B AD07              MOV     R5,AR7
024D AC06              MOV     R4,AR6
024F 7B01              MOV     R3,#01H
0251 7A00        R     MOV     R2,#HIGH writeBuffer
0253 7900        R     MOV     R1,#LOW writeBuffer
0255 D007              POP     AR7
0257 120000      E     LCALL   _CyWriteRowData
025A 900000      R     MOV     DPTR,#rc
025D EF                MOV     A,R7
025E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
025F 900000      R     MOV     DPTR,#rowId
0262 120000      E     LCALL   ?C?LLDXDATA
0265 7B01              MOV     R3,#01H
0267 7A00              MOV     R2,#00H
0269 7900              MOV     R1,#00H
026B 7800              MOV     R0,#00H
026D 120000      E     LCALL   ?C?LADD
0270 900000      R     MOV     DPTR,#rowId
0273 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 163
0276 020000      R     LJMP    ?C0004
0279         ?C0005:
                                           ; SOURCE LINE # 169
0279 904800            MOV     DPTR,#04800H
027C E0                MOVX    A,@DPTR
027D FF                MOV     R7,A
027E EF                MOV     A,R7
027F 4406              ORL     A,#06H
0281 FF                MOV     R7,A
0282 EF                MOV     A,R7
0283 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0284 8006              SJMP    ?C0011
C51 COMPILER V9.51   EM_EEPROM                                                             04/25/2014 21:40:54 PAGE 11  

0286         ?C0003:
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0286 900000      R     MOV     DPTR,#rc
0289 7401              MOV     A,#01H
028B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
028C         ?C0011:
                                           ; SOURCE LINE # 178
028C 900000      R     MOV     DPTR,#rc
028F E0                MOVX    A,@DPTR
0290 FF                MOV     R7,A
0291 EF                MOV     A,R7
0292 6010              JZ      ?C0012
0294 900000      R     MOV     DPTR,#rc
0297 E0                MOVX    A,@DPTR
0298 FF                MOV     R7,A
0299 EF                MOV     A,R7
029A 6401              XRL     A,#01H
029C 6006              JZ      ?C0012
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
029E 900000      R     MOV     DPTR,#rc
02A1 74FF              MOV     A,#0FFH
02A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
02A4         ?C0012:
                                           ; SOURCE LINE # 183
02A4 900000      R     MOV     DPTR,#rc
02A7 E0                MOVX    A,@DPTR
02A8 FF                MOV     R7,A
                                           ; SOURCE LINE # 184
02A9         ?C0013:
02A9 22                RET     
             ; FUNCTION _Em_EEPROM_Write (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    684    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    577    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
