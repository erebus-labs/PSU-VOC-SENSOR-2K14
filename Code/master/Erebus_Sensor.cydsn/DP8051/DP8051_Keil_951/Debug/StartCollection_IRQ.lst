C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE STARTCOLLECTION_IRQ
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\StartCollection_IRQ.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\StartCollection_IRQ.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\StartColle
                    -ction_IRQ.lst) CD DB NOIP OT(0,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Star
                    -tCollection_IRQ.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: StartCollection_IRQ.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include <cydevice_trm.h>
  19          #include <CyLib.h>
  20          #include <StartCollection_IRQ.h>
  21          
  22          #if !defined(StartCollection_IRQ__REMOVED) /* Check for removal by optimization */
  23          
  24          /*******************************************************************************
  25          *  Place your includes, defines and code here 
  26          ********************************************************************************/
  27          /* `#START StartCollection_IRQ_intc` */
  28              #include "Interface.h"
  29              #include "Globals.h"
  30              #include "Macros.h"
  31          /* `#END` */
  32          
  33          
  34          /*******************************************************************************
  35          * Function Name: StartCollection_IRQ_Start
  36          ********************************************************************************
  37          *
  38          * Summary:
  39          *  Set up the interrupt and enable it.
  40          *
  41          * Parameters:  
  42          *   None
  43          *
  44          * Return:
  45          *   None
  46          *
  47          *******************************************************************************/
  48          void StartCollection_IRQ_Start(void) 
  49          {
  50   1          /* For all we know the interrupt is active. */
  51   1          StartCollection_IRQ_Disable();
  52   1      
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 2   

  53   1          /* Set the ISR to point to the StartCollection_IRQ Interrupt. */
  54   1          StartCollection_IRQ_SetVector(&StartCollection_IRQ_Interrupt);
  55   1      
  56   1          /* Set the priority. */
  57   1          StartCollection_IRQ_SetPriority((uint8)StartCollection_IRQ_INTC_PRIOR_NUMBER);
  58   1      
  59   1          /* Enable it. */
  60   1          StartCollection_IRQ_Enable();
  61   1      }
  62          
  63          
  64          /*******************************************************************************
  65          * Function Name: StartCollection_IRQ_StartEx
  66          ********************************************************************************
  67          *
  68          * Summary:
  69          *  Set up the interrupt and enable it.
  70          *
  71          * Parameters:  
  72          *   address: Address of the ISR to set in the interrupt vector table.
  73          *
  74          * Return:
  75          *   None
  76          *
  77          *******************************************************************************/
  78          void StartCollection_IRQ_StartEx(cyisraddress address) 
  79          {
  80   1          /* For all we know the interrupt is active. */
  81   1          StartCollection_IRQ_Disable();
  82   1      
  83   1          /* Set the ISR to point to the StartCollection_IRQ Interrupt. */
  84   1          StartCollection_IRQ_SetVector(address);
  85   1      
  86   1          /* Set the priority. */
  87   1          StartCollection_IRQ_SetPriority((uint8)StartCollection_IRQ_INTC_PRIOR_NUMBER);
  88   1      
  89   1          /* Enable it. */
  90   1          StartCollection_IRQ_Enable();
  91   1      }
  92          
  93          
  94          /*******************************************************************************
  95          * Function Name: StartCollection_IRQ_Stop
  96          ********************************************************************************
  97          *
  98          * Summary:
  99          *   Disables and removes the interrupt.
 100          *
 101          * Parameters:  
 102          *   None
 103          *
 104          * Return:
 105          *   None
 106          *
 107          *******************************************************************************/
 108          void StartCollection_IRQ_Stop(void) 
 109          {
 110   1          /* Disable this interrupt. */
 111   1          StartCollection_IRQ_Disable();
 112   1      }
 113          
 114          
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 3   

 115          /*******************************************************************************
 116          * Function Name: StartCollection_IRQ_Interrupt
 117          ********************************************************************************
 118          * Summary:
 119          *   The default Interrupt Service Routine for StartCollection_IRQ.
 120          *
 121          *   Add custom code between the coments to keep the next version of this file
 122          *   from over writting your code.
 123          *
 124          * Parameters:  
 125          *   None
 126          *
 127          * Return:
 128          *   None
 129          *
 130          *******************************************************************************/
 131          CY_ISR(StartCollection_IRQ_Interrupt)
 132          {
 133   1          /*  Place your Interrupt code here. */
 134   1          /* `#START StartCollection_IRQ_Interrupt` */
 135   1      
 136   1          DataStart_waiting = 1;
 137   1          
 138   1          /* `#END` */
 139   1      
 140   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 141   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 142   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (StartCollection_IRQ__ES2_PATCH ))
             -      
                          StartCollection_IRQ_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 145   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 146   1      }
 147          
 148          
 149          /*******************************************************************************
 150          * Function Name: StartCollection_IRQ_SetVector
 151          ********************************************************************************
 152          *
 153          * Summary:
 154          *   Change the ISR vector for the Interrupt. Note calling StartCollection_IRQ_Start
 155          *   will override any effect this method would have had. To set the vector 
 156          *   before the component has been started use StartCollection_IRQ_StartEx instead.
 157          *
 158          * Parameters:
 159          *   address: Address of the ISR to set in the interrupt vector table.
 160          *
 161          * Return:
 162          *   None
 163          *
 164          *******************************************************************************/
 165          void StartCollection_IRQ_SetVector(cyisraddress address) 
 166          {
 167   1          CY_SET_REG16(StartCollection_IRQ_INTC_VECTOR, (uint16) address);
 168   1      }
 169          
 170          
 171          /*******************************************************************************
 172          * Function Name: StartCollection_IRQ_GetVector
 173          ********************************************************************************
 174          *
 175          * Summary:
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 4   

 176          *   Gets the "address" of the current ISR vector for the Interrupt.
 177          *
 178          * Parameters:
 179          *   None
 180          *
 181          * Return:
 182          *   Address of the ISR in the interrupt vector table.
 183          *
 184          *******************************************************************************/
 185          cyisraddress StartCollection_IRQ_GetVector(void) 
 186          {
 187   1          return (cyisraddress) CY_GET_REG16(StartCollection_IRQ_INTC_VECTOR);
 188   1      }
 189          
 190          
 191          /*******************************************************************************
 192          * Function Name: StartCollection_IRQ_SetPriority
 193          ********************************************************************************
 194          *
 195          * Summary:
 196          *   Sets the Priority of the Interrupt. Note calling StartCollection_IRQ_Start
 197          *   or StartCollection_IRQ_StartEx will override any effect this method would 
 198          *   have had. This method should only be called after StartCollection_IRQ_Start or 
 199          *   StartCollection_IRQ_StartEx has been called. To set the initial
 200          *   priority for the component use the cydwr file in the tool.
 201          *
 202          * Parameters:
 203          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
 204          *
 205          * Return:
 206          *   None
 207          *
 208          *******************************************************************************/
 209          void StartCollection_IRQ_SetPriority(uint8 priority) 
 210          {
 211   1          *StartCollection_IRQ_INTC_PRIOR = priority << 5;
 212   1      }
 213          
 214          
 215          /*******************************************************************************
 216          * Function Name: StartCollection_IRQ_GetPriority
 217          ********************************************************************************
 218          *
 219          * Summary:
 220          *   Gets the Priority of the Interrupt.
 221          *
 222          * Parameters:
 223          *   None
 224          *
 225          * Return:
 226          *   Priority of the interrupt. 0 - 7, 0 being the highest.
 227          *
 228          *******************************************************************************/
 229          uint8 StartCollection_IRQ_GetPriority(void) 
 230          {
 231   1          uint8 priority;
 232   1      
 233   1      
 234   1          priority = *StartCollection_IRQ_INTC_PRIOR >> 5;
 235   1      
 236   1          return priority;
 237   1      }
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 5   

 238          
 239          
 240          /*******************************************************************************
 241          * Function Name: StartCollection_IRQ_Enable
 242          ********************************************************************************
 243          *
 244          * Summary:
 245          *   Enables the interrupt.
 246          *
 247          * Parameters:
 248          *   None
 249          *
 250          * Return:
 251          *   None
 252          *
 253          *******************************************************************************/
 254          void StartCollection_IRQ_Enable(void) 
 255          {
 256   1          /* Enable the general interrupt. */
 257   1          *StartCollection_IRQ_INTC_SET_EN = StartCollection_IRQ__INTC_MASK;
 258   1      }
 259          
 260          
 261          /*******************************************************************************
 262          * Function Name: StartCollection_IRQ_GetState
 263          ********************************************************************************
 264          *
 265          * Summary:
 266          *   Gets the state (enabled, disabled) of the Interrupt.
 267          *
 268          * Parameters:
 269          *   None
 270          *
 271          * Return:
 272          *   1 if enabled, 0 if disabled.
 273          *
 274          *******************************************************************************/
 275          uint8 StartCollection_IRQ_GetState(void) 
 276          {
 277   1          /* Get the state of the general interrupt. */
 278   1          return ((*StartCollection_IRQ_INTC_SET_EN & (uint8)StartCollection_IRQ__INTC_MASK) != 0u) ? 1u:0u;
 279   1      }
 280          
 281          
 282          /*******************************************************************************
 283          * Function Name: StartCollection_IRQ_Disable
 284          ********************************************************************************
 285          *
 286          * Summary:
 287          *   Disables the Interrupt.
 288          *
 289          * Parameters:
 290          *   None
 291          *
 292          * Return:
 293          *   None
 294          *
 295          *******************************************************************************/
 296          void StartCollection_IRQ_Disable(void) 
 297          {
 298   1          /* Disable the general interrupt. */
 299   1          *StartCollection_IRQ_INTC_CLR_EN = StartCollection_IRQ__INTC_MASK;
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 6   

 300   1      }
 301          
 302          
 303          /*******************************************************************************
 304          * Function Name: StartCollection_IRQ_SetPending
 305          ********************************************************************************
 306          *
 307          * Summary:
 308          *   Causes the Interrupt to enter the pending state, a software method of
 309          *   generating the interrupt.
 310          *
 311          * Parameters:
 312          *   None
 313          *
 314          * Return:
 315          *   None
 316          *
 317          *******************************************************************************/
 318          void StartCollection_IRQ_SetPending(void) 
 319          {
 320   1          *StartCollection_IRQ_INTC_SET_PD = StartCollection_IRQ__INTC_MASK;
 321   1      }
 322          
 323          
 324          /*******************************************************************************
 325          * Function Name: StartCollection_IRQ_ClearPending
 326          ********************************************************************************
 327          *
 328          * Summary:
 329          *   Clears a pending interrupt.
 330          *
 331          * Parameters:
 332          *   None
 333          *
 334          * Return:
 335          *   None
 336          *
 337          *******************************************************************************/
 338          void StartCollection_IRQ_ClearPending(void) 
 339          {
 340   1          *StartCollection_IRQ_INTC_CLR_PD = StartCollection_IRQ__INTC_MASK;
 341   1      }
 342          
 343          #endif /* End check for removal by optimization */
 344          
 345          
 346          /* [] END OF FILE */
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION StartCollection_IRQ_Start (BEGIN)
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 51
0000 120000      R     LCALL   StartCollection_IRQ_Disable
                                           ; SOURCE LINE # 54
0003 7E00        R     MOV     R6,#HIGH StartCollection_IRQ_Interrupt
0005 7F00        R     MOV     R7,#LOW StartCollection_IRQ_Interrupt
0007 120000      R     LCALL   _StartCollection_IRQ_SetVector
                                           ; SOURCE LINE # 57
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _StartCollection_IRQ_SetPriority
                                           ; SOURCE LINE # 60
000F 120000      R     LCALL   StartCollection_IRQ_Enable
                                           ; SOURCE LINE # 61
0012         ?C0001:
0012 22                RET     
             ; FUNCTION StartCollection_IRQ_Start (END)

             ; FUNCTION _StartCollection_IRQ_StartEx (BEGIN)
                                           ; SOURCE LINE # 78
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0008 120000      R     LCALL   StartCollection_IRQ_Disable
                                           ; SOURCE LINE # 84
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _StartCollection_IRQ_SetVector
                                           ; SOURCE LINE # 87
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _StartCollection_IRQ_SetPriority
                                           ; SOURCE LINE # 90
001B 120000      R     LCALL   StartCollection_IRQ_Enable
                                           ; SOURCE LINE # 91
001E         ?C0002:
001E 22                RET     
             ; FUNCTION _StartCollection_IRQ_StartEx (END)

             ; FUNCTION StartCollection_IRQ_Stop (BEGIN)
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 111
0000 120000      R     LCALL   StartCollection_IRQ_Disable
                                           ; SOURCE LINE # 112
0003         ?C0003:
0003 22                RET     
             ; FUNCTION StartCollection_IRQ_Stop (END)

             ; FUNCTION StartCollection_IRQ_Interrupt (BEGIN)
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 8   

0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 136
0014 900000      E     MOV     DPTR,#DataStart_waiting
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
001A         ?C0004:
001A D000        E     POP     ?C?XPAGE1SFR
001C D086              POP     DPS
001E D084              POP     DPL1
0020 D085              POP     DPH1
0022 D082              POP     DPL
0024 D083              POP     DPH
0026 D0E0              POP     ACC
0028 32                RETI    
             ; FUNCTION StartCollection_IRQ_Interrupt (END)

             ; FUNCTION _StartCollection_IRQ_SetVector (BEGIN)
                                           ; SOURCE LINE # 165
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 790E              MOV     R1,#0EH
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 168
001D         ?C0005:
001D 22                RET     
             ; FUNCTION _StartCollection_IRQ_SetVector (END)

             ; FUNCTION StartCollection_IRQ_GetVector (BEGIN)
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 790E              MOV     R1,#0EH
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 188
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 9   

0009         ?C0006:
0009 22                RET     
             ; FUNCTION StartCollection_IRQ_GetVector (END)

             ; FUNCTION _StartCollection_IRQ_SetPriority (BEGIN)
                                           ; SOURCE LINE # 209
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904487            MOV     DPTR,#04487H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0015         ?C0007:
0015 22                RET     
             ; FUNCTION _StartCollection_IRQ_SetPriority (END)

             ; FUNCTION StartCollection_IRQ_GetPriority (BEGIN)
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 234
0000 904487            MOV     DPTR,#04487H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 237
0015         ?C0008:
0015 22                RET     
             ; FUNCTION StartCollection_IRQ_GetPriority (END)

             ; FUNCTION StartCollection_IRQ_Enable (BEGIN)
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 257
0000 9044C0            MOV     DPTR,#044C0H
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0006         ?C0009:
0006 22                RET     
             ; FUNCTION StartCollection_IRQ_Enable (END)
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 10  


             ; FUNCTION StartCollection_IRQ_GetState (BEGIN)
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 278
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E704            JNB     ACC.7,?C0010
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0011
000D         ?C0010:
000D 7F00              MOV     R7,#00H
000F         ?C0011:
                                           ; SOURCE LINE # 279
000F         ?C0012:
000F 22                RET     
             ; FUNCTION StartCollection_IRQ_GetState (END)

             ; FUNCTION StartCollection_IRQ_Disable (BEGIN)
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 299
0000 9044C8            MOV     DPTR,#044C8H
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
0006         ?C0013:
0006 22                RET     
             ; FUNCTION StartCollection_IRQ_Disable (END)

             ; FUNCTION StartCollection_IRQ_SetPending (BEGIN)
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0000 9044D0            MOV     DPTR,#044D0H
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0006         ?C0014:
0006 22                RET     
             ; FUNCTION StartCollection_IRQ_SetPending (END)

             ; FUNCTION StartCollection_IRQ_ClearPending (BEGIN)
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
0000 9044D8            MOV     DPTR,#044D8H
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
0006         ?C0015:
0006 22                RET     
             ; FUNCTION StartCollection_IRQ_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    223    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
C51 COMPILER V9.51   STARTCOLLECTION_IRQ                                                   05/10/2014 16:55:37 PAGE 11  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
