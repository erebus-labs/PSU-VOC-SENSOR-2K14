C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_ACCESS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_Access.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\USB_Access.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\USB_Access.lst) CD DB NOIP OT(0,SIZE) DF(D
                    -EBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_Access.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright YOUR COMPANY, THE YEAR
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF your company.
   9           *
  10           * ========================================
  11          */
  12          
  13          #include "USB_Access.h"
  14          
  15          /* This file provides function definitions for USB interactions */
  16          
  17          void Run_USB(){
  18   1          
  19   1          // Power has just been applied to the Vbus pin, so we enter USB communication mode
  20   1      
  21   1          uint8 result = 0;
  22   1          uint8 command = 0;
  23   1      
  24   1          USBUART_Start(0u, USBUART_5V_OPERATION);
  25   1          
  26   1          /* Wait for Device to enumerate */
  27   1          while(!USBUART_GetConfiguration() && Vbus_Read());
  28   1      
  29   1          /* Enumeration is done, enable OUT endpoint for receive data from Host */
  30   1          USBUART_CDC_Init();
  31   1          
  32   1          while(Vbus_Read())
  33   1          {  
  34   2              if(USBUART_DataIsReady() != 0u){   /* Check for input data from PC */
  35   3                  result = retrieve(&command, COMMAND_LENGTH);
  36   3                  
  37   3                  // Discard null bytes
  38   3                  if (command == NULL_BYTE){
  39   4                      continue;
  40   4                  }
  41   3              
  42   3                  if (result == SUCCESS){
  43   4                      
  44   4                      switch (command){
  45   5                      
  46   5                          case IDENTIFY:
  47   5                              send_reply(IDENTIFIER);
  48   5                              break;
  49   5                          
  50   5                          case DUMP_DATA:
  51   5                              if (dump_data()){
  52   6                                  confirm_dump();
  53   6                              }
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 2   

  54   5                              else{
  55   6                                  send_reply(FAIL);
  56   6                              }
  57   5                              break;
  58   5                              
  59   5                          case GET_SETTINGS:
  60   5                              send_settings();
  61   5                              break;
  62   5                              
  63   5                          case CHANGE_SETTING:
  64   5                              send_reply(SUCCESS);
  65   5                              if (apply_settings() == SUCCESS){
  66   6                                  send_reply(SUCCESS);
  67   6                              }
  68   5                              else{
  69   6                                  send_reply(FAIL);
  70   6                              }                  
  71   5                              break;
  72   5                              
  73   5                          case UPDATE_RTC:
  74   5                              send_reply(SUCCESS);
  75   5                              if (update_RTC() == SUCCESS){
  76   6                                  send_reply(SUCCESS);
  77   6                              }
  78   5                              else{
  79   6                                  send_reply(FAIL);
  80   6                              }
  81   5                              break;
  82   5                           
  83   5                          case HARD_RESET:
  84   5                              CMD_hard_reset();
  85   5                              send_reply(SUCCESS);
  86   5                              break;
  87   5                              
  88   5                          default:
  89   5                              send_reply(FAIL);
  90   5                              break;
  91   5                      }
  92   4                  }   
  93   3                  else{
  94   4                      send_reply(FAIL);
  95   4                  }
  96   3              }
  97   2          }
  98   1          
  99   1          USB_Close();
 100   1          
 101   1          return;
 102   1      }
 103          
 104          uint8 retrieve(uint8* buffer, uint8 num_bytes){
 105   1          uint16 count = 0;
 106   1          uint8 attempts = 0;
 107   1          uint8 result = FAIL;
 108   1          
 109   1          count = USBUART_GetCount(); 
 110   1          
 111   1          // If data in buffer is the right amount retrieve it
 112   1          if(count == num_bytes){
 113   2              USBUART_GetData(buffer, num_bytes);
 114   2              result = SUCCESS;
 115   2          }
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 3   

 116   1          // Otherwise, flush the USB buffer and report fail
 117   1          else if (count > 0){
 118   2              USBUART_GetChar();
 119   2          }
 120   1          
 121   1          return result;
 122   1      }
 123          
 124          uint8 apply_settings(){
 125   1          uint8 result = FAIL;
 126   1          uint8 settings_buffer[NUM_SETTINGS] = {0};
 127   1          settings_group new_settings;
 128   1          
 129   1          while (!USBUART_DataIsReady() && Vbus_Read());
 130   1          
 131   1          if (Vbus_Read()){
 132   2              if (retrieve(settings_buffer, NUM_SETTINGS) == SUCCESS){
 133   3                  new_settings.sensor = settings_buffer[0];
 134   3                  new_settings.sample_unit = settings_buffer[1];
 135   3                  new_settings.sample_interval = settings_buffer[2];
 136   3                  
 137   3                  result = update_settings(new_settings);   
 138   3              }
 139   2          } 
 140   1          
 141   1          return result;
 142   1      }
 143          
 144          void send_settings(){
 145   1          
 146   1          uint8 settings[NUM_SETTINGS];
 147   1          
 148   1          settings[0] = get_variable(EE_SENSOR);
 149   1          settings[1] = get_variable(EE_SAMPLE_UNIT);
 150   1          settings[2] = get_variable(EE_SAMPLE_INTERVAL);
 151   1          
 152   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 153   1          
 154   1          if(Vbus_Read()){
 155   2              USBUART_PutData((uint8*) &settings, sizeof(settings));
 156   2          }
 157   1          
 158   1          return;   
 159   1      }
 160          
 161          uint8 dump_data(){
 162   1          uint8  ExportBuffer[BUFFER_LEN]; // 64 Bytes per USB data packet.
 163   1          uint8* ExportPtr =(uint8*) MemoryLocation; 
 164   1          uint16 DataCnt = 0;
 165   1          uint8 i = 0;
 166   1          uint8 result = SUCCESS;
 167   1          
 168   1          if(TailPtr == ExportPtr){
 169   2              ExportBuffer[0] = NO_DATA;
 170   2              
 171   2              for (i=1; i< BUFFER_LEN; ++i){
 172   3                  ExportBuffer[i] = PADBYTE;
 173   3              }
 174   2              write_out(ExportBuffer);
 175   2              
 176   2              if (wait_next() == FAIL){
 177   3                  result = FAIL;
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 4   

 178   3              }     
 179   2          }
 180   1                  
 181   1          while (ExportPtr < TailPtr)
 182   1          {   
 183   2              while (i < BUFFER_LEN)
 184   2              {
 185   3                  if (ExportPtr < TailPtr)
 186   3                  {
 187   4                      ExportBuffer[i] = *ExportPtr; // Copy sampled data from flash at *ExportPtr to buffer for 
             -send over usb com 
 188   4                      ++i;
 189   4                      ++ExportPtr;
 190   4                      ++DataCnt;
 191   4                  }
 192   3                  else
 193   3                  {
 194   4                      ExportBuffer[i] = PADBYTE;
 195   4                      ++i;
 196   4                  }           
 197   3              }
 198   2              
 199   2              write_out(ExportBuffer); // Send 64 byte packet of data from memory
 200   2              i = 0;
 201   2              
 202   2              if (wait_next() == FAIL){
 203   3                  result = FAIL;
 204   3                  goto exit;
 205   3              }
 206   2          }
 207   1          
 208   1          // Add the size trailer packet to get total transmission size
 209   1          DataCnt = DataCnt + 4;
 210   1          
 211   1          /* Trailer Packet to Identify End of Sampled Data in Memory */
 212   1          ExportBuffer[0] = 0x80;               // End of Data Identifier
 213   1          ExportBuffer[1] = 0x00;
 214   1          
 215   1          //2 byte Count split into two 1 byte packages to be arrayed.
 216   1          ExportBuffer[2] = (uint8)(DataCnt >> 8);;          // Count of Total Bytes Sent
 217   1          ExportBuffer[3] = (uint8)0x00FF & DataCnt;
 218   1          
 219   1          write_out(ExportBuffer);
 220   1      
 221   1      exit:
 222   1          return result;
 223   1      }
 224          
 225          void write_out(uint8* ExportBuffer){
 226   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 227   1          USBUART_PutData(ExportBuffer, BUFFER_LEN);
 228   1      
 229   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 230   1          USBUART_PutData(ExportBuffer, 0);
 231   1          
 232   1          return;
 233   1      }
 234              
 235          uint8 wait_next(){
 236   1          uint8 reply = 0;
 237   1          uint8 retrieve_status = 0;
 238   1          uint8 continue_status = FAIL;
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 5   

 239   1      
 240   1          while(!reply && Vbus_Read()){
 241   2                  
 242   2              while(!USBUART_GetCount() && Vbus_Read()); 
 243   2              retrieve_status = retrieve(&reply, COMMAND_LENGTH);
 244   2              if(retrieve_status == SUCCESS){
 245   3                  if(reply == NEXT){
 246   4                      continue_status = SUCCESS;
 247   4                      break;
 248   4                  }
 249   3                  else if(reply == FAIL){
 250   4                      continue_status = FAIL;
 251   4                  }
 252   3              }
 253   2          }    
 254   1          
 255   1          return continue_status;
 256   1      }
 257          
 258          void send_reply(uint8 message){
 259   1         
 260   1          while(!USBUART_CDCIsReady() && Vbus_Read());
 261   1          
 262   1          if(Vbus_Read()){
 263   2              USBUART_PutData(&message, REPLY_LEN);
 264   2          }
 265   1          
 266   1          return;
 267   1      }
 268          
 269          void confirm_dump(){
 270   1          uint8 result = 0;
 271   1          uint8 command = 0;
 272   1          
 273   1          while(Vbus_Read()){
 274   2              while(!USBUART_DataIsReady() && Vbus_Read());
 275   2              
 276   2              result = retrieve(&command, COMMAND_LENGTH);
 277   2              
 278   2              if(result == SUCCESS){
 279   3                          
 280   3                  if (command == SUCCESS){
 281   4                      TailPtr = (uint8*) MemoryLocation;
 282   4                      break;
 283   4                  }
 284   3                  
 285   3                  else if (command == FAIL){
 286   4                      break;
 287   4                  }
 288   3              }
 289   2          }
 290   1          
 291   1          return;
 292   1      }
 293          
 294          uint8 update_RTC(){
 295   1          uint8 result = FAIL;
 296   1          uint8 time_buffer[TIME_LENGTH] = {0};
 297   1          RTC_TIME_DATE new_time;
 298   1          
 299   1          while (!USBUART_DataIsReady() && Vbus_Read());
 300   1          
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 6   

 301   1          if (Vbus_Read()){
 302   2              if (retrieve(time_buffer, TIME_LENGTH) == SUCCESS){
 303   3                  new_time.Year = ((uint16) time_buffer[0]) << 0x8;
 304   3                  new_time.Year = new_time.Year | ((uint16) time_buffer[1]);
 305   3                  new_time.Sec = time_buffer[2];
 306   3                  new_time.Min = time_buffer[3];
 307   3                  new_time.Hour = time_buffer[4];
 308   3                  new_time.DayOfMonth = time_buffer[5];
 309   3                  new_time.Month = time_buffer[6];
 310   3                  
 311   3                  result = sync_RTC(&new_time);
 312   3      
 313   3              }
 314   2          }
 315   1          
 316   1          return result;
 317   1      }
 318          
 319          void CMD_hard_reset(){
 320   1      
 321   1          uint8 reset_flag = 0xFF;
 322   1          
 323   1          Em_EEPROM_Write(&reset_flag, &hard_reset_flag, 1u);
 324   1          
 325   1          return;
 326   1      }
 327          
 328          void USB_Close(){
 329   1          
 330   1          rtc_setup();   
 331   1          USBUART_Stop();
 332   1      
 333   1          return;
 334   1      }
 335          
 336          /* [] END OF FILE */
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Run_USB (BEGIN)
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 21
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0005 900000      R     MOV     DPTR,#command
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 24
000A 7D01              MOV     R5,#01H
000C 7F00              MOV     R7,#00H
000E 120000      E     LCALL   _USBUART_Start
0011         ?C0001:
                                           ; SOURCE LINE # 27
0011 120000      E     LCALL   USBUART_GetConfiguration
0014 EF                MOV     A,R7
0015 7006              JNZ     ?C0002
0017 120000      E     LCALL   Vbus_Read
001A EF                MOV     A,R7
001B 70F4              JNZ     ?C0001
001D         ?C0002:
                                           ; SOURCE LINE # 30
001D 120000      E     LCALL   USBUART_CDC_Init
0020         ?C0003:
                                           ; SOURCE LINE # 32
0020 120000      E     LCALL   Vbus_Read
0023 EF                MOV     A,R7
0024 7003              JNZ     $ + 5H
0026 020000      R     LJMP    ?C0004
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
0029 120000      E     LCALL   USBUART_DataIsReady
002C EF                MOV     A,R7
002D 60F1              JZ      ?C0003
                                           ; SOURCE LINE # 35
002F 7B01              MOV     R3,#01H
0031 7A00        R     MOV     R2,#HIGH command
0033 7900        R     MOV     R1,#LOW command
0035 7D01              MOV     R5,#01H
0037 120000      R     LCALL   _retrieve
003A 900000      R     MOV     DPTR,#result
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
003F 900000      R     MOV     DPTR,#command
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 60D9              JZ      ?C0003
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0047         ?C0006:
                                           ; SOURCE LINE # 42
0047 900000      R     MOV     DPTR,#result
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 8   

004D 6402              XRL     A,#02H
004F 6003              JZ      $ + 5H
0051 020000      R     LJMP    ?C0007
                                           ; SOURCE LINE # 44
0054 900000      R     MOV     DPTR,#command
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 120000      E     LCALL   ?C?CCASE
005D 0000        R     DW      ?C0009
005F 01                DB      01H
0060 0000        R     DW      ?C0010
0062 02                DB      02H
0063 0000        R     DW      ?C0013
0065 03                DB      03H
0066 0000        R     DW      ?C0014
0068 04                DB      04H
0069 0000        R     DW      ?C0020
006B 05                DB      05H
006C 0000        R     DW      ?C0017
006E 06                DB      06H
006F 0000              DW      00H
0071 0000        R     DW      ?C0021
                                           ; SOURCE LINE # 46
0073         ?C0009:
                                           ; SOURCE LINE # 47
0073 7F01              MOV     R7,#01H
0075 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 48
0078 80A6              SJMP    ?C0003
                                           ; SOURCE LINE # 50
007A         ?C0010:
                                           ; SOURCE LINE # 51
007A 120000      R     LCALL   dump_data
007D EF                MOV     A,R7
007E 6005              JZ      ?C0011
                                           ; SOURCE LINE # 52
0080 120000      R     LCALL   confirm_dump
                                           ; SOURCE LINE # 53
0083 809B              SJMP    ?C0003
0085         ?C0011:
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0085 7F03              MOV     R7,#03H
0087 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 56
008A         ?C0012:
                                           ; SOURCE LINE # 57
008A 8094              SJMP    ?C0003
                                           ; SOURCE LINE # 59
008C         ?C0013:
                                           ; SOURCE LINE # 60
008C 120000      R     LCALL   send_settings
                                           ; SOURCE LINE # 61
008F 808F              SJMP    ?C0003
                                           ; SOURCE LINE # 63
0091         ?C0014:
                                           ; SOURCE LINE # 64
0091 7F02              MOV     R7,#02H
0093 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 65
0096 120000      R     LCALL   apply_settings
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 9   

0099 EF                MOV     A,R7
009A B40208            CJNE    A,#02H,?C0015
                                           ; SOURCE LINE # 66
009D 7F02              MOV     R7,#02H
009F 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 67
00A2 020000      R     LJMP    ?C0003
00A5         ?C0015:
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
00A5 7F03              MOV     R7,#03H
00A7 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 70
00AA         ?C0016:
                                           ; SOURCE LINE # 71
00AA 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 73
00AD         ?C0017:
                                           ; SOURCE LINE # 74
00AD 7F02              MOV     R7,#02H
00AF 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 75
00B2 120000      R     LCALL   update_RTC
00B5 EF                MOV     A,R7
00B6 B40208            CJNE    A,#02H,?C0018
                                           ; SOURCE LINE # 76
00B9 7F02              MOV     R7,#02H
00BB 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 77
00BE 020000      R     LJMP    ?C0003
00C1         ?C0018:
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
00C1 7F03              MOV     R7,#03H
00C3 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 80
00C6         ?C0019:
                                           ; SOURCE LINE # 81
00C6 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 83
00C9         ?C0020:
                                           ; SOURCE LINE # 84
00C9 120000      R     LCALL   CMD_hard_reset
                                           ; SOURCE LINE # 85
00CC 7F02              MOV     R7,#02H
00CE 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 86
00D1 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 88
00D4         ?C0021:
                                           ; SOURCE LINE # 89
00D4 7F03              MOV     R7,#03H
00D6 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 90
00D9 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 91
00DC         ?C0008:
                                           ; SOURCE LINE # 92
00DC 020000      R     LJMP    ?C0003
00DF         ?C0007:
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 10  

00DF 7F03              MOV     R7,#03H
00E1 120000      R     LCALL   _send_reply
                                           ; SOURCE LINE # 95
00E4         ?C0022:
                                           ; SOURCE LINE # 96
00E4         ?C0005:
                                           ; SOURCE LINE # 97
00E4 020000      R     LJMP    ?C0003
00E7         ?C0004:
                                           ; SOURCE LINE # 99
00E7 120000      R     LCALL   USB_Close
                                           ; SOURCE LINE # 102
00EA         ?C0023:
00EA 22                RET     
             ; FUNCTION Run_USB (END)

             ; FUNCTION _retrieve (BEGIN)
                                           ; SOURCE LINE # 104
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#num_bytes
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
000B 900000      R     MOV     DPTR,#count
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0013 900000      R     MOV     DPTR,#attempts
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0018 900000      R     MOV     DPTR,#result
001B 7403              MOV     A,#03H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
001E 120000      E     LCALL   USBUART_GetCount
0021 900000      R     MOV     DPTR,#count
0024 EE                MOV     A,R6
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0029 900000      R     MOV     DPTR,#num_bytes
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 7E00              MOV     R6,#00H
0030 900000      R     MOV     DPTR,#count
0033 E0                MOVX    A,@DPTR
0034 FC                MOV     R4,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FD                MOV     R5,A
0038 EF                MOV     A,R7
0039 B5051E            CJNE    A,AR5,?C0024
003C EE                MOV     A,R6
003D B5041A            CJNE    A,AR4,?C0024
                                           ; SOURCE LINE # 113
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 11  

0040 900000      R     MOV     DPTR,#buffer
0043 120000      E     LCALL   ?C?PLDXDATA
0046 900000      R     MOV     DPTR,#num_bytes
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C FD                MOV     R5,A
004D 7C00              MOV     R4,#00H
004F 120000      E     LCALL   _USBUART_GetData
                                           ; SOURCE LINE # 114
0052 900000      R     MOV     DPTR,#result
0055 7402              MOV     A,#02H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0058 8014              SJMP    ?C0025
005A         ?C0024:
                                           ; SOURCE LINE # 117
005A 900000      R     MOV     DPTR,#count
005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 D3                SETB    C
0063 EF                MOV     A,R7
0064 9400              SUBB    A,#00H
0066 EE                MOV     A,R6
0067 9400              SUBB    A,#00H
0069 4003              JC      ?C0025
                                           ; SOURCE LINE # 118
006B 120000      E     LCALL   USBUART_GetChar
                                           ; SOURCE LINE # 119
006E         ?C0026:
006E         ?C0025:
                                           ; SOURCE LINE # 121
006E 900000      R     MOV     DPTR,#result
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
                                           ; SOURCE LINE # 122
0073         ?C0027:
0073 22                RET     
             ; FUNCTION _retrieve (END)

             ; FUNCTION apply_settings (BEGIN)
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0000 900000      R     MOV     DPTR,#result
0003 7403              MOV     A,#03H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH _?ix1000
000A 7900        R     MOV     R1,#LOW _?ix1000
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 7B01              MOV     R3,#01H
0014 7A00        R     MOV     R2,#HIGH settings_buffer
0016 7900        R     MOV     R1,#LOW settings_buffer
0018 A801              MOV     R0,AR1
001A AC02              MOV     R4,AR2
001C AD03              MOV     R5,AR3
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 12  

001E D001              POP     AR1
0020 D002              POP     AR2
0022 D003              POP     AR3
0024 7E00              MOV     R6,#00H
0026 7F03              MOV     R7,#03H
0028 120000      E     LCALL   ?C?COPYAMD
002B         ?C0028:
                                           ; SOURCE LINE # 129
002B 120000      E     LCALL   USBUART_DataIsReady
002E EF                MOV     A,R7
002F 7006              JNZ     ?C0029
0031 120000      E     LCALL   Vbus_Read
0034 EF                MOV     A,R7
0035 70F4              JNZ     ?C0028
0037         ?C0029:
                                           ; SOURCE LINE # 131
0037 120000      E     LCALL   Vbus_Read
003A EF                MOV     A,R7
003B 605B              JZ      ?C0030
                                           ; SOURCE LINE # 132
003D 7B01              MOV     R3,#01H
003F 7A00        R     MOV     R2,#HIGH settings_buffer
0041 7900        R     MOV     R1,#LOW settings_buffer
0043 7D03              MOV     R5,#03H
0045 120000      R     LCALL   _retrieve
0048 EF                MOV     A,R7
0049 6402              XRL     A,#02H
004B 704B              JNZ     ?C0030
                                           ; SOURCE LINE # 133
004D 900000      R     MOV     DPTR,#settings_buffer
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 900000      R     MOV     DPTR,#new_settings
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0057 900000      R     MOV     DPTR,#settings_buffer+01H
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 900000      R     MOV     DPTR,#new_settings+01H
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0061 900000      R     MOV     DPTR,#settings_buffer+02H
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 900000      R     MOV     DPTR,#new_settings+02H
0069 EF                MOV     A,R7
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
006B 7B01              MOV     R3,#01H
006D 7A00        R     MOV     R2,#HIGH new_settings
006F 7900        R     MOV     R1,#LOW new_settings
0071 C003              PUSH    AR3
0073 C002              PUSH    AR2
0075 C001              PUSH    AR1
0077 7B01              MOV     R3,#01H
0079 7A00        E     MOV     R2,#HIGH ?update_settings?BYTE
007B 7900        E     MOV     R1,#LOW ?update_settings?BYTE
007D A801              MOV     R0,AR1
007F AC02              MOV     R4,AR2
0081 AD03              MOV     R5,AR3
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 13  

0083 D001              POP     AR1
0085 D002              POP     AR2
0087 D003              POP     AR3
0089 7E00              MOV     R6,#00H
008B 7F03              MOV     R7,#03H
008D 120000      E     LCALL   ?C?COPYAMD
0090 120000      E     LCALL   update_settings
0093 900000      R     MOV     DPTR,#result
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0098         ?C0031:
                                           ; SOURCE LINE # 139
0098         ?C0030:
                                           ; SOURCE LINE # 141
0098 900000      R     MOV     DPTR,#result
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
                                           ; SOURCE LINE # 142
009D         ?C0032:
009D 22                RET     
             ; FUNCTION apply_settings (END)

             ; FUNCTION send_settings (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 148
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 120000      E     LCALL   _get_variable
0007 900000      R     MOV     DPTR,#settings
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
000C 7F01              MOV     R7,#01H
000E 7E00              MOV     R6,#00H
0010 120000      E     LCALL   _get_variable
0013 900000      R     MOV     DPTR,#settings+01H
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0018 7F02              MOV     R7,#02H
001A 7E00              MOV     R6,#00H
001C 120000      E     LCALL   _get_variable
001F 900000      R     MOV     DPTR,#settings+02H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
0024         ?C0033:
                                           ; SOURCE LINE # 152
0024 120000      E     LCALL   USBUART_CDCIsReady
0027 EF                MOV     A,R7
0028 7006              JNZ     ?C0034
002A 120000      E     LCALL   Vbus_Read
002D EF                MOV     A,R7
002E 70F4              JNZ     ?C0033
0030         ?C0034:
                                           ; SOURCE LINE # 154
0030 120000      E     LCALL   Vbus_Read
0033 EF                MOV     A,R7
0034 600D              JZ      ?C0036
                                           ; SOURCE LINE # 155
0036 7B01              MOV     R3,#01H
0038 7A00        R     MOV     R2,#HIGH settings
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 14  

003A 7900        R     MOV     R1,#LOW settings
003C 7D03              MOV     R5,#03H
003E 7C00              MOV     R4,#00H
0040 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 156
0043         ?C0035:
                                           ; SOURCE LINE # 159
0043         ?C0036:
0043 22                RET     
             ; FUNCTION send_settings (END)

             ; FUNCTION dump_data (BEGIN)
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 163
0000 7BFF              MOV     R3,#0FFH
0002 7A00        E     MOV     R2,#HIGH MemoryLocation
0004 7900        E     MOV     R1,#LOW MemoryLocation
0006 900000      R     MOV     DPTR,#ExportPtr
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 164
000C 900000      R     MOV     DPTR,#DataCnt
000F E4                CLR     A
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0014 900000      R     MOV     DPTR,#i
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
0019 900000      R     MOV     DPTR,#result
001C 7402              MOV     A,#02H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
001F 900000      R     MOV     DPTR,#ExportPtr
0022 120000      E     LCALL   ?C?PLDXDATA
0025 C003              PUSH    AR3
0027 C002              PUSH    AR2
0029 C001              PUSH    AR1
002B 900000      E     MOV     DPTR,#TailPtr
002E 120000      E     LCALL   ?C?PLDXDATA
0031 D082              POP     DPL
0033 D083              POP     DPH
0035 D0E0              POP     ACC
0037 6B                XRL     A,R3
0038 7008              JNZ     ?C0086
003A E9                MOV     A,R1
003B 6582              XRL     A,DPL
003D 7003              JNZ     ?C0086
003F EA                MOV     A,R2
0040 6583              XRL     A,DPH
0042         ?C0086:
0042 7047              JNZ     ?C0042
                                           ; SOURCE LINE # 169
0044 900000      R     MOV     DPTR,#ExportBuffer
0047 74A0              MOV     A,#0A0H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
004A 900000      R     MOV     DPTR,#i
004D 7401              MOV     A,#01H
004F F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 15  

0050         ?C0038:
0050 900000      R     MOV     DPTR,#i
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 C3                CLR     C
0057 9440              SUBB    A,#040H
0059 501A              JNC     ?C0039
                                           ; SOURCE LINE # 172
005B 900000      R     MOV     DPTR,#i
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 7400        R     MOV     A,#LOW ExportBuffer
0062 2F                ADD     A,R7
0063 F582              MOV     DPL,A
0065 E4                CLR     A
0066 3400        R     ADDC    A,#HIGH ExportBuffer
0068 F583              MOV     DPH,A
006A 7440              MOV     A,#040H
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
006D         ?C0040:
006D 900000      R     MOV     DPTR,#i
0070 E0                MOVX    A,@DPTR
0071 04                INC     A
0072 F0                MOVX    @DPTR,A
0073 80DB              SJMP    ?C0038
0075         ?C0039:
                                           ; SOURCE LINE # 174
0075 7B01              MOV     R3,#01H
0077 7A00        R     MOV     R2,#HIGH ExportBuffer
0079 7900        R     MOV     R1,#LOW ExportBuffer
007B 120000      R     LCALL   _write_out
                                           ; SOURCE LINE # 176
007E 120000      R     LCALL   wait_next
0081 EF                MOV     A,R7
0082 B40306            CJNE    A,#03H,?C0042
                                           ; SOURCE LINE # 177
0085 900000      R     MOV     DPTR,#result
0088 7403              MOV     A,#03H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
008B         ?C0041:
                                           ; SOURCE LINE # 179
008B         ?C0037:
008B         ?C0042:
                                           ; SOURCE LINE # 181
008B 900000      E     MOV     DPTR,#TailPtr
008E 120000      E     LCALL   ?C?PLDXDATA
0091 C003              PUSH    AR3
0093 C002              PUSH    AR2
0095 C001              PUSH    AR1
0097 900000      R     MOV     DPTR,#ExportPtr
009A 120000      E     LCALL   ?C?PLDXDATA
009D C3                CLR     C
009E D082              POP     DPL
00A0 D083              POP     DPH
00A2 D0E0              POP     ACC
00A4 E9                MOV     A,R1
00A5 9582              SUBB    A,DPL
00A7 EA                MOV     A,R2
00A8 9583              SUBB    A,DPH
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 16  

00AA         ?C0087:
00AA 4003              JC      $ + 5H
00AC 020000      R     LJMP    ?C0043
                                           ; SOURCE LINE # 182
00AF         ?C0044:
                                           ; SOURCE LINE # 183
00AF 900000      R     MOV     DPTR,#i
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 EF                MOV     A,R7
00B5 C3                CLR     C
00B6 9440              SUBB    A,#040H
00B8 5072              JNC     ?C0045
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
00BA 900000      E     MOV     DPTR,#TailPtr
00BD 120000      E     LCALL   ?C?PLDXDATA
00C0 C003              PUSH    AR3
00C2 C002              PUSH    AR2
00C4 C001              PUSH    AR1
00C6 900000      R     MOV     DPTR,#ExportPtr
00C9 120000      E     LCALL   ?C?PLDXDATA
00CC C3                CLR     C
00CD D082              POP     DPL
00CF D083              POP     DPH
00D1 D0E0              POP     ACC
00D3 E9                MOV     A,R1
00D4 9582              SUBB    A,DPL
00D6 EA                MOV     A,R2
00D7 9583              SUBB    A,DPH
00D9         ?C0088:
00D9 5037              JNC     ?C0046
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
00DB 900000      R     MOV     DPTR,#ExportPtr
00DE 120000      E     LCALL   ?C?PLDXDATA
00E1 120000      E     LCALL   ?C?CLDPTR
00E4 FF                MOV     R7,A
00E5 900000      R     MOV     DPTR,#i
00E8 E0                MOVX    A,@DPTR
00E9 FE                MOV     R6,A
00EA 7400        R     MOV     A,#LOW ExportBuffer
00EC 2E                ADD     A,R6
00ED F582              MOV     DPL,A
00EF E4                CLR     A
00F0 3400        R     ADDC    A,#HIGH ExportBuffer
00F2 F583              MOV     DPH,A
00F4 EF                MOV     A,R7
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
00F6 900000      R     MOV     DPTR,#i
00F9 E0                MOVX    A,@DPTR
00FA 04                INC     A
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
00FC 900000      R     MOV     DPTR,#ExportPtr+01H
00FF E4                CLR     A
0100 75F001            MOV     B,#01H
0103 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 190
0106 900000      R     MOV     DPTR,#DataCnt
0109 E4                CLR     A
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 17  

010A 75F001            MOV     B,#01H
010D 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 191
0110 809D              SJMP    ?C0044
0112         ?C0046:
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
0112 900000      R     MOV     DPTR,#i
0115 E0                MOVX    A,@DPTR
0116 FF                MOV     R7,A
0117 7400        R     MOV     A,#LOW ExportBuffer
0119 2F                ADD     A,R7
011A F582              MOV     DPL,A
011C E4                CLR     A
011D 3400        R     ADDC    A,#HIGH ExportBuffer
011F F583              MOV     DPH,A
0121 7440              MOV     A,#040H
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0124 900000      R     MOV     DPTR,#i
0127 E0                MOVX    A,@DPTR
0128 04                INC     A
0129 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
012A         ?C0047:
                                           ; SOURCE LINE # 197
012A 8083              SJMP    ?C0044
012C         ?C0045:
                                           ; SOURCE LINE # 199
012C 7B01              MOV     R3,#01H
012E 7A00        R     MOV     R2,#HIGH ExportBuffer
0130 7900        R     MOV     R1,#LOW ExportBuffer
0132 120000      R     LCALL   _write_out
                                           ; SOURCE LINE # 200
0135 900000      R     MOV     DPTR,#i
0138 E4                CLR     A
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
013A 120000      R     LCALL   wait_next
013D EF                MOV     A,R7
013E 6403              XRL     A,#03H
0140 6003              JZ      $ + 5H
0142 020000      R     LJMP    ?C0042
                                           ; SOURCE LINE # 203
0145 900000      R     MOV     DPTR,#result
0148 7403              MOV     A,#03H
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
014B 8043              SJMP    exit
                                           ; SOURCE LINE # 205
014D         ?C0048:
                                           ; SOURCE LINE # 206
014D 020000      R     LJMP    ?C0042
0150         ?C0043:
                                           ; SOURCE LINE # 209
0150 900000      R     MOV     DPTR,#DataCnt
0153 E4                CLR     A
0154 75F004            MOV     B,#04H
0157 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 212
015A 900000      R     MOV     DPTR,#ExportBuffer
015D 7480              MOV     A,#080H
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 18  

015F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
0160 900000      R     MOV     DPTR,#ExportBuffer+01H
0163 E4                CLR     A
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0165 900000      R     MOV     DPTR,#DataCnt
0168 E0                MOVX    A,@DPTR
0169 FE                MOV     R6,A
016A A3                INC     DPTR
016B E0                MOVX    A,@DPTR
016C FF                MOV     R7,A
016D EE                MOV     A,R6
016E FF                MOV     R7,A
016F 7E00              MOV     R6,#00H
0171 900000      R     MOV     DPTR,#ExportBuffer+02H
0174 EF                MOV     A,R7
0175 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0176 900000      R     MOV     DPTR,#DataCnt
0179 E0                MOVX    A,@DPTR
017A FE                MOV     R6,A
017B A3                INC     DPTR
017C E0                MOVX    A,@DPTR
017D FF                MOV     R7,A
017E EF                MOV     A,R7
017F 54FF              ANL     A,#0FFH
0181 FF                MOV     R7,A
0182 900000      R     MOV     DPTR,#ExportBuffer+03H
0185 EF                MOV     A,R7
0186 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0187 7B01              MOV     R3,#01H
0189 7A00        R     MOV     R2,#HIGH ExportBuffer
018B 7900        R     MOV     R1,#LOW ExportBuffer
018D 120000      R     LCALL   _write_out
                                           ; SOURCE LINE # 221
0190         exit:
                                           ; SOURCE LINE # 222
0190 900000      R     MOV     DPTR,#result
0193 E0                MOVX    A,@DPTR
0194 FF                MOV     R7,A
                                           ; SOURCE LINE # 223
0195         ?C0050:
0195 22                RET     
             ; FUNCTION dump_data (END)

             ; FUNCTION _write_out (BEGIN)
                                           ; SOURCE LINE # 225
0000 900000      R     MOV     DPTR,#ExportBuffer
0003 120000      E     LCALL   ?C?PSTXDATA
0006         ?C0051:
                                           ; SOURCE LINE # 226
0006 120000      E     LCALL   USBUART_CDCIsReady
0009 EF                MOV     A,R7
000A 7006              JNZ     ?C0052
000C 120000      E     LCALL   Vbus_Read
000F EF                MOV     A,R7
0010 70F4              JNZ     ?C0051
0012         ?C0052:
                                           ; SOURCE LINE # 227
0012 900000      R     MOV     DPTR,#ExportBuffer
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 19  

0015 120000      E     LCALL   ?C?PLDXDATA
0018 7D40              MOV     R5,#040H
001A 7C00              MOV     R4,#00H
001C 120000      E     LCALL   _USBUART_PutData
001F         ?C0053:
                                           ; SOURCE LINE # 229
001F 120000      E     LCALL   USBUART_CDCIsReady
0022 EF                MOV     A,R7
0023 7006              JNZ     ?C0054
0025 120000      E     LCALL   Vbus_Read
0028 EF                MOV     A,R7
0029 70F4              JNZ     ?C0053
002B         ?C0054:
                                           ; SOURCE LINE # 230
002B 900000      R     MOV     DPTR,#ExportBuffer
002E 120000      E     LCALL   ?C?PLDXDATA
0031 7D00              MOV     R5,#00H
0033 7C00              MOV     R4,#00H
0035 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 233
0038         ?C0055:
0038 22                RET     
             ; FUNCTION _write_out (END)

             ; FUNCTION wait_next (BEGIN)
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0000 900000      R     MOV     DPTR,#reply
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
0005 900000      R     MOV     DPTR,#retrieve_status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
000A 900000      R     MOV     DPTR,#continue_status
000D 7403              MOV     A,#03H
000F F0                MOVX    @DPTR,A
0010         ?C0056:
                                           ; SOURCE LINE # 240
0010 900000      R     MOV     DPTR,#reply
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 7050              JNZ     ?C0057
0018 120000      E     LCALL   Vbus_Read
001B EF                MOV     A,R7
001C 604A              JZ      ?C0057
001E         ?C0058:
                                           ; SOURCE LINE # 242
001E 120000      E     LCALL   USBUART_GetCount
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 7006              JNZ     ?C0059
0025 120000      E     LCALL   Vbus_Read
0028 EF                MOV     A,R7
0029 70F3              JNZ     ?C0058
002B         ?C0059:
                                           ; SOURCE LINE # 243
002B 7B01              MOV     R3,#01H
002D 7A00        R     MOV     R2,#HIGH reply
002F 7900        R     MOV     R1,#LOW reply
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 20  

0031 7D01              MOV     R5,#01H
0033 120000      R     LCALL   _retrieve
0036 900000      R     MOV     DPTR,#retrieve_status
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
003B 900000      R     MOV     DPTR,#retrieve_status
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 B402CC            CJNE    A,#02H,?C0056
                                           ; SOURCE LINE # 245
0044 900000      R     MOV     DPTR,#reply
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A B4070A            CJNE    A,#07H,?C0061
                                           ; SOURCE LINE # 246
004D 900000      R     MOV     DPTR,#continue_status
0050 7402              MOV     A,#02H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0053 8013              SJMP    ?C0057
                                           ; SOURCE LINE # 248
0055 80B9              SJMP    ?C0056
0057         ?C0061:
                                           ; SOURCE LINE # 249
0057 900000      R     MOV     DPTR,#reply
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D B403B0            CJNE    A,#03H,?C0056
                                           ; SOURCE LINE # 250
0060 900000      R     MOV     DPTR,#continue_status
0063 7403              MOV     A,#03H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0066         ?C0063:
0066         ?C0062:
                                           ; SOURCE LINE # 252
0066         ?C0060:
                                           ; SOURCE LINE # 253
0066 80A8              SJMP    ?C0056
0068         ?C0057:
                                           ; SOURCE LINE # 255
0068 900000      R     MOV     DPTR,#continue_status
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
                                           ; SOURCE LINE # 256
006D         ?C0064:
006D 22                RET     
             ; FUNCTION wait_next (END)

             ; FUNCTION _send_reply (BEGIN)
                                           ; SOURCE LINE # 258
0000 900000      R     MOV     DPTR,#message
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005         ?C0065:
                                           ; SOURCE LINE # 260
0005 120000      E     LCALL   USBUART_CDCIsReady
0008 EF                MOV     A,R7
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 21  

0009 7006              JNZ     ?C0066
000B 120000      E     LCALL   Vbus_Read
000E EF                MOV     A,R7
000F 70F4              JNZ     ?C0065
0011         ?C0066:
                                           ; SOURCE LINE # 262
0011 120000      E     LCALL   Vbus_Read
0014 EF                MOV     A,R7
0015 600D              JZ      ?C0068
                                           ; SOURCE LINE # 263
0017 7B01              MOV     R3,#01H
0019 7A00        R     MOV     R2,#HIGH message
001B 7900        R     MOV     R1,#LOW message
001D 7D01              MOV     R5,#01H
001F 7C00              MOV     R4,#00H
0021 120000      E     LCALL   _USBUART_PutData
                                           ; SOURCE LINE # 264
0024         ?C0067:
                                           ; SOURCE LINE # 267
0024         ?C0068:
0024 22                RET     
             ; FUNCTION _send_reply (END)

             ; FUNCTION confirm_dump (BEGIN)
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
0000 900000      R     MOV     DPTR,#result
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
0005 900000      R     MOV     DPTR,#command
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A         ?C0069:
                                           ; SOURCE LINE # 273
000A 120000      E     LCALL   Vbus_Read
000D EF                MOV     A,R7
000E 6049              JZ      ?C0077
0010         ?C0071:
                                           ; SOURCE LINE # 274
0010 120000      E     LCALL   USBUART_DataIsReady
0013 EF                MOV     A,R7
0014 7006              JNZ     ?C0072
0016 120000      E     LCALL   Vbus_Read
0019 EF                MOV     A,R7
001A 70F4              JNZ     ?C0071
001C         ?C0072:
                                           ; SOURCE LINE # 276
001C 7B01              MOV     R3,#01H
001E 7A00        R     MOV     R2,#HIGH command
0020 7900        R     MOV     R1,#LOW command
0022 7D01              MOV     R5,#01H
0024 120000      R     LCALL   _retrieve
0027 900000      R     MOV     DPTR,#result
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
002C 900000      R     MOV     DPTR,#result
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 B402D5            CJNE    A,#02H,?C0069
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 22  

                                           ; SOURCE LINE # 280
0035 900000      R     MOV     DPTR,#command
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B B4020F            CJNE    A,#02H,?C0074
                                           ; SOURCE LINE # 281
003E 7BFF              MOV     R3,#0FFH
0040 7A00        E     MOV     R2,#HIGH MemoryLocation
0042 7900        E     MOV     R1,#LOW MemoryLocation
0044 900000      E     MOV     DPTR,#TailPtr
0047 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 282
004A 22                RET     
                                           ; SOURCE LINE # 283
004B 80BD              SJMP    ?C0069
004D         ?C0074:
                                           ; SOURCE LINE # 285
004D 900000      R     MOV     DPTR,#command
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 B403B4            CJNE    A,#03H,?C0069
                                           ; SOURCE LINE # 286
0056 22                RET     
                                           ; SOURCE LINE # 287
0057         ?C0076:
0057         ?C0075:
                                           ; SOURCE LINE # 288
0057         ?C0073:
                                           ; SOURCE LINE # 289
0057 80B1              SJMP    ?C0069
0059         ?C0070:
                                           ; SOURCE LINE # 292
0059         ?C0077:
0059 22                RET     
             ; FUNCTION confirm_dump (END)

             ; FUNCTION update_RTC (BEGIN)
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
0000 900000      R     MOV     DPTR,#result
0003 7403              MOV     A,#03H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH _?ix1001
000A 7900        R     MOV     R1,#LOW _?ix1001
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 7B01              MOV     R3,#01H
0014 7A00        R     MOV     R2,#HIGH time_buffer
0016 7900        R     MOV     R1,#LOW time_buffer
0018 A801              MOV     R0,AR1
001A AC02              MOV     R4,AR2
001C AD03              MOV     R5,AR3
001E D001              POP     AR1
0020 D002              POP     AR2
0022 D003              POP     AR3
0024 7E00              MOV     R6,#00H
0026 7F07              MOV     R7,#07H
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 23  

0028 120000      E     LCALL   ?C?COPYAMD
002B         ?C0078:
                                           ; SOURCE LINE # 299
002B 120000      E     LCALL   USBUART_DataIsReady
002E EF                MOV     A,R7
002F 7006              JNZ     ?C0079
0031 120000      E     LCALL   Vbus_Read
0034 EF                MOV     A,R7
0035 70F4              JNZ     ?C0078
0037         ?C0079:
                                           ; SOURCE LINE # 301
0037 120000      E     LCALL   Vbus_Read
003A EF                MOV     A,R7
003B 7003              JNZ     $ + 5H
003D 020000      R     LJMP    ?C0080
                                           ; SOURCE LINE # 302
0040 7B01              MOV     R3,#01H
0042 7A00        R     MOV     R2,#HIGH time_buffer
0044 7900        R     MOV     R1,#LOW time_buffer
0046 7D07              MOV     R5,#07H
0048 120000      R     LCALL   _retrieve
004B EF                MOV     A,R7
004C 6402              XRL     A,#02H
004E 7070              JNZ     ?C0080
                                           ; SOURCE LINE # 303
0050 900000      R     MOV     DPTR,#time_buffer
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 7E00              MOV     R6,#00H
0057 EF                MOV     A,R7
0058 7F00              MOV     R7,#00H
005A FE                MOV     R6,A
005B 900000      R     MOV     DPTR,#new_time+08H
005E EE                MOV     A,R6
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
0063 900000      R     MOV     DPTR,#time_buffer+01H
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 7E00              MOV     R6,#00H
006A 900000      R     MOV     DPTR,#new_time+08H
006D E0                MOVX    A,@DPTR
006E FC                MOV     R4,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 EE                MOV     A,R6
0073 4C                ORL     A,R4
0074 FE                MOV     R6,A
0075 EF                MOV     A,R7
0076 4D                ORL     A,R5
0077 FF                MOV     R7,A
0078 900000      R     MOV     DPTR,#new_time+08H
007B EE                MOV     A,R6
007C F0                MOVX    @DPTR,A
007D A3                INC     DPTR
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 24  

0080 900000      R     MOV     DPTR,#time_buffer+02H
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 900000      R     MOV     DPTR,#new_time
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
008A 900000      R     MOV     DPTR,#time_buffer+03H
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F 900000      R     MOV     DPTR,#new_time+01H
0092 EF                MOV     A,R7
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
0094 900000      R     MOV     DPTR,#time_buffer+04H
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 900000      R     MOV     DPTR,#new_time+02H
009C EF                MOV     A,R7
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
009E 900000      R     MOV     DPTR,#time_buffer+05H
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 900000      R     MOV     DPTR,#new_time+04H
00A6 EF                MOV     A,R7
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
00A8 900000      R     MOV     DPTR,#time_buffer+06H
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD 900000      R     MOV     DPTR,#new_time+07H
00B0 EF                MOV     A,R7
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
00B2 7B01              MOV     R3,#01H
00B4 7A00        R     MOV     R2,#HIGH new_time
00B6 7900        R     MOV     R1,#LOW new_time
00B8 120000      E     LCALL   _sync_RTC
00BB 900000      R     MOV     DPTR,#result
00BE EF                MOV     A,R7
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
00C0         ?C0081:
                                           ; SOURCE LINE # 314
00C0         ?C0080:
                                           ; SOURCE LINE # 316
00C0 900000      R     MOV     DPTR,#result
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
                                           ; SOURCE LINE # 317
00C5         ?C0082:
00C5 22                RET     
             ; FUNCTION update_RTC (END)

             ; FUNCTION CMD_hard_reset (BEGIN)
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 321
0000 900000      R     MOV     DPTR,#reset_flag
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
C51 COMPILER V9.51   USB_ACCESS                                                            05/08/2014 01:47:58 PAGE 25  

0006 7B01              MOV     R3,#01H
0008 7A00        R     MOV     R2,#HIGH reset_flag
000A 7900        R     MOV     R1,#LOW reset_flag
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 7BFF              MOV     R3,#0FFH
0014 7A00        E     MOV     R2,#HIGH hard_reset_flag
0016 7900        E     MOV     R1,#LOW hard_reset_flag
0018 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
001B 120000      E     LCALL   ?C?PSTXDATA
001E 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
0021 E4                CLR     A
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 7401              MOV     A,#01H
0026 F0                MOVX    @DPTR,A
0027 D001              POP     AR1
0029 D002              POP     AR2
002B D003              POP     AR3
002D 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 326
0030         ?C0083:
0030 22                RET     
             ; FUNCTION CMD_hard_reset (END)

             ; FUNCTION USB_Close (BEGIN)
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 330
0000 120000      E     LCALL   rtc_setup
                                           ; SOURCE LINE # 331
0003 120000      E     LCALL   USBUART_Stop
                                           ; SOURCE LINE # 334
0006         ?C0084:
0006 22                RET     
             ; FUNCTION USB_Close (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1531    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =    119    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
