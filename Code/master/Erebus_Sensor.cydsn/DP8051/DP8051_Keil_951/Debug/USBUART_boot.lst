C51 COMPILER V9.51   USBUART_BOOT                                                          05/30/2014 15:03:37 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBUART_BOOT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBUART_boot.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBUART_boot.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\USBUART_boot.lst)
                    - CD DB NOIP OT(0,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\USBUART_boot.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBUART_boot.c
   3          * Version 2.60
   4          *
   5          * Description:
   6          *  Boot loader API for USBFS Component.
   7          *
   8          *  Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBUART.h"
  18          
  19          #if defined(CYDEV_BOOTLOADER_IO_COMP) && ((CYDEV_BOOTLOADER_IO_COMP == CyBtldr_USBUART) || \
  20                                                    (CYDEV_BOOTLOADER_IO_COMP == CyBtldr_Custom_Interface))
              
              
              /***************************************
              *    Bootloader defines
              ***************************************/
              
              #define USBUART_CyBtLdrStarttimer(X, T)         {USBUART_universalTime = T * 10; X = 0u;}
              #define USBUART_CyBtLdrChecktimer(X)            ((X++ < USBUART_universalTime) ? 1u : 0u)
              
              #define USBUART_BTLDR_OUT_EP      (0x01u)
              #define USBUART_BTLDR_IN_EP       (0x02u)
              
              
              /***************************************
              *    Bootloader Variables
              ***************************************/
              
              static uint16 USBUART_universalTime;
              static uint8 USBUART_started = 0u;
              
              
              /*******************************************************************************
              * Function Name: USBUART_CyBtldrCommStart
              ********************************************************************************
              *
              * Summary:
              *  Starts the component and enables the interrupt.
              *
              * Parameters:
              *  None.
              *
              * Return:
              *  None.
C51 COMPILER V9.51   USBUART_BOOT                                                          05/30/2014 15:03:37 PAGE 2   

              *
              * Side Effects:
              *  This function starts the USB with 3V or 5V operation.
              *
              * Reentrant:
              *  No.
              *
              *******************************************************************************/
              void USBUART_CyBtldrCommStart(void) 
              {
                  CyGlobalIntEnable;      /* Enable Global Interrupts */
              
                  /*Start USBFS Operation/device 0 and with 5V or 3V operation depend on Voltage Configuration in DWR */
                  USBUART_Start(0u, USBUART_DWR_VDDD_OPERATION);
              
                  /* USB component started, the correct enumeration will be checked in first Read operation */
                  USBUART_started = 1u;
              
              }
              
              
              /*******************************************************************************
              * Function Name: USBUART_CyBtldrCommStop.
              ********************************************************************************
              *
              * Summary:
              *  Disable the component and disable the interrupt.
              *
              * Parameters:
              *  None.
              *
              * Return:
              *  None.
              *
              *******************************************************************************/
              void USBUART_CyBtldrCommStop(void) 
              {
                  USBUART_Stop();
              }
              
              
              /*******************************************************************************
              * Function Name: USBUART_CyBtldrCommReset.
              ********************************************************************************
              *
              * Summary:
              *  Resets the receive and transmit communication Buffers.
              *
              * Parameters:
              *  None.
              *
              * Return:
              *  None.
              *
              * Reentrant:
              *  No.
              *
              *******************************************************************************/
              void USBUART_CyBtldrCommReset(void) 
              {
                  USBUART_EnableOutEP(USBUART_BTLDR_OUT_EP);  /* Enable the OUT endpoint */
              }
C51 COMPILER V9.51   USBUART_BOOT                                                          05/30/2014 15:03:37 PAGE 3   

              
              
              /*******************************************************************************
              * Function Name: USBUART_CyBtldrCommWrite.
              ********************************************************************************
              *
              * Summary:
              *  Allows the caller to write data to the boot loader host. The function will
              *  handle polling to allow a block of data to be completely sent to the host
              *  device.
              *
              * Parameters:
              *  pData:    A pointer to the block of data to send to the device
              *  size:     The number of bytes to write.
              *  count:    Pointer to an unsigned short variable to write the number of
              *             bytes actually written.
              *  timeOut:  Number of units to wait before returning because of a timeout.
              *
              * Return:
              *  Returns the value that best describes the problem.
              *
              * Reentrant:
              *  No.
              *
              *******************************************************************************/
              cystatus USBUART_CyBtldrCommWrite(uint8 *pData, uint16 size, uint16 *count, uint8 timeOut) CYSMALL
                                                                          
              {
                  uint16 time;
                  cystatus status;
              
                  /* Enable IN transfer */
                  USBUART_LoadInEP(USBUART_BTLDR_IN_EP, pData, USBUART_BTLDR_SIZEOF_READ_BUFFER);
              
                  /* Start a timer to wait on. */
                  USBUART_CyBtLdrStarttimer(time, timeOut);
              
                  /* Wait for the master to read it. */
                  while((USBUART_GetEPState(USBUART_BTLDR_IN_EP) == USBUART_IN_BUFFER_FULL) && \
                         USBUART_CyBtLdrChecktimer(time))
                  {
                      CyDelay(1u); /* 1ms delay */
                  }
              
                  if (USBUART_GetEPState(USBUART_BTLDR_IN_EP) == USBUART_IN_BUFFER_FULL)
                  {
                      status = CYRET_TIMEOUT;
                  }
                  else
                  {
                      *count = size;
                      status = CYRET_SUCCESS;
                  }
              
                  return(status);
              }
              
              
              /*******************************************************************************
              * Function Name: USBUART_CyBtldrCommRead.
              ********************************************************************************
              *
C51 COMPILER V9.51   USBUART_BOOT                                                          05/30/2014 15:03:37 PAGE 4   

              * Summary:
              *  Allows the caller to read data from the boot loader host. The function will
              *  handle polling to allow a block of data to be completely received from the
              *  host device.
              *
              * Parameters:
              *  pData:    A pointer to the area to store the block of data received
              *             from the device.
              *  size:     The number of bytes to read.
              *  count:    Pointer to an unsigned short variable to write the number
              *             of bytes actually read.
              *  timeOut:  Number of units to wait before returning because of a timeOut.
              *            Timeout is measured in 10s of ms.
              *
              * Return:
              *  Returns the value that best describes the problem.
              *
              * Reentrant:
              *  No.
              *
              *******************************************************************************/
              cystatus USBUART_CyBtldrCommRead(uint8 *pData, uint16 size, uint16 *count, uint8 timeOut) CYSMALL
                                                                          
              {
                  cystatus status;
                  uint16 time;
              
                  if(size > USBUART_BTLDR_SIZEOF_WRITE_BUFFER)
                  {
                      size = USBUART_BTLDR_SIZEOF_WRITE_BUFFER;
                  }
                  /* Start a timer to wait on. */
                  USBUART_CyBtLdrStarttimer(time, timeOut);
              
                  /* Wait on enumeration in first time */
                  if(USBUART_started)
                  {
                      /* Wait for Device to enumerate */
                      while(!USBUART_GetConfiguration() && USBUART_CyBtLdrChecktimer(time))
                      {
                          CyDelay(1u); /* 1ms delay */
                      }
                      /* Enable first OUT, if enumeration complete */
                      if(USBUART_GetConfiguration())
                      {
                          USBUART_IsConfigurationChanged();  /* Clear configuration changes state status */
                          USBUART_CyBtldrCommReset();
                          USBUART_started = 0u;
                      }
                  }
                  else /* Check for configuration changes, has been done by Host */
                  {
                      if(USBUART_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE request or RESE
             -T */
                      {
                          if(USBUART_GetConfiguration() != 0u)   /* Init OUT endpoints when device reconfigured */
                          {
                              USBUART_CyBtldrCommReset();
                          }
                      }
                  }
                  /* Wait on next packet */
C51 COMPILER V9.51   USBUART_BOOT                                                          05/30/2014 15:03:37 PAGE 5   

                  while((USBUART_GetEPState(USBUART_BTLDR_OUT_EP) != USBUART_OUT_BUFFER_FULL) && \
                         USBUART_CyBtLdrChecktimer(time))
                  {
                      CyDelay(1u); /* 1ms delay */
                  }
              
                  /* OUT EP has completed */
                  if (USBUART_GetEPState(USBUART_BTLDR_OUT_EP) == USBUART_OUT_BUFFER_FULL)
                  {
                      *count = USBUART_ReadOutEP(USBUART_BTLDR_OUT_EP, pData, size);
                      status = CYRET_SUCCESS;
                  }
                  else
                  {
                      *count = 0u;
                      status = CYRET_TIMEOUT;
                  }
                  return(status);
              }
              
              #endif /* End CYDEV_BOOTLOADER_IO_COMP == CyBtldr_USBUART */
 260          
 261          
 262          /* [] END OF FILE */
C51 COMPILER V9.51   USBUART_BOOT                                                          05/30/2014 15:03:37 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
