C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.lst)
                    - CD DB NOIP OT(0,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 3.0 Component Pack 7
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          
  25          #if defined(__C51__) || defined(__CX51__)
  26                  #define CYPACKED
  27                  #define CYPACKED_ATTR
  28                  #define CYALIGNED
  29                  
  30              #define CY_CFG_UNUSED
  31                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  32          
  33          
  34          
  35                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  36                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  37                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  38          #else
                      #error Unsupported toolchain
              #endif
  41          
  42          
  43          
  44          /* Clock startup error codes                                                   */
  45          #define CYCLOCKSTART_NO_ERROR    0u
  46          #define CYCLOCKSTART_XTAL_ERROR  1u
  47          #define CYCLOCKSTART_32KHZ_ERROR 2u
  48          #define CYCLOCKSTART_PLL_ERROR   3u
  49          
  50          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
              /*******************************************************************************
              * Function Name: CyClockStartupError
              ********************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 2   

              * Summary:
              *  If an error is encountered during clock configuration (crystal startup error,
              *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
              *  the customer, this function will stop in an infinite loop.
              *
              * Parameters:
              *   void
              *
              * Return:
              *   void
              *
              *******************************************************************************/
              CY_CFG_UNUSED
              static void CyClockStartupError(uint8 errorCode);
              CY_CFG_UNUSED
              static void CyClockStartupError(uint8 errorCode)
              {
                  /* To remove the compiler warning if errorCode not used.                */
                  errorCode = errorCode;
              
                  /* `#START CyClockStartupError` */
              
                  /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
                  /* we will end up here to allow the customer to implement something to  */
                  /* deal with the clock condition.                                       */
              
                  /* `#END` */
              
                  /* If nothing else, stop here since the clocks have not started         */
                  /* correctly.                                                           */
                  while(1) {}
              }
              #endif
  87          
  88          #define cfg_byte_table ((const void CYFAR *)0x080000u)
  89          /* IOPINS0_0 Address: CYREG_PRT0_DR Size (bytes): 10 */
  90          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00080218u)
  91          
  92          /* IOPINS0_8 Address: CYREG_PRT15_DR Size (bytes): 10 */
  93          #define BS_IOPINS0_8_VAL ((const uint8 CYFAR *)0x00080224u)
  94          
  95          /* IOPINS0_1 Address: CYREG_PRT1_DR Size (bytes): 10 */
  96          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x00080230u)
  97          
  98          /* IOPINS0_2 Address: CYREG_PRT2_DR Size (bytes): 10 */
  99          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x0008023Cu)
 100          
 101          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 102          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)0x00080248u)
 103          
 104          
 105          /*******************************************************************************
 106          * Function Name: ClockSetup
 107          ********************************************************************************
 108          *
 109          * Summary:
 110          *  Performs the initialization of all of the clocks in the device based on the
 111          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 112          *  clocks and setting the necessary dividers to produce the desired frequency. 
 113          *
 114          * Parameters:
 115          *  void
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 3   

 116          *
 117          * Return:
 118          *  void
 119          *
 120          *******************************************************************************/
 121          static void ClockSetup(void);
 122          static void ClockSetup(void)
 123          {
 124   1              uint8 x32TrHold;
 125   1              uint32 timeout;
 126   1      
 127   1              x32TrHold = CY_GET_REG8((void CYXDATA *)CYREG_X32_TR);
 128   1      
 129   1              /* Configure Digital Clocks based on settings from Clock DWR */
 130   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0000u);
 131   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x50u);
 132   1      
 133   1              /* Configure Analog Clocks based on settings from Clock DWR */
 134   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VA
             -L), 4u);
 135   1      
 136   1              /* Configure ILO based on settings from Clock DWR */
 137   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 138   1      
 139   1              /* Configure XTAL 32kHz based on settings from Clock DWR */
 140   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_X32_TST), 0xF3u);
 141   1              CY_SET_REG8((void CYXDATA *)(CYREG_X32_TR), 0x03u);
 142   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_X32_CFG), 0x84u);
 143   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_X32_CR), 0x05u);
 144   1              /* Wait up to 1000000us for the XTAL 32kHz to lock */
 145   1              for (timeout = 1000000u / 10u; (timeout > 0u) && ((CY_GET_REG8((void CYXDATA *)CYREG_SLOWCLK_X32_CR) & 0x
             -20u) == 0u); timeout--)
 146   1              { 
 147   2                      
 148   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 149   2              }
 150   1              CY_SET_REG8((void CYXDATA *)(CYREG_X32_TR), (x32TrHold));
 151   1      
 152   1              /* Configure IMO based on settings from Clock DWR */
 153   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 154   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 155   1      
 156   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 157   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0000u);
 158   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 159   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 160   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 161   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 162   1      
 163   1              /* Configure USB Clock based on settings from Clock DWR */
 164   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 165   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 166   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DLY1), 0x04u);
 167   1      
 168   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 169   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG1) | 0x01u
             -)));
 170   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG0), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x80u
             -)));
 171   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 4   

 172          
 173          
 174          /* Analog API Functions */
 175          
 176          
 177          /*******************************************************************************
 178          * Function Name: AnalogSetDefault
 179          ********************************************************************************
 180          *
 181          * Summary:
 182          *  Sets up the analog portions of the chip to default values based on chip
 183          *  configuration options from the project.
 184          *
 185          * Parameters:
 186          *  void
 187          *
 188          * Return:
 189          *  void
 190          *
 191          *******************************************************************************/
 192          static void AnalogSetDefault(void);
 193          static void AnalogSetDefault(void)
 194          {
 195   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 196   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 197   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 198   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x50u);
 199   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 200   1      }
 201          
 202          
 203          /*******************************************************************************
 204          * Function Name: SetAnalogRoutingPumps
 205          ********************************************************************************
 206          *
 207          * Summary:
 208          * Enables or disables the analog pumps feeding analog routing switches.
 209          * Intended to be called at startup, based on the Vdda system configuration;
 210          * may be called during operation when the user informs us that the Vdda voltage
 211          * crossed the pump threshold.
 212          *
 213          * Parameters:
 214          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 215          *
 216          * Return:
 217          *  void
 218          *
 219          *******************************************************************************/
 220          void SetAnalogRoutingPumps(uint8 enabled)
 221          {
 222   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 223   1              if (enabled != 0u)
 224   1              {
 225   2                      regValue |= 0x22u;
 226   2              }
 227   1              else
 228   1              {
 229   2                      regValue &= (uint8)~0x22u;
 230   2              }
 231   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 232   1      }
 233          
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 5   

 234          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 235          /* This is an implementation detail of the AMux. Code that depends on it may be
 236             incompatible with other versions of PSoC Creator. */
 237          uint8 CYXDATA * const CYCODE ADC_MUX__addrTable[2] = {
 238                  (uint8 CYXDATA *)CYREG_PRT0_AG, 
 239                  (uint8 CYXDATA *)CYREG_PRT0_AG, 
 240          };
 241          
 242          /* This is an implementation detail of the AMux. Code that depends on it may be
 243             incompatible with other versions of PSoC Creator. */
 244          const uint8 CYCODE ADC_MUX__maskTable[2] = {
 245                  0x01u, 
 246                  0x04u, 
 247          };
 248          
 249          /*******************************************************************************
 250          * Function Name: ADC_MUX_Set
 251          ********************************************************************************
 252          * Summary:
 253          *  This function is used to set a particular channel as active on the AMux.
 254          *
 255          * Parameters:  
 256          *   channel - The mux channel input to set as active
 257          *
 258          * Return:
 259          *   void
 260          *
 261          *******************************************************************************/
 262          void ADC_MUX_Set(uint8 channel)
 263          {
 264   1              if (channel < 2)
 265   1              {
 266   2                      *ADC_MUX__addrTable[channel] |= ADC_MUX__maskTable[channel];
 267   2              }
 268   1      }
 269          
 270          /*******************************************************************************
 271          * Function Name: ADC_MUX_Unset
 272          ********************************************************************************
 273          * Summary:
 274          *  This function is used to clear a particular channel from being active on the
 275          *  AMux.
 276          *
 277          * Parameters:  
 278          *   channel - The mux channel input to mark inactive
 279          *
 280          * Return:
 281          *   void
 282          *
 283          *******************************************************************************/
 284          void ADC_MUX_Unset(uint8 channel)
 285          {
 286   1              if (channel < 2)
 287   1              {
 288   2                      *ADC_MUX__addrTable[channel] &= (uint8)~ADC_MUX__maskTable[channel];
 289   2              }
 290   1      }
 291          
 292          /* This is an implementation detail of the AMux. Code that depends on it may be
 293             incompatible with other versions of PSoC Creator. */
 294          uint8 CYXDATA * const CYCODE ADC_AMux__addrTable[2] = {
 295                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 6   

 296                  (uint8 CYXDATA *)CY_AMUX_UNUSED, 
 297          };
 298          
 299          /* This is an implementation detail of the AMux. Code that depends on it may be
 300             incompatible with other versions of PSoC Creator. */
 301          const uint8 CYCODE ADC_AMux__maskTable[2] = {
 302                  0x40u, 
 303                  0x00u, 
 304          };
 305          
 306          /*******************************************************************************
 307          * Function Name: ADC_AMux_Set
 308          ********************************************************************************
 309          * Summary:
 310          *  This function is used to set a particular channel as active on the AMux.
 311          *
 312          * Parameters:  
 313          *   channel - The mux channel input to set as active
 314          *
 315          * Return:
 316          *   void
 317          *
 318          *******************************************************************************/
 319          void ADC_AMux_Set(uint8 channel)
 320          {
 321   1              if (channel < 2)
 322   1              {
 323   2                      *ADC_AMux__addrTable[channel] |= ADC_AMux__maskTable[channel];
 324   2              }
 325   1      }
 326          
 327          /*******************************************************************************
 328          * Function Name: ADC_AMux_Unset
 329          ********************************************************************************
 330          * Summary:
 331          *  This function is used to clear a particular channel from being active on the
 332          *  AMux.
 333          *
 334          * Parameters:  
 335          *   channel - The mux channel input to mark inactive
 336          *
 337          * Return:
 338          *   void
 339          *
 340          *******************************************************************************/
 341          void ADC_AMux_Unset(uint8 channel)
 342          {
 343   1              if (channel < 2)
 344   1              {
 345   2                      *ADC_AMux__addrTable[channel] &= (uint8)~ADC_AMux__maskTable[channel];
 346   2              }
 347   1      }
 348          
 349          
 350          
 351          /*******************************************************************************
 352          * Function Name: cyfitter_cfg
 353          ********************************************************************************
 354          * Summary:
 355          *  This function is called by the start-up code for the selected device. It
 356          *  performs all of the necessary device configuration based on the design
 357          *  settings.  This includes settings from the Design Wide Resources (DWR) such
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 7   

 358          *  as Clocks and Pins as well as any component configuration that is necessary.
 359          *
 360          * Parameters:  
 361          *   void
 362          *
 363          * Return:
 364          *   void
 365          *
 366          *******************************************************************************/
 367          
 368          void cyfitter_cfg(void)
 369          {
 370   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 371   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x01u));
 372   1      
 373   1              {
 374   2      
 375   2                      CYPACKED typedef struct {
 376   2                              void CYFAR *address;
 377   2                              uint16 size;
 378   2                      } CYPACKED_ATTR cfg_memset_t;
 379   2      
 380   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 381   2                              /* address, size */
 382   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 383   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 384   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 385   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 386   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 387   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 388   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 389   2                      };
 390   2      
 391   2                      uint8 CYDATA i;
 392   2      
 393   2                      /* Zero out critical memory blocks before beginning configuration */
 394   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 395   2                      {
 396   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 397   3                              CYMEMZERO(ms->address, ms->size);
 398   3                      }
 399   2      
 400   2                      cfg_write_bytes(cfg_byte_table);
 401   2      
 402   2                      /* Perform normal device configuration. Order is not critical for these items. */
 403   2                      CY_SET_REG8((void CYXDATA *)(CYREG_DSM0_CR3), 0x0Au);
 404   2      
 405   2                      /* Enable digital routing */
 406   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 407   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 408   2      
 409   2                      /* Enable UDB array */
 410   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 411   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 412   2              }
 413   1      
 414   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 8   

 415   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DR), (const void CYFAR *)(BS_IOPINS0_0_VAL), 10u);
 416   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT15_DR), (const void CYFAR *)(BS_IOPINS0_8_VAL), 10u);
 417   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DR), (const void CYFAR *)(BS_IOPINS0_1_VAL), 10u);
 418   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DR), (const void CYFAR *)(BS_IOPINS0_2_VAL), 10u);
 419   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 420   1      
 421   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 422   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 423   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 424   1              {
 425   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 426   2              }
 427   1      
 428   1      
 429   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 430   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 431   1              /* Setup clocks based on selections from Clock DWR */
 432   1              ClockSetup();
 433   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 434   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 435   1      
 436   1              /* Perform basic analog initialization to defaults */
 437   1              AnalogSetDefault();
 438   1      
 439   1              /* Configure alternate active mode */
 440   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 441   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 442   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 127
0000 904698            MOV     DPTR,#04698H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#x32TrHold
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
000A 7B00              MOV     R3,#00H
000C 7A40              MOV     R2,#040H
000E 7980              MOV     R1,#080H
0010 7D00              MOV     R5,#00H
0012 7C00              MOV     R4,#00H
0014 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 131
0017 904082            MOV     DPTR,#04082H
001A 7450              MOV     A,#050H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
001D 7B08              MOV     R3,#08H
001F 7A02              MOV     R2,#02H
0021 7948              MOV     R1,#048H
0023 C003              PUSH    AR3
0025 C002              PUSH    AR2
0027 C001              PUSH    AR1
0029 7B00              MOV     R3,#00H
002B 7A41              MOV     R2,#041H
002D 7900              MOV     R1,#00H
002F 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0032 120000      E     LCALL   ?C?PSTXDATA
0035 D001              POP     AR1
0037 D002              POP     AR2
0039 D003              POP     AR3
003B 7F04              MOV     R7,#04H
003D 7E00              MOV     R6,#00H
003F 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 137
0042 904300            MOV     DPTR,#04300H
0045 7406              MOV     A,#06H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0048 90430A            MOV     DPTR,#0430AH
004B 74F3              MOV     A,#0F3H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
004E 904698            MOV     DPTR,#04698H
0051 7403              MOV     A,#03H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
0054 904309            MOV     DPTR,#04309H
0057 7484              MOV     A,#084H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
005A 904308            MOV     DPTR,#04308H
005D 7405              MOV     A,#05H
005F F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 10  

                                           ; SOURCE LINE # 145
0060 7FA0              MOV     R7,#0A0H
0062 7E86              MOV     R6,#086H
0064 7D01              MOV     R5,#01H
0066 7C00              MOV     R4,#00H
0068 900000      R     MOV     DPTR,#timeout
006B 120000      E     LCALL   ?C?LSTXDATA
006E         ?C0001:
006E 900000      R     MOV     DPTR,#timeout
0071 120000      E     LCALL   ?C?LLDXDATA
0074 D3                SETB    C
0075 EF                MOV     A,R7
0076 9400              SUBB    A,#00H
0078 EE                MOV     A,R6
0079 9400              SUBB    A,#00H
007B 4033              JC      ?C0002
007D 904308            MOV     DPTR,#04308H
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 EF                MOV     A,R7
0083 5420              ANL     A,#020H
0085 FF                MOV     R7,A
0086 7E00              MOV     R6,#00H
0088 EF                MOV     A,R7
0089 4E                ORL     A,R6
008A 7024              JNZ     ?C0002
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 148
008C 7FE0              MOV     R7,#0E0H
008E 7E01              MOV     R6,#01H
0090 7D00              MOV     R5,#00H
0092 7C00              MOV     R4,#00H
0094 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 149
0097         ?C0003:
0097 900000      R     MOV     DPTR,#timeout
009A 120000      E     LCALL   ?C?LLDXDATA
009D 7BFF              MOV     R3,#0FFH
009F 7AFF              MOV     R2,#0FFH
00A1 79FF              MOV     R1,#0FFH
00A3 78FF              MOV     R0,#0FFH
00A5 120000      E     LCALL   ?C?LADD
00A8 900000      R     MOV     DPTR,#timeout
00AB 120000      E     LCALL   ?C?LSTXDATA
00AE 80BE              SJMP    ?C0001
00B0         ?C0002:
                                           ; SOURCE LINE # 150
00B0 900000      R     MOV     DPTR,#x32TrHold
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
00B5 904698            MOV     DPTR,#04698H
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
00BA 904200            MOV     DPTR,#04200H
00BD 7452              MOV     A,#052H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
00C0 7B0C              MOV     R3,#0CH
00C2 7A01              MOV     R2,#01H
00C4 790F              MOV     R1,#0FH
00C6 120000      E     LCALL   _cyread8
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 11  

00C9 9046A1            MOV     DPTR,#046A1H
00CC EF                MOV     A,R7
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
00CE 7B00              MOV     R3,#00H
00D0 7A40              MOV     R2,#040H
00D2 7904              MOV     R1,#04H
00D4 7D00              MOV     R5,#00H
00D6 7C00              MOV     R4,#00H
00D8 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 158
00DB 904004            MOV     DPTR,#04004H
00DE 7407              MOV     A,#07H
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
00E1 904006            MOV     DPTR,#04006H
00E4 E4                CLR     A
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
00E6 904008            MOV     DPTR,#04008H
00E9 7448              MOV     A,#048H
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
00EC 904004            MOV     DPTR,#04004H
00EF E4                CLR     A
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
00F1 904009            MOV     DPTR,#04009H
00F4 E4                CLR     A
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
00F6 904001            MOV     DPTR,#04001H
00F9 7402              MOV     A,#02H
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
00FC 90400B            MOV     DPTR,#0400BH
00FF 7404              MOV     A,#04H
0101 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0102 9043A2            MOV     DPTR,#043A2H
0105 E0                MOVX    A,@DPTR
0106 FF                MOV     R7,A
0107 EF                MOV     A,R7
0108 4401              ORL     A,#01H
010A FF                MOV     R7,A
010B 9043A2            MOV     DPTR,#043A2H
010E EF                MOV     A,R7
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0110 9043A1            MOV     DPTR,#043A1H
0113 E0                MOVX    A,@DPTR
0114 FF                MOV     R7,A
0115 EF                MOV     A,R7
0116 4401              ORL     A,#01H
0118 FF                MOV     R7,A
0119 9043A1            MOV     DPTR,#043A1H
011C EF                MOV     A,R7
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
011E 9043A0            MOV     DPTR,#043A0H
0121 E0                MOVX    A,@DPTR
0122 FF                MOV     R7,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 12  

0123 EF                MOV     A,R7
0124 4480              ORL     A,#080H
0126 FF                MOV     R7,A
0127 9043A0            MOV     DPTR,#043A0H
012A EF                MOV     A,R7
012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
012C         ?C0004:
012C 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
002F 905B00            MOV     DPTR,#05B00H
0032 7450              MOV     A,#050H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0035 905876            MOV     DPTR,#05876H
0038 7444              MOV     A,#044H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
003B         ?C0005:
003B 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 220
0000 900000      R     MOV     DPTR,#enabled
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 13  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0006
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4422              ORL     A,#022H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0025 800E              SJMP    ?C0007
0027         ?C0006:
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54DD              ANL     A,#0DDH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
0035         ?C0007:
                                           ; SOURCE LINE # 231
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
003F         ?C0008:
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION _ADC_MUX_Set (BEGIN)
                                           ; SOURCE LINE # 262
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 14  

0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5036              JNC     ?C0010
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_MUX__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_MUX__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_MUX__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EF                MOV     A,R7
003E 4E                ORL     A,R6
003F FF                MOV     R7,A
0040 D082              POP     DPL
0042 D083              POP     DPH
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
0046         ?C0009:
                                           ; SOURCE LINE # 268
0046         ?C0010:
0046 22                RET     
             ; FUNCTION _ADC_MUX_Set (END)

             ; FUNCTION _ADC_MUX_Unset (BEGIN)
                                           ; SOURCE LINE # 284
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 15  

000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5039              JNC     ?C0012
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_MUX__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_MUX__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_MUX__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EE                MOV     A,R6
003E F4                CPL     A
003F FE                MOV     R6,A
0040 EF                MOV     A,R7
0041 5E                ANL     A,R6
0042 FF                MOV     R7,A
0043 D082              POP     DPL
0045 D083              POP     DPH
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0049         ?C0011:
                                           ; SOURCE LINE # 290
0049         ?C0012:
0049 22                RET     
             ; FUNCTION _ADC_MUX_Unset (END)

             ; FUNCTION _ADC_AMux_Set (BEGIN)
                                           ; SOURCE LINE # 319
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 16  

000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5036              JNC     ?C0014
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_AMux__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_AMux__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EF                MOV     A,R7
003E 4E                ORL     A,R6
003F FF                MOV     R7,A
0040 D082              POP     DPL
0042 D083              POP     DPH
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0046         ?C0013:
                                           ; SOURCE LINE # 325
0046         ?C0014:
0046 22                RET     
             ; FUNCTION _ADC_AMux_Set (END)

             ; FUNCTION _ADC_AMux_Unset (BEGIN)
                                           ; SOURCE LINE # 341
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 17  

000E 5039              JNC     ?C0016
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_AMux__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_AMux__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_AMux__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EE                MOV     A,R6
003E F4                CPL     A
003F FE                MOV     R6,A
0040 EF                MOV     A,R7
0041 5E                ANL     A,R6
0042 FF                MOV     R7,A
0043 D082              POP     DPL
0045 D083              POP     DPH
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
0049         ?C0015:
                                           ; SOURCE LINE # 347
0049         ?C0016:
0049 22                RET     
             ; FUNCTION _ADC_AMux_Unset (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 371
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4401              ORL     A,#01H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 18  

0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 394
0016 750000      R     MOV     i,#00H
0019         ?C0017:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 9407              SUBB    A,#07H
001E 503A              JNC     ?C0018
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
0020 AF00        R     MOV     R7,i
0022 EF                MOV     A,R7
0023 75F005            MOV     B,#05H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW cfg_memset_list
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH cfg_memset_list
002E F583              MOV     DPH,A
0030 AF82              MOV     R7,DPL
0032 AE83              MOV     R6,DPH
0034 8E00        R     MOV     ms,R6
0036 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 397
0038 AE00        R     MOV     R6,ms
003A AF00        R     MOV     R7,ms+01H
003C 8F82              MOV     DPL,R7
003E 8E83              MOV     DPH,R6
0040 120000      E     LCALL   ?C?PLDCODE
0043 AE00        R     MOV     R6,ms
0045 AF00        R     MOV     R7,ms+01H
0047 8F82              MOV     DPL,R7
0049 8E83              MOV     DPH,R6
004B 7403              MOV     A,#03H
004D 93                MOVC    A,@A+DPTR
004E FC                MOV     R4,A
004F 7404              MOV     A,#04H
0051 93                MOVC    A,@A+DPTR
0052 FD                MOV     R5,A
0053 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 398
0056         ?C0019:
0056 0500        R     INC     i
0058 80BF              SJMP    ?C0017
005A         ?C0018:
                                           ; SOURCE LINE # 400
005A 7B08              MOV     R3,#08H
005C 7A00              MOV     R2,#00H
005E 7900              MOV     R1,#00H
0060 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 403
0063 905883            MOV     DPTR,#05883H
0066 740A              MOV     A,#0AH
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
0069 7B01              MOV     R3,#01H
006B 7A50              MOV     R2,#050H
006D 7903              MOV     R1,#03H
006F 120000      E     LCALL   _cyread8
0072 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 19  

0073 4402              ORL     A,#02H
0075 FD                MOV     R5,A
0076 7B01              MOV     R3,#01H
0078 7A50              MOV     R2,#050H
007A 7903              MOV     R1,#03H
007C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 407
007F 7B01              MOV     R3,#01H
0081 7A50              MOV     R2,#050H
0083 7913              MOV     R1,#013H
0085 120000      E     LCALL   _cyread8
0088 EF                MOV     A,R7
0089 4402              ORL     A,#02H
008B FD                MOV     R5,A
008C 7B01              MOV     R3,#01H
008E 7A50              MOV     R2,#050H
0090 7913              MOV     R1,#013H
0092 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 410
0095 9043A0            MOV     DPTR,#043A0H
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A EF                MOV     A,R7
009B 4440              ORL     A,#040H
009D FF                MOV     R7,A
009E 9043A0            MOV     DPTR,#043A0H
00A1 EF                MOV     A,R7
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
00A3 9043C2            MOV     DPTR,#043C2H
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 EF                MOV     A,R7
00A9 4410              ORL     A,#010H
00AB FF                MOV     R7,A
00AC 9043C2            MOV     DPTR,#043C2H
00AF EF                MOV     A,R7
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 415
00B1 7B08              MOV     R3,#08H
00B3 7A02              MOV     R2,#02H
00B5 7918              MOV     R1,#018H
00B7 C003              PUSH    AR3
00B9 C002              PUSH    AR2
00BB C001              PUSH    AR1
00BD 7B00              MOV     R3,#00H
00BF 7A51              MOV     R2,#051H
00C1 7900              MOV     R1,#00H
00C3 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C6 120000      E     LCALL   ?C?PSTXDATA
00C9 D001              POP     AR1
00CB D002              POP     AR2
00CD D003              POP     AR3
00CF 7F0A              MOV     R7,#0AH
00D1 7E00              MOV     R6,#00H
00D3 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 416
00D6 7B08              MOV     R3,#08H
00D8 7A02              MOV     R2,#02H
00DA 7924              MOV     R1,#024H
00DC C003              PUSH    AR3
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 20  

00DE C002              PUSH    AR2
00E0 C001              PUSH    AR1
00E2 7B00              MOV     R3,#00H
00E4 7A51              MOV     R2,#051H
00E6 79F0              MOV     R1,#0F0H
00E8 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00EB 120000      E     LCALL   ?C?PSTXDATA
00EE D001              POP     AR1
00F0 D002              POP     AR2
00F2 D003              POP     AR3
00F4 7F0A              MOV     R7,#0AH
00F6 7E00              MOV     R6,#00H
00F8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 417
00FB 7B08              MOV     R3,#08H
00FD 7A02              MOV     R2,#02H
00FF 7930              MOV     R1,#030H
0101 C003              PUSH    AR3
0103 C002              PUSH    AR2
0105 C001              PUSH    AR1
0107 7B00              MOV     R3,#00H
0109 7A51              MOV     R2,#051H
010B 7910              MOV     R1,#010H
010D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0110 120000      E     LCALL   ?C?PSTXDATA
0113 D001              POP     AR1
0115 D002              POP     AR2
0117 D003              POP     AR3
0119 7F0A              MOV     R7,#0AH
011B 7E00              MOV     R6,#00H
011D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 418
0120 7B08              MOV     R3,#08H
0122 7A02              MOV     R2,#02H
0124 793C              MOV     R1,#03CH
0126 C003              PUSH    AR3
0128 C002              PUSH    AR2
012A C001              PUSH    AR1
012C 7B00              MOV     R3,#00H
012E 7A51              MOV     R2,#051H
0130 7920              MOV     R1,#020H
0132 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0135 120000      E     LCALL   ?C?PSTXDATA
0138 D001              POP     AR1
013A D002              POP     AR2
013C D003              POP     AR3
013E 7F0A              MOV     R7,#0AH
0140 7E00              MOV     R6,#00H
0142 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 419
0145 9044F4            MOV     DPTR,#044F4H
0148 7401              MOV     A,#01H
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
014B 904322            MOV     DPTR,#04322H
014E E0                MOVX    A,@DPTR
014F FF                MOV     R7,A
0150 EF                MOV     A,R7
0151 4408              ORL     A,#08H
0153 FF                MOV     R7,A
0154 904322            MOV     DPTR,#04322H
0157 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 21  

0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
0159 9046EC            MOV     DPTR,#046ECH
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E EF                MOV     A,R7
015F C3                CLR     C
0160 9405              SUBB    A,#05H
0162 5006              JNC     ?C0020
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
0164 904689            MOV     DPTR,#04689H
0167 743A              MOV     A,#03AH
0169 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
016A         ?C0020:
                                           ; SOURCE LINE # 430
016A 904800            MOV     DPTR,#04800H
016D 74F1              MOV     A,#0F1H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
0170 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 434
0173 904800            MOV     DPTR,#04800H
0176 74B1              MOV     A,#0B1H
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
0179 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 440
017C 7B00              MOV     R3,#00H
017E 7A43              MOV     R2,#043H
0180 79A0              MOV     R1,#0A0H
0182 C003              PUSH    AR3
0184 C002              PUSH    AR2
0186 C001              PUSH    AR1
0188 7B00              MOV     R3,#00H
018A 7A43              MOV     R2,#043H
018C 79B0              MOV     R1,#0B0H
018E 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0191 120000      E     LCALL   ?C?PSTXDATA
0194 D001              POP     AR1
0196 D002              POP     AR2
0198 D003              POP     AR3
019A 7F0E              MOV     R7,#0EH
019C 7E00              MOV     R6,#00H
019E 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 441
01A1 9043B0            MOV     DPTR,#043B0H
01A4 E0                MOVX    A,@DPTR
01A5 FF                MOV     R7,A
01A6 EF                MOV     A,R7
01A7 54FD              ANL     A,#0FDH
01A9 FF                MOV     R7,A
01AA EF                MOV     A,R7
01AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
01AC         ?C0021:
01AC 22                RET     
             ; FUNCTION cyfitter_cfg (END)



C51 COMPILER V9.51   CYFITTER_CFG                                                          05/30/2014 15:03:35 PAGE 22  

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1144    ----
   CONSTANT SIZE    =     47    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
