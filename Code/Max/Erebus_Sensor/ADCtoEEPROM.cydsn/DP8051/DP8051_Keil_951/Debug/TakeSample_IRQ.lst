C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TAKESAMPLE_IRQ
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\TakeSample_IRQ.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\TakeSample_IRQ.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\TakeSample_IRQ.
                    -lst) CD DB NOIP OT(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\TakeSample_IRQ
                    -.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: TakeSample_IRQ.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include <cydevice_trm.h>
  19          #include <CyLib.h>
  20          #include <TakeSample_IRQ.h>
  21          
  22          #if !defined(TakeSample_IRQ__REMOVED) /* Check for removal by optimization */
  23          
  24          /*******************************************************************************
  25          *  Place your includes, defines and code here 
  26          ********************************************************************************/
  27          /* `#START TakeSample_IRQ_intc` */
  28          #include <project.h>
  29          #include <main.h>
  30          /* `#END` */
  31          
  32          
  33          /*******************************************************************************
  34          * Function Name: TakeSample_IRQ_Start
  35          ********************************************************************************
  36          *
  37          * Summary:
  38          *  Set up the interrupt and enable it.
  39          *
  40          * Parameters:  
  41          *   None
  42          *
  43          * Return:
  44          *   None
  45          *
  46          *******************************************************************************/
  47          void TakeSample_IRQ_Start(void) 
  48          {
  49   1          /* For all we know the interrupt is active. */
  50   1          TakeSample_IRQ_Disable();
  51   1      
  52   1          /* Set the ISR to point to the TakeSample_IRQ Interrupt. */
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 2   

  53   1          TakeSample_IRQ_SetVector(&TakeSample_IRQ_Interrupt);
  54   1      
  55   1          /* Set the priority. */
  56   1          TakeSample_IRQ_SetPriority((uint8)TakeSample_IRQ_INTC_PRIOR_NUMBER);
  57   1      
  58   1          /* Enable it. */
  59   1          TakeSample_IRQ_Enable();
  60   1      }
  61          
  62          
  63          /*******************************************************************************
  64          * Function Name: TakeSample_IRQ_StartEx
  65          ********************************************************************************
  66          *
  67          * Summary:
  68          *  Set up the interrupt and enable it.
  69          *
  70          * Parameters:  
  71          *   address: Address of the ISR to set in the interrupt vector table.
  72          *
  73          * Return:
  74          *   None
  75          *
  76          *******************************************************************************/
  77          void TakeSample_IRQ_StartEx(cyisraddress address) 
  78          {
  79   1          /* For all we know the interrupt is active. */
  80   1          TakeSample_IRQ_Disable();
  81   1      
  82   1          /* Set the ISR to point to the TakeSample_IRQ Interrupt. */
  83   1          TakeSample_IRQ_SetVector(address);
  84   1      
  85   1          /* Set the priority. */
  86   1          TakeSample_IRQ_SetPriority((uint8)TakeSample_IRQ_INTC_PRIOR_NUMBER);
  87   1      
  88   1          /* Enable it. */
  89   1          TakeSample_IRQ_Enable();
  90   1      }
  91          
  92          
  93          /*******************************************************************************
  94          * Function Name: TakeSample_IRQ_Stop
  95          ********************************************************************************
  96          *
  97          * Summary:
  98          *   Disables and removes the interrupt.
  99          *
 100          * Parameters:  
 101          *   None
 102          *
 103          * Return:
 104          *   None
 105          *
 106          *******************************************************************************/
 107          void TakeSample_IRQ_Stop(void) 
 108          {
 109   1          /* Disable this interrupt. */
 110   1          TakeSample_IRQ_Disable();
 111   1      }
 112          
 113          
 114          /*******************************************************************************
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 3   

 115          * Function Name: TakeSample_IRQ_Interrupt
 116          ********************************************************************************
 117          * Summary:
 118          *   The default Interrupt Service Routine for TakeSample_IRQ.
 119          *
 120          *   Add custom code between the coments to keep the next version of this file
 121          *   from over writting your code.
 122          *
 123          * Parameters:  
 124          *   None
 125          *
 126          * Return:
 127          *   None
 128          *
 129          *******************************************************************************/
 130          CY_ISR(TakeSample_IRQ_Interrupt)
 131          {
 132   1          /*  Place your Interrupt code here. */
 133   1          /* `#START TakeSample_IRQ_Interrupt` */
 134   1          
 135   1          uint16 SampledData=0; 
 136   1          
 137   1          /* ADC */
 138   1          SampledData = ADC_Read16(); /* Function Starts, Converts, Stops, and Returns from ADC */
 139   1          if (SampledData & 0x8000)
 140   1              {
 141   2              SampledData = 0;        /* Ignore negative ADC results */
 142   2              }
 143   1              else if (SampledData >= 0xfff)
 144   1              {
 145   2              SampledData = 0xfff;    /* Ignore high ADC results */
 146   2          }
 147   1          
 148   1          
 149   1          /* EEP */
 150   1          Em_EEPROM_Write(&SampledData,TailPtr,2u);
*** WARNING C182 IN LINE 150 OF .\Generated_Source\PSoC3\TakeSample_IRQ.c: pointer to different objects
 151   1          
 152   1          TailPtr = TailPtr + 2; 
 153   1          
 154   1          /* `#END` */
 155   1      
 156   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 157   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 158   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (TakeSample_IRQ__ES2_PATCH ))     
             - 
                          TakeSample_IRQ_ISR_PATCH();
                      #endif /* CYDEV_CHIP_REVISION_USED */
 161   1          #endif /* (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3) */
 162   1      }
 163          
 164          
 165          /*******************************************************************************
 166          * Function Name: TakeSample_IRQ_SetVector
 167          ********************************************************************************
 168          *
 169          * Summary:
 170          *   Change the ISR vector for the Interrupt. Note calling TakeSample_IRQ_Start
 171          *   will override any effect this method would have had. To set the vector 
 172          *   before the component has been started use TakeSample_IRQ_StartEx instead.
 173          *
 174          * Parameters:
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 4   

 175          *   address: Address of the ISR to set in the interrupt vector table.
 176          *
 177          * Return:
 178          *   None
 179          *
 180          *******************************************************************************/
 181          void TakeSample_IRQ_SetVector(cyisraddress address) 
 182          {
 183   1          CY_SET_REG16(TakeSample_IRQ_INTC_VECTOR, (uint16) address);
 184   1      }
 185          
 186          
 187          /*******************************************************************************
 188          * Function Name: TakeSample_IRQ_GetVector
 189          ********************************************************************************
 190          *
 191          * Summary:
 192          *   Gets the "address" of the current ISR vector for the Interrupt.
 193          *
 194          * Parameters:
 195          *   None
 196          *
 197          * Return:
 198          *   Address of the ISR in the interrupt vector table.
 199          *
 200          *******************************************************************************/
 201          cyisraddress TakeSample_IRQ_GetVector(void) 
 202          {
 203   1          return (cyisraddress) CY_GET_REG16(TakeSample_IRQ_INTC_VECTOR);
 204   1      }
 205          
 206          
 207          /*******************************************************************************
 208          * Function Name: TakeSample_IRQ_SetPriority
 209          ********************************************************************************
 210          *
 211          * Summary:
 212          *   Sets the Priority of the Interrupt. Note calling TakeSample_IRQ_Start
 213          *   or TakeSample_IRQ_StartEx will override any effect this method would 
 214          *   have had. This method should only be called after TakeSample_IRQ_Start or 
 215          *   TakeSample_IRQ_StartEx has been called. To set the initial
 216          *   priority for the component use the cydwr file in the tool.
 217          *
 218          * Parameters:
 219          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
 220          *
 221          * Return:
 222          *   None
 223          *
 224          *******************************************************************************/
 225          void TakeSample_IRQ_SetPriority(uint8 priority) 
 226          {
 227   1          *TakeSample_IRQ_INTC_PRIOR = priority << 5;
 228   1      }
 229          
 230          
 231          /*******************************************************************************
 232          * Function Name: TakeSample_IRQ_GetPriority
 233          ********************************************************************************
 234          *
 235          * Summary:
 236          *   Gets the Priority of the Interrupt.
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 5   

 237          *
 238          * Parameters:
 239          *   None
 240          *
 241          * Return:
 242          *   Priority of the interrupt. 0 - 7, 0 being the highest.
 243          *
 244          *******************************************************************************/
 245          uint8 TakeSample_IRQ_GetPriority(void) 
 246          {
 247   1          uint8 priority;
 248   1      
 249   1      
 250   1          priority = *TakeSample_IRQ_INTC_PRIOR >> 5;
 251   1      
 252   1          return priority;
 253   1      }
 254          
 255          
 256          /*******************************************************************************
 257          * Function Name: TakeSample_IRQ_Enable
 258          ********************************************************************************
 259          *
 260          * Summary:
 261          *   Enables the interrupt.
 262          *
 263          * Parameters:
 264          *   None
 265          *
 266          * Return:
 267          *   None
 268          *
 269          *******************************************************************************/
 270          void TakeSample_IRQ_Enable(void) 
 271          {
 272   1          /* Enable the general interrupt. */
 273   1          *TakeSample_IRQ_INTC_SET_EN = TakeSample_IRQ__INTC_MASK;
 274   1      }
 275          
 276          
 277          /*******************************************************************************
 278          * Function Name: TakeSample_IRQ_GetState
 279          ********************************************************************************
 280          *
 281          * Summary:
 282          *   Gets the state (enabled, disabled) of the Interrupt.
 283          *
 284          * Parameters:
 285          *   None
 286          *
 287          * Return:
 288          *   1 if enabled, 0 if disabled.
 289          *
 290          *******************************************************************************/
 291          uint8 TakeSample_IRQ_GetState(void) 
 292          {
 293   1          /* Get the state of the general interrupt. */
 294   1          return ((*TakeSample_IRQ_INTC_SET_EN & (uint8)TakeSample_IRQ__INTC_MASK) != 0u) ? 1u:0u;
 295   1      }
 296          
 297          
 298          /*******************************************************************************
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 6   

 299          * Function Name: TakeSample_IRQ_Disable
 300          ********************************************************************************
 301          *
 302          * Summary:
 303          *   Disables the Interrupt.
 304          *
 305          * Parameters:
 306          *   None
 307          *
 308          * Return:
 309          *   None
 310          *
 311          *******************************************************************************/
 312          void TakeSample_IRQ_Disable(void) 
 313          {
 314   1          /* Disable the general interrupt. */
 315   1          *TakeSample_IRQ_INTC_CLR_EN = TakeSample_IRQ__INTC_MASK;
 316   1      }
 317          
 318          
 319          /*******************************************************************************
 320          * Function Name: TakeSample_IRQ_SetPending
 321          ********************************************************************************
 322          *
 323          * Summary:
 324          *   Causes the Interrupt to enter the pending state, a software method of
 325          *   generating the interrupt.
 326          *
 327          * Parameters:
 328          *   None
 329          *
 330          * Return:
 331          *   None
 332          *
 333          *******************************************************************************/
 334          void TakeSample_IRQ_SetPending(void) 
 335          {
 336   1          *TakeSample_IRQ_INTC_SET_PD = TakeSample_IRQ__INTC_MASK;
 337   1      }
 338          
 339          
 340          /*******************************************************************************
 341          * Function Name: TakeSample_IRQ_ClearPending
 342          ********************************************************************************
 343          *
 344          * Summary:
 345          *   Clears a pending interrupt.
 346          *
 347          * Parameters:
 348          *   None
 349          *
 350          * Return:
 351          *   None
 352          *
 353          *******************************************************************************/
 354          void TakeSample_IRQ_ClearPending(void) 
 355          {
 356   1          *TakeSample_IRQ_INTC_CLR_PD = TakeSample_IRQ__INTC_MASK;
 357   1      }
 358          
 359          #endif /* End check for removal by optimization */
 360          
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 7   

 361          
 362          /* [] END OF FILE */
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION TakeSample_IRQ_Start (BEGIN)
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 50
0000 120000      R     LCALL   TakeSample_IRQ_Disable
                                           ; SOURCE LINE # 53
0003 7E00        R     MOV     R6,#HIGH TakeSample_IRQ_Interrupt
0005 7F00        R     MOV     R7,#LOW TakeSample_IRQ_Interrupt
0007 120000      R     LCALL   _TakeSample_IRQ_SetVector
                                           ; SOURCE LINE # 56
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _TakeSample_IRQ_SetPriority
                                           ; SOURCE LINE # 59
000F 120000      R     LCALL   TakeSample_IRQ_Enable
                                           ; SOURCE LINE # 60
0012 22                RET     
             ; FUNCTION TakeSample_IRQ_Start (END)

             ; FUNCTION _TakeSample_IRQ_StartEx (BEGIN)
                                           ; SOURCE LINE # 77
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 80
0008 120000      R     LCALL   TakeSample_IRQ_Disable
                                           ; SOURCE LINE # 83
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _TakeSample_IRQ_SetVector
                                           ; SOURCE LINE # 86
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _TakeSample_IRQ_SetPriority
                                           ; SOURCE LINE # 89
001B 120000      R     LCALL   TakeSample_IRQ_Enable
                                           ; SOURCE LINE # 90
001E 22                RET     
             ; FUNCTION _TakeSample_IRQ_StartEx (END)

             ; FUNCTION TakeSample_IRQ_Stop (BEGIN)
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 110
0000 120000      R     LCALL   TakeSample_IRQ_Disable
                                           ; SOURCE LINE # 111
0003 22                RET     
             ; FUNCTION TakeSample_IRQ_Stop (END)

             ; FUNCTION TakeSample_IRQ_Interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 9   

0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 135
002B 900000      R     MOV     DPTR,#SampledData
002E E4                CLR     A
002F F0                MOVX    @DPTR,A
0030 A3                INC     DPTR
0031 E4                CLR     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0033 120000      E     LCALL   ADC_Read16
0036 900000      R     MOV     DPTR,#SampledData
0039 EE                MOV     A,R6
003A F0                MOVX    @DPTR,A
003B A3                INC     DPTR
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
003E 900000      R     MOV     DPTR,#SampledData
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EE                MOV     A,R6
0047 30E70A            JNB     ACC.7,?C0004
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
004A 900000      R     MOV     DPTR,#SampledData
004D E4                CLR     A
004E F0                MOVX    @DPTR,A
004F A3                INC     DPTR
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
0052 801B              SJMP    ?C0005
0054         ?C0004:
                                           ; SOURCE LINE # 143
0054 900000      R     MOV     DPTR,#SampledData
0057 E0                MOVX    A,@DPTR
0058 FE                MOV     R6,A
0059 A3                INC     DPTR
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C C3                CLR     C
005D EF                MOV     A,R7
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 10  

005E 94FF              SUBB    A,#0FFH
0060 EE                MOV     A,R6
0061 940F              SUBB    A,#0FH
0063 400A              JC      ?C0005
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
0065 900000      R     MOV     DPTR,#SampledData
0068 740F              MOV     A,#0FH
006A F0                MOVX    @DPTR,A
006B A3                INC     DPTR
006C 74FF              MOV     A,#0FFH
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
006F         ?C0005:
                                           ; SOURCE LINE # 150
006F 7B01              MOV     R3,#01H
0071 7A00        R     MOV     R2,#HIGH SampledData
0073 7900        R     MOV     R1,#LOW SampledData
0075 C003              PUSH    AR3
0077 C002              PUSH    AR2
0079 C001              PUSH    AR1
007B 900000      E     MOV     DPTR,#TailPtr
007E 120000      E     LCALL   ?C?PLDXDATA
0081 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+03H
0084 120000      E     LCALL   ?C?PSTXDATA
0087 900000      E     MOV     DPTR,#?_Em_EEPROM_Write?BYTE+06H
008A E4                CLR     A
008B F0                MOVX    @DPTR,A
008C A3                INC     DPTR
008D 7402              MOV     A,#02H
008F F0                MOVX    @DPTR,A
0090 D001              POP     AR1
0092 D002              POP     AR2
0094 D003              POP     AR3
0096 120000      E     LCALL   _Em_EEPROM_Write
                                           ; SOURCE LINE # 152
0099 900000      E     MOV     DPTR,#TailPtr+01H
009C E4                CLR     A
009D 75F002            MOV     B,#02H
00A0 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 162
00A3 D007              POP     AR7
00A5 D006              POP     AR6
00A7 D005              POP     AR5
00A9 D004              POP     AR4
00AB D003              POP     AR3
00AD D002              POP     AR2
00AF D001              POP     AR1
00B1 D000              POP     AR0
00B3 D0D0              POP     PSW
00B5 D000        E     POP     ?C?XPAGE1SFR
00B7 D086              POP     DPS
00B9 D084              POP     DPL1
00BB D085              POP     DPH1
00BD D082              POP     DPL
00BF D083              POP     DPH
00C1 D0F0              POP     B
00C3 D0E0              POP     ACC
00C5 32                RETI    
             ; FUNCTION TakeSample_IRQ_Interrupt (END)

             ; FUNCTION _TakeSample_IRQ_SetVector (BEGIN)
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 11  

                                           ; SOURCE LINE # 181
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7900              MOV     R1,#00H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 184
001D 22                RET     
             ; FUNCTION _TakeSample_IRQ_SetVector (END)

             ; FUNCTION TakeSample_IRQ_GetVector (BEGIN)
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7900              MOV     R1,#00H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 204
0009         ?C0009:
0009 22                RET     
             ; FUNCTION TakeSample_IRQ_GetVector (END)

             ; FUNCTION _TakeSample_IRQ_SetPriority (BEGIN)
                                           ; SOURCE LINE # 225
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904480            MOV     DPTR,#04480H
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
0015 22                RET     
             ; FUNCTION _TakeSample_IRQ_SetPriority (END)

             ; FUNCTION TakeSample_IRQ_GetPriority (BEGIN)
                                           ; SOURCE LINE # 245
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 12  

                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 250
0000 904480            MOV     DPTR,#04480H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 253
0015         ?C0011:
0015 22                RET     
             ; FUNCTION TakeSample_IRQ_GetPriority (END)

             ; FUNCTION TakeSample_IRQ_Enable (BEGIN)
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 273
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
0006 22                RET     
             ; FUNCTION TakeSample_IRQ_Enable (END)

             ; FUNCTION TakeSample_IRQ_GetState (BEGIN)
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 294
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E004            JNB     ACC.0,?C0013
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0014
000D         ?C0013:
000D 7F00              MOV     R7,#00H
000F         ?C0014:
                                           ; SOURCE LINE # 295
000F         ?C0015:
000F 22                RET     
             ; FUNCTION TakeSample_IRQ_GetState (END)

             ; FUNCTION TakeSample_IRQ_Disable (BEGIN)
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 315
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0006 22                RET     
             ; FUNCTION TakeSample_IRQ_Disable (END)
C51 COMPILER V9.51   TAKESAMPLE_IRQ                                                        03/26/2014 20:15:35 PAGE 13  


             ; FUNCTION TakeSample_IRQ_SetPending (BEGIN)
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0000 9044D0            MOV     DPTR,#044D0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
0006 22                RET     
             ; FUNCTION TakeSample_IRQ_SetPending (END)

             ; FUNCTION TakeSample_IRQ_ClearPending (BEGIN)
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
0000 9044D8            MOV     DPTR,#044D8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
0006 22                RET     
             ; FUNCTION TakeSample_IRQ_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    380    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
